
HAL_Frequency_Reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d80  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08006e90  08006e90  00016e90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800729c  0800729c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800729c  0800729c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800729c  0800729c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800729c  0800729c  0001729c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072a0  080072a0  000172a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080072a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001dc  08007480  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08007480  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b9ca  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b60  00000000  00000000  0002bc12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  0002d778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000097a  00000000  00000000  0002e398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000185d9  00000000  00000000  0002ed12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d389  00000000  00000000  000472eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c644  00000000  00000000  00054674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000475c  00000000  00000000  000e0cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000e5414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08006e78 	.word	0x08006e78

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08006e78 	.word	0x08006e78

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpun>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001038:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800103c:	d102      	bne.n	8001044 <__aeabi_fcmpun+0x14>
 800103e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001042:	d108      	bne.n	8001056 <__aeabi_fcmpun+0x26>
 8001044:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001048:	d102      	bne.n	8001050 <__aeabi_fcmpun+0x20>
 800104a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104e:	d102      	bne.n	8001056 <__aeabi_fcmpun+0x26>
 8001050:	f04f 0000 	mov.w	r0, #0
 8001054:	4770      	bx	lr
 8001056:	f04f 0001 	mov.w	r0, #1
 800105a:	4770      	bx	lr

0800105c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001062:	f000 fc19 	bl	8001898 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001066:	f000 f8bb 	bl	80011e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800106a:	f000 f999 	bl	80013a0 <MX_GPIO_Init>
	MX_TIM2_Init();
 800106e:	f000 f8fd 	bl	800126c <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8001072:	f000 f96b 	bl	800134c <MX_USART1_UART_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	sprintf(gu8_MSG, "Scan started\n\r");
 8001076:	494b      	ldr	r1, [pc, #300]	; (80011a4 <main+0x148>)
 8001078:	484b      	ldr	r0, [pc, #300]	; (80011a8 <main+0x14c>)
 800107a:	f003 f915 	bl	80042a8 <siprintf>
	HAL_UART_Transmit(&huart1, gu8_MSG, sizeof(gu8_MSG), 100);
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	2223      	movs	r2, #35	; 0x23
 8001082:	4949      	ldr	r1, [pc, #292]	; (80011a8 <main+0x14c>)
 8001084:	4849      	ldr	r0, [pc, #292]	; (80011ac <main+0x150>)
 8001086:	f002 fa81 	bl	800358c <HAL_UART_Transmit>
	HAL_TIM_Base_Start_IT(&htim2);
 800108a:	4849      	ldr	r0, [pc, #292]	; (80011b0 <main+0x154>)
 800108c:	f001 fb58 	bl	8002740 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001090:	2100      	movs	r1, #0
 8001092:	4847      	ldr	r0, [pc, #284]	; (80011b0 <main+0x154>)
 8001094:	f001 fbfe 	bl	8002894 <HAL_TIM_IC_Start_IT>

	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (freq_array_index == FREQ_ARRAY_SIZE) {
 8001098:	4b46      	ldr	r3, [pc, #280]	; (80011b4 <main+0x158>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b0a      	cmp	r3, #10
 800109e:	d1fb      	bne.n	8001098 <main+0x3c>
			average = 0;
 80010a0:	4b45      	ldr	r3, [pc, #276]	; (80011b8 <main+0x15c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
			for (int loop; loop < FREQ_ARRAY_SIZE; loop++) {
 80010a6:	e016      	b.n	80010d6 <main+0x7a>
				uint32_t local = freq_array[loop];
 80010a8:	4a44      	ldr	r2, [pc, #272]	; (80011bc <main+0x160>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b0:	603b      	str	r3, [r7, #0]
				sprintf(gu8_MSG, "Frequency %d %lu Hz\n\r", loop + 1, local);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	4941      	ldr	r1, [pc, #260]	; (80011c0 <main+0x164>)
 80010ba:	483b      	ldr	r0, [pc, #236]	; (80011a8 <main+0x14c>)
 80010bc:	f003 f8f4 	bl	80042a8 <siprintf>
				//HAL_UART_Transmit(&huart1, gu8_MSG, sizeof(gu8_MSG), 100);
				average = average + local;
 80010c0:	4b3d      	ldr	r3, [pc, #244]	; (80011b8 <main+0x15c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	4413      	add	r3, r2
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b3a      	ldr	r3, [pc, #232]	; (80011b8 <main+0x15c>)
 80010ce:	601a      	str	r2, [r3, #0]
			for (int loop; loop < FREQ_ARRAY_SIZE; loop++) {
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3301      	adds	r3, #1
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b09      	cmp	r3, #9
 80010da:	dde5      	ble.n	80010a8 <main+0x4c>
			}
			average = average / FREQ_ARRAY_SIZE;
 80010dc:	4b36      	ldr	r3, [pc, #216]	; (80011b8 <main+0x15c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a38      	ldr	r2, [pc, #224]	; (80011c4 <main+0x168>)
 80010e2:	fb82 1203 	smull	r1, r2, r2, r3
 80010e6:	1092      	asrs	r2, r2, #2
 80010e8:	17db      	asrs	r3, r3, #31
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	4a32      	ldr	r2, [pc, #200]	; (80011b8 <main+0x15c>)
 80010ee:	6013      	str	r3, [r2, #0]

			if (average > 0) {
 80010f0:	4b31      	ldr	r3, [pc, #196]	; (80011b8 <main+0x15c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	ddcf      	ble.n	8001098 <main+0x3c>

				sprintf(gu8_MSG, "Average frequency %lu Hz\n\r", average);
 80010f8:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <main+0x15c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4932      	ldr	r1, [pc, #200]	; (80011c8 <main+0x16c>)
 8001100:	4829      	ldr	r0, [pc, #164]	; (80011a8 <main+0x14c>)
 8001102:	f003 f8d1 	bl	80042a8 <siprintf>
				HAL_UART_Transmit(&huart1, gu8_MSG, sizeof(gu8_MSG), 100);
 8001106:	2364      	movs	r3, #100	; 0x64
 8001108:	2223      	movs	r2, #35	; 0x23
 800110a:	4927      	ldr	r1, [pc, #156]	; (80011a8 <main+0x14c>)
 800110c:	4827      	ldr	r0, [pc, #156]	; (80011ac <main+0x150>)
 800110e:	f002 fa3d 	bl	800358c <HAL_UART_Transmit>
				memset(gu8_MSG, 0, sizeof(gu8_MSG));
 8001112:	2223      	movs	r2, #35	; 0x23
 8001114:	2100      	movs	r1, #0
 8001116:	4824      	ldr	r0, [pc, #144]	; (80011a8 <main+0x14c>)
 8001118:	f003 f929 	bl	800436e <memset>


				faverage = average/1000.0f;
 800111c:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <main+0x15c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fd6b 	bl	8000bfc <__aeabi_i2f>
 8001126:	4603      	mov	r3, r0
 8001128:	4928      	ldr	r1, [pc, #160]	; (80011cc <main+0x170>)
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fe6e 	bl	8000e0c <__aeabi_fdiv>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <main+0x174>)
 8001136:	601a      	str	r2, [r3, #0]
				sprintf(gu8_MSG, "Average frequency %3.4f kHz\n\r", faverage);
				HAL_UART_Transmit(&huart1, gu8_MSG, sizeof(gu8_MSG), 100);
				memset(gu8_MSG, 0, sizeof(gu8_MSG));
				*/

				faverage = powf(faverage, 2);
 8001138:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <main+0x174>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001140:	4618      	mov	r0, r3
 8001142:	f005 f9ff 	bl	8006544 <powf>
 8001146:	4603      	mov	r3, r0
 8001148:	4a21      	ldr	r2, [pc, #132]	; (80011d0 <main+0x174>)
 800114a:	6013      	str	r3, [r2, #0]
				sprintf(gu8_MSG, "Average frequency %3.4f kHz\n\r", faverage);
				HAL_UART_Transmit(&huart1, gu8_MSG, sizeof(gu8_MSG), 100);
				memset(gu8_MSG, 0, sizeof(gu8_MSG));
				*/

				faverage = 1000 / (faverage * FOUR_PI_SQRT * CAP_VALUE);
 800114c:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <main+0x174>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4920      	ldr	r1, [pc, #128]	; (80011d4 <main+0x178>)
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fda6 	bl	8000ca4 <__aeabi_fmul>
 8001158:	4603      	mov	r3, r0
 800115a:	491f      	ldr	r1, [pc, #124]	; (80011d8 <main+0x17c>)
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fda1 	bl	8000ca4 <__aeabi_fmul>
 8001162:	4603      	mov	r3, r0
 8001164:	4619      	mov	r1, r3
 8001166:	4819      	ldr	r0, [pc, #100]	; (80011cc <main+0x170>)
 8001168:	f7ff fe50 	bl	8000e0c <__aeabi_fdiv>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <main+0x174>)
 8001172:	601a      	str	r2, [r3, #0]

				sprintf(gu8_MSG, "Inductance %3.4f mH\n\r", faverage);
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <main+0x174>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f955 	bl	8000428 <__aeabi_f2d>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4916      	ldr	r1, [pc, #88]	; (80011dc <main+0x180>)
 8001184:	4808      	ldr	r0, [pc, #32]	; (80011a8 <main+0x14c>)
 8001186:	f003 f88f 	bl	80042a8 <siprintf>
				HAL_UART_Transmit(&huart1, gu8_MSG, sizeof(gu8_MSG), 100);
 800118a:	2364      	movs	r3, #100	; 0x64
 800118c:	2223      	movs	r2, #35	; 0x23
 800118e:	4906      	ldr	r1, [pc, #24]	; (80011a8 <main+0x14c>)
 8001190:	4806      	ldr	r0, [pc, #24]	; (80011ac <main+0x150>)
 8001192:	f002 f9fb 	bl	800358c <HAL_UART_Transmit>
				memset(gu8_MSG, 0, sizeof(gu8_MSG));
 8001196:	2223      	movs	r2, #35	; 0x23
 8001198:	2100      	movs	r1, #0
 800119a:	4803      	ldr	r0, [pc, #12]	; (80011a8 <main+0x14c>)
 800119c:	f003 f8e7 	bl	800436e <memset>
		if (freq_array_index == FREQ_ARRAY_SIZE) {
 80011a0:	e77a      	b.n	8001098 <main+0x3c>
 80011a2:	bf00      	nop
 80011a4:	08006e90 	.word	0x08006e90
 80011a8:	2000028c 	.word	0x2000028c
 80011ac:	20000240 	.word	0x20000240
 80011b0:	200001f8 	.word	0x200001f8
 80011b4:	200002ec 	.word	0x200002ec
 80011b8:	200002f0 	.word	0x200002f0
 80011bc:	200002c4 	.word	0x200002c4
 80011c0:	08006ea0 	.word	0x08006ea0
 80011c4:	66666667 	.word	0x66666667
 80011c8:	08006eb8 	.word	0x08006eb8
 80011cc:	447a0000 	.word	0x447a0000
 80011d0:	200002f4 	.word	0x200002f4
 80011d4:	421de9e2 	.word	0x421de9e2
 80011d8:	3d8764ae 	.word	0x3d8764ae
 80011dc:	08006ed4 	.word	0x08006ed4

080011e0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b090      	sub	sp, #64	; 0x40
 80011e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80011e6:	f107 0318 	add.w	r3, r7, #24
 80011ea:	2228      	movs	r2, #40	; 0x28
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f003 f8bd 	bl	800436e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001202:	2301      	movs	r3, #1
 8001204:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001206:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800120a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001210:	2301      	movs	r3, #1
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001214:	2302      	movs	r3, #2
 8001216:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800121c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800121e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001222:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001224:	f107 0318 	add.w	r3, r7, #24
 8001228:	4618      	mov	r0, r3
 800122a:	f000 fe29 	bl	8001e80 <HAL_RCC_OscConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0x58>
		Error_Handler();
 8001234:	f000 f95a 	bl	80014ec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 8001238:	230f      	movs	r3, #15
 800123a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800123c:	2302      	movs	r3, #2
 800123e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001248:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2102      	movs	r1, #2
 8001252:	4618      	mov	r0, r3
 8001254:	f001 f896 	bl	8002384 <HAL_RCC_ClockConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0x82>
		Error_Handler();
 800125e:	f000 f945 	bl	80014ec <Error_Handler>
	}
}
 8001262:	bf00      	nop
 8001264:	3740      	adds	r7, #64	; 0x40
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001272:	f107 0318 	add.w	r3, r7, #24
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800128a:	463b      	mov	r3, r7
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001296:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <MX_TIM2_Init+0xdc>)
 8001298:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800129c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800129e:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <MX_TIM2_Init+0xdc>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a4:	4b28      	ldr	r3, [pc, #160]	; (8001348 <MX_TIM2_Init+0xdc>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80012aa:	4b27      	ldr	r3, [pc, #156]	; (8001348 <MX_TIM2_Init+0xdc>)
 80012ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012b0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b2:	4b25      	ldr	r3, [pc, #148]	; (8001348 <MX_TIM2_Init+0xdc>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012b8:	4b23      	ldr	r3, [pc, #140]	; (8001348 <MX_TIM2_Init+0xdc>)
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80012be:	4822      	ldr	r0, [pc, #136]	; (8001348 <MX_TIM2_Init+0xdc>)
 80012c0:	f001 f9ee 	bl	80026a0 <HAL_TIM_Base_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM2_Init+0x62>
		Error_Handler();
 80012ca:	f000 f90f 	bl	80014ec <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d2:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80012d4:	f107 0318 	add.w	r3, r7, #24
 80012d8:	4619      	mov	r1, r3
 80012da:	481b      	ldr	r0, [pc, #108]	; (8001348 <MX_TIM2_Init+0xdc>)
 80012dc:	f001 fd8a 	bl	8002df4 <HAL_TIM_ConfigClockSource>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM2_Init+0x7e>
		Error_Handler();
 80012e6:	f000 f901 	bl	80014ec <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 80012ea:	4817      	ldr	r0, [pc, #92]	; (8001348 <MX_TIM2_Init+0xdc>)
 80012ec:	f001 fa7a 	bl	80027e4 <HAL_TIM_IC_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM2_Init+0x8e>
		Error_Handler();
 80012f6:	f000 f8f9 	bl	80014ec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8001302:	f107 0310 	add.w	r3, r7, #16
 8001306:	4619      	mov	r1, r3
 8001308:	480f      	ldr	r0, [pc, #60]	; (8001348 <MX_TIM2_Init+0xdc>)
 800130a:	f002 f87f 	bl	800340c <HAL_TIMEx_MasterConfigSynchronization>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM2_Init+0xac>
		Error_Handler();
 8001314:	f000 f8ea 	bl	80014ec <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001318:	2300      	movs	r3, #0
 800131a:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800131c:	2301      	movs	r3, #1
 800131e:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001328:	463b      	mov	r3, r7
 800132a:	2200      	movs	r2, #0
 800132c:	4619      	mov	r1, r3
 800132e:	4806      	ldr	r0, [pc, #24]	; (8001348 <MX_TIM2_Init+0xdc>)
 8001330:	f001 fcc4 	bl	8002cbc <HAL_TIM_IC_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM2_Init+0xd2>
		Error_Handler();
 800133a:	f000 f8d7 	bl	80014ec <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	; 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200001f8 	.word	0x200001f8

0800134c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <MX_USART1_UART_Init+0x50>)
 8001354:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800135c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001384:	f002 f8b2 	bl	80034ec <HAL_UART_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800138e:	f000 f8ad 	bl	80014ec <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000240 	.word	0x20000240
 800139c:	40013800 	.word	0x40013800

080013a0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_GPIO_Init+0x40>)
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <MX_GPIO_Init+0x40>)
 80013ac:	f043 0320 	orr.w	r3, r3, #32
 80013b0:	6193      	str	r3, [r2, #24]
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <MX_GPIO_Init+0x40>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	f003 0320 	and.w	r3, r3, #32
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <MX_GPIO_Init+0x40>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <MX_GPIO_Init+0x40>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	6193      	str	r3, [r2, #24]
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <MX_GPIO_Init+0x40>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	40021000 	.word	0x40021000

080013e4 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	if (gu8_State == IDLE) {
 80013ec:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10b      	bne.n	800140e <HAL_TIM_IC_CaptureCallback+0x2a>
		gu32_T1 = TIM2->CCR1;
 80013f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fc:	4a2a      	ldr	r2, [pc, #168]	; (80014a8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80013fe:	6013      	str	r3, [r2, #0]
		gu16_TIM2_OVC = 0;
 8001400:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001402:	2200      	movs	r2, #0
 8001404:	801a      	strh	r2, [r3, #0]
		gu8_State = DONE;
 8001406:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
			else if (freq_array_index == FREQ_ARRAY_SIZE)
				freq_array_index = 0;
		}
		gu8_State = IDLE;
	}
}
 800140c:	e045      	b.n	800149a <HAL_TIM_IC_CaptureCallback+0xb6>
	} else if (gu8_State == DONE) {
 800140e:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b01      	cmp	r3, #1
 8001416:	d140      	bne.n	800149a <HAL_TIM_IC_CaptureCallback+0xb6>
		gu32_T2 = TIM2->CCR1;
 8001418:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800141c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800141e:	4a24      	ldr	r2, [pc, #144]	; (80014b0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001420:	6013      	str	r3, [r2, #0]
		gu32_Ticks = (gu32_T2 + (gu16_TIM2_OVC * 65536)) - gu32_T1;
 8001422:	4b22      	ldr	r3, [pc, #136]	; (80014ac <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001424:	881b      	ldrh	r3, [r3, #0]
 8001426:	b29b      	uxth	r3, r3
 8001428:	041b      	lsls	r3, r3, #16
 800142a:	461a      	mov	r2, r3
 800142c:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	441a      	add	r2, r3
 8001432:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	4a1e      	ldr	r2, [pc, #120]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800143a:	6013      	str	r3, [r2, #0]
		gu32_Freq = (uint32_t) (F_CLK / gu32_Ticks);
 800143c:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001442:	fbb2 f3f3 	udiv	r3, r2, r3
 8001446:	4a1d      	ldr	r2, [pc, #116]	; (80014bc <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001448:	6013      	str	r3, [r2, #0]
		gu32_Freq = (uint32_t) (F_CLK / (TIM2->CCR1 - gu32_T1));
 800144a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800144e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	4a18      	ldr	r2, [pc, #96]	; (80014b8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001458:	fbb2 f3f3 	udiv	r3, r2, r3
 800145c:	4a17      	ldr	r2, [pc, #92]	; (80014bc <HAL_TIM_IC_CaptureCallback+0xd8>)
 800145e:	6013      	str	r3, [r2, #0]
		if (gu32_Freq != 0) {
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d015      	beq.n	8001494 <HAL_TIM_IC_CaptureCallback+0xb0>
			if (freq_array_index < FREQ_ARRAY_SIZE)
 8001468:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b09      	cmp	r3, #9
 800146e:	d80a      	bhi.n	8001486 <HAL_TIM_IC_CaptureCallback+0xa2>
				freq_array[freq_array_index++] = gu32_Freq;
 8001470:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	1c5a      	adds	r2, r3, #1
 8001476:	4912      	ldr	r1, [pc, #72]	; (80014c0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001478:	600a      	str	r2, [r1, #0]
 800147a:	4a10      	ldr	r2, [pc, #64]	; (80014bc <HAL_TIM_IC_CaptureCallback+0xd8>)
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	4911      	ldr	r1, [pc, #68]	; (80014c4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001484:	e006      	b.n	8001494 <HAL_TIM_IC_CaptureCallback+0xb0>
			else if (freq_array_index == FREQ_ARRAY_SIZE)
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b0a      	cmp	r3, #10
 800148c:	d102      	bne.n	8001494 <HAL_TIM_IC_CaptureCallback+0xb0>
				freq_array_index = 0;
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
		gu8_State = IDLE;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	20000288 	.word	0x20000288
 80014a8:	200002b0 	.word	0x200002b0
 80014ac:	200002bc 	.word	0x200002bc
 80014b0:	200002b4 	.word	0x200002b4
 80014b4:	200002b8 	.word	0x200002b8
 80014b8:	044aa200 	.word	0x044aa200
 80014bc:	200002c0 	.word	0x200002c0
 80014c0:	200002ec 	.word	0x200002ec
 80014c4:	200002c4 	.word	0x200002c4

080014c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	// this is useful only for low frequencies where, < 65536 Hz
	gu16_TIM2_OVC++;
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	3301      	adds	r3, #1
 80014d8:	b29a      	uxth	r2, r3
 80014da:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014dc:	801a      	strh	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	200002bc 	.word	0x200002bc

080014ec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f0:	b672      	cpsid	i
}
 80014f2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80014f4:	e7fe      	b.n	80014f4 <Error_Handler+0x8>
	...

080014f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <HAL_MspInit+0x40>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <HAL_MspInit+0x40>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6193      	str	r3, [r2, #24]
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_MspInit+0x40>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <HAL_MspInit+0x40>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	4a07      	ldr	r2, [pc, #28]	; (8001538 <HAL_MspInit+0x40>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	61d3      	str	r3, [r2, #28]
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_MspInit+0x40>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	40021000 	.word	0x40021000

0800153c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800155a:	d12b      	bne.n	80015b4 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800155c:	4b17      	ldr	r3, [pc, #92]	; (80015bc <HAL_TIM_Base_MspInit+0x80>)
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	4a16      	ldr	r2, [pc, #88]	; (80015bc <HAL_TIM_Base_MspInit+0x80>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	61d3      	str	r3, [r2, #28]
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <HAL_TIM_Base_MspInit+0x80>)
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <HAL_TIM_Base_MspInit+0x80>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4a10      	ldr	r2, [pc, #64]	; (80015bc <HAL_TIM_Base_MspInit+0x80>)
 800157a:	f043 0304 	orr.w	r3, r3, #4
 800157e:	6193      	str	r3, [r2, #24]
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <HAL_TIM_Base_MspInit+0x80>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800158c:	2301      	movs	r3, #1
 800158e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	4619      	mov	r1, r3
 800159e:	4808      	ldr	r0, [pc, #32]	; (80015c0 <HAL_TIM_Base_MspInit+0x84>)
 80015a0:	f000 faea 	bl	8001b78 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2100      	movs	r1, #0
 80015a8:	201c      	movs	r0, #28
 80015aa:	f000 faae 	bl	8001b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015ae:	201c      	movs	r0, #28
 80015b0:	f000 fac7 	bl	8001b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015b4:	bf00      	nop
 80015b6:	3720      	adds	r7, #32
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40010800 	.word	0x40010800

080015c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a1c      	ldr	r2, [pc, #112]	; (8001650 <HAL_UART_MspInit+0x8c>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d131      	bne.n	8001648 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <HAL_UART_MspInit+0x90>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4a1a      	ldr	r2, [pc, #104]	; (8001654 <HAL_UART_MspInit+0x90>)
 80015ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ee:	6193      	str	r3, [r2, #24]
 80015f0:	4b18      	ldr	r3, [pc, #96]	; (8001654 <HAL_UART_MspInit+0x90>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <HAL_UART_MspInit+0x90>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a14      	ldr	r2, [pc, #80]	; (8001654 <HAL_UART_MspInit+0x90>)
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_UART_MspInit+0x90>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001618:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	f107 0310 	add.w	r3, r7, #16
 8001626:	4619      	mov	r1, r3
 8001628:	480b      	ldr	r0, [pc, #44]	; (8001658 <HAL_UART_MspInit+0x94>)
 800162a:	f000 faa5 	bl	8001b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800162e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001632:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	4619      	mov	r1, r3
 8001642:	4805      	ldr	r0, [pc, #20]	; (8001658 <HAL_UART_MspInit+0x94>)
 8001644:	f000 fa98 	bl	8001b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001648:	bf00      	nop
 800164a:	3720      	adds	r7, #32
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40013800 	.word	0x40013800
 8001654:	40021000 	.word	0x40021000
 8001658:	40010800 	.word	0x40010800

0800165c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <NMI_Handler+0x4>

08001662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <HardFault_Handler+0x4>

08001668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <MemManage_Handler+0x4>

0800166e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <BusFault_Handler+0x4>

08001674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <UsageFault_Handler+0x4>

0800167a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr

08001692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr

0800169e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a2:	f000 f93f 	bl	8001924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <TIM2_IRQHandler+0x10>)
 80016b2:	f001 f9fb 	bl	8002aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200001f8 	.word	0x200001f8

080016c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return 1;
 80016c4:	2301      	movs	r3, #1
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr

080016ce <_kill>:

int _kill(int pid, int sig)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016d8:	f002 fe9c 	bl	8004414 <__errno>
 80016dc:	4603      	mov	r3, r0
 80016de:	2216      	movs	r2, #22
 80016e0:	601a      	str	r2, [r3, #0]
  return -1;
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <_exit>:

void _exit (int status)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016f6:	f04f 31ff 	mov.w	r1, #4294967295
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ffe7 	bl	80016ce <_kill>
  while (1) {}    /* Make sure we hang here */
 8001700:	e7fe      	b.n	8001700 <_exit+0x12>

08001702 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	e00a      	b.n	800172a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001714:	f3af 8000 	nop.w
 8001718:	4601      	mov	r1, r0
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	60ba      	str	r2, [r7, #8]
 8001720:	b2ca      	uxtb	r2, r1
 8001722:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	3301      	adds	r3, #1
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	429a      	cmp	r2, r3
 8001730:	dbf0      	blt.n	8001714 <_read+0x12>
  }

  return len;
 8001732:	687b      	ldr	r3, [r7, #4]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	e009      	b.n	8001762 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	60ba      	str	r2, [r7, #8]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	3301      	adds	r3, #1
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	429a      	cmp	r2, r3
 8001768:	dbf1      	blt.n	800174e <_write+0x12>
  }
  return len;
 800176a:	687b      	ldr	r3, [r7, #4]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <_close>:

int _close(int file)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800179a:	605a      	str	r2, [r3, #4]
  return 0;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <_isatty>:

int _isatty(int file)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017b0:	2301      	movs	r3, #1
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017dc:	4a14      	ldr	r2, [pc, #80]	; (8001830 <_sbrk+0x5c>)
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <_sbrk+0x60>)
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <_sbrk+0x64>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <_sbrk+0x68>)
 80017f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	429a      	cmp	r2, r3
 8001802:	d207      	bcs.n	8001814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001804:	f002 fe06 	bl	8004414 <__errno>
 8001808:	4603      	mov	r3, r0
 800180a:	220c      	movs	r2, #12
 800180c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295
 8001812:	e009      	b.n	8001828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <_sbrk+0x64>)
 8001824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001826:	68fb      	ldr	r3, [r7, #12]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20005000 	.word	0x20005000
 8001834:	00000400 	.word	0x00000400
 8001838:	200002f8 	.word	0x200002f8
 800183c:	20000450 	.word	0x20000450

08001840 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800184c:	f7ff fff8 	bl	8001840 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001850:	480b      	ldr	r0, [pc, #44]	; (8001880 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001852:	490c      	ldr	r1, [pc, #48]	; (8001884 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001854:	4a0c      	ldr	r2, [pc, #48]	; (8001888 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001858:	e002      	b.n	8001860 <LoopCopyDataInit>

0800185a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800185c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185e:	3304      	adds	r3, #4

08001860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001864:	d3f9      	bcc.n	800185a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001866:	4a09      	ldr	r2, [pc, #36]	; (800188c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001868:	4c09      	ldr	r4, [pc, #36]	; (8001890 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800186c:	e001      	b.n	8001872 <LoopFillZerobss>

0800186e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001870:	3204      	adds	r2, #4

08001872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001874:	d3fb      	bcc.n	800186e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001876:	f002 fdd3 	bl	8004420 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800187a:	f7ff fbef 	bl	800105c <main>
  bx lr
 800187e:	4770      	bx	lr
  ldr r0, =_sdata
 8001880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001884:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001888:	080072a4 	.word	0x080072a4
  ldr r2, =_sbss
 800188c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001890:	2000044c 	.word	0x2000044c

08001894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001894:	e7fe      	b.n	8001894 <ADC1_2_IRQHandler>
	...

08001898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_Init+0x28>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <HAL_Init+0x28>)
 80018a2:	f043 0310 	orr.w	r3, r3, #16
 80018a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a8:	2003      	movs	r0, #3
 80018aa:	f000 f923 	bl	8001af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ae:	200f      	movs	r0, #15
 80018b0:	f000 f808 	bl	80018c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b4:	f7ff fe20 	bl	80014f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40022000 	.word	0x40022000

080018c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_InitTick+0x54>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_InitTick+0x58>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	4619      	mov	r1, r3
 80018d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018da:	fbb3 f3f1 	udiv	r3, r3, r1
 80018de:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f93b 	bl	8001b5e <HAL_SYSTICK_Config>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00e      	b.n	8001910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b0f      	cmp	r3, #15
 80018f6:	d80a      	bhi.n	800190e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f8:	2200      	movs	r2, #0
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001900:	f000 f903 	bl	8001b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001904:	4a06      	ldr	r2, [pc, #24]	; (8001920 <HAL_InitTick+0x5c>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	e000      	b.n	8001910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000000 	.word	0x20000000
 800191c:	20000008 	.word	0x20000008
 8001920:	20000004 	.word	0x20000004

08001924 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_IncTick+0x1c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	4b05      	ldr	r3, [pc, #20]	; (8001944 <HAL_IncTick+0x20>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4413      	add	r3, r2
 8001934:	4a03      	ldr	r2, [pc, #12]	; (8001944 <HAL_IncTick+0x20>)
 8001936:	6013      	str	r3, [r2, #0]
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	20000008 	.word	0x20000008
 8001944:	200002fc 	.word	0x200002fc

08001948 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return uwTick;
 800194c:	4b02      	ldr	r3, [pc, #8]	; (8001958 <HAL_GetTick+0x10>)
 800194e:	681b      	ldr	r3, [r3, #0]
}
 8001950:	4618      	mov	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	200002fc 	.word	0x200002fc

0800195c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <__NVIC_SetPriorityGrouping+0x44>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001978:	4013      	ands	r3, r2
 800197a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800198c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198e:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	60d3      	str	r3, [r2, #12]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a8:	4b04      	ldr	r3, [pc, #16]	; (80019bc <__NVIC_GetPriorityGrouping+0x18>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	f003 0307 	and.w	r3, r3, #7
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	db0b      	blt.n	80019ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	f003 021f 	and.w	r2, r3, #31
 80019d8:	4906      	ldr	r1, [pc, #24]	; (80019f4 <__NVIC_EnableIRQ+0x34>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	095b      	lsrs	r3, r3, #5
 80019e0:	2001      	movs	r0, #1
 80019e2:	fa00 f202 	lsl.w	r2, r0, r2
 80019e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	e000e100 	.word	0xe000e100

080019f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	6039      	str	r1, [r7, #0]
 8001a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	db0a      	blt.n	8001a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	490c      	ldr	r1, [pc, #48]	; (8001a44 <__NVIC_SetPriority+0x4c>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	0112      	lsls	r2, r2, #4
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a20:	e00a      	b.n	8001a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4908      	ldr	r1, [pc, #32]	; (8001a48 <__NVIC_SetPriority+0x50>)
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	3b04      	subs	r3, #4
 8001a30:	0112      	lsls	r2, r2, #4
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	440b      	add	r3, r1
 8001a36:	761a      	strb	r2, [r3, #24]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000e100 	.word	0xe000e100
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	; 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f1c3 0307 	rsb	r3, r3, #7
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	bf28      	it	cs
 8001a6a:	2304      	movcs	r3, #4
 8001a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3304      	adds	r3, #4
 8001a72:	2b06      	cmp	r3, #6
 8001a74:	d902      	bls.n	8001a7c <NVIC_EncodePriority+0x30>
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3b03      	subs	r3, #3
 8001a7a:	e000      	b.n	8001a7e <NVIC_EncodePriority+0x32>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	f04f 32ff 	mov.w	r2, #4294967295
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	401a      	ands	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	43d9      	mvns	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	4313      	orrs	r3, r2
         );
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3724      	adds	r7, #36	; 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ac0:	d301      	bcc.n	8001ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00f      	b.n	8001ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <SysTick_Config+0x40>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ace:	210f      	movs	r1, #15
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f7ff ff90 	bl	80019f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <SysTick_Config+0x40>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ade:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <SysTick_Config+0x40>)
 8001ae0:	2207      	movs	r2, #7
 8001ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	e000e010 	.word	0xe000e010

08001af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ff2d 	bl	800195c <__NVIC_SetPriorityGrouping>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
 8001b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b1c:	f7ff ff42 	bl	80019a4 <__NVIC_GetPriorityGrouping>
 8001b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	68b9      	ldr	r1, [r7, #8]
 8001b26:	6978      	ldr	r0, [r7, #20]
 8001b28:	f7ff ff90 	bl	8001a4c <NVIC_EncodePriority>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff5f 	bl	80019f8 <__NVIC_SetPriority>
}
 8001b3a:	bf00      	nop
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff35 	bl	80019c0 <__NVIC_EnableIRQ>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ffa2 	bl	8001ab0 <SysTick_Config>
 8001b6c:	4603      	mov	r3, r0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b08b      	sub	sp, #44	; 0x2c
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b86:	2300      	movs	r3, #0
 8001b88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8a:	e169      	b.n	8001e60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	f040 8158 	bne.w	8001e5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	4a9a      	ldr	r2, [pc, #616]	; (8001e18 <HAL_GPIO_Init+0x2a0>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d05e      	beq.n	8001c72 <HAL_GPIO_Init+0xfa>
 8001bb4:	4a98      	ldr	r2, [pc, #608]	; (8001e18 <HAL_GPIO_Init+0x2a0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d875      	bhi.n	8001ca6 <HAL_GPIO_Init+0x12e>
 8001bba:	4a98      	ldr	r2, [pc, #608]	; (8001e1c <HAL_GPIO_Init+0x2a4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d058      	beq.n	8001c72 <HAL_GPIO_Init+0xfa>
 8001bc0:	4a96      	ldr	r2, [pc, #600]	; (8001e1c <HAL_GPIO_Init+0x2a4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d86f      	bhi.n	8001ca6 <HAL_GPIO_Init+0x12e>
 8001bc6:	4a96      	ldr	r2, [pc, #600]	; (8001e20 <HAL_GPIO_Init+0x2a8>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d052      	beq.n	8001c72 <HAL_GPIO_Init+0xfa>
 8001bcc:	4a94      	ldr	r2, [pc, #592]	; (8001e20 <HAL_GPIO_Init+0x2a8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d869      	bhi.n	8001ca6 <HAL_GPIO_Init+0x12e>
 8001bd2:	4a94      	ldr	r2, [pc, #592]	; (8001e24 <HAL_GPIO_Init+0x2ac>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d04c      	beq.n	8001c72 <HAL_GPIO_Init+0xfa>
 8001bd8:	4a92      	ldr	r2, [pc, #584]	; (8001e24 <HAL_GPIO_Init+0x2ac>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d863      	bhi.n	8001ca6 <HAL_GPIO_Init+0x12e>
 8001bde:	4a92      	ldr	r2, [pc, #584]	; (8001e28 <HAL_GPIO_Init+0x2b0>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d046      	beq.n	8001c72 <HAL_GPIO_Init+0xfa>
 8001be4:	4a90      	ldr	r2, [pc, #576]	; (8001e28 <HAL_GPIO_Init+0x2b0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d85d      	bhi.n	8001ca6 <HAL_GPIO_Init+0x12e>
 8001bea:	2b12      	cmp	r3, #18
 8001bec:	d82a      	bhi.n	8001c44 <HAL_GPIO_Init+0xcc>
 8001bee:	2b12      	cmp	r3, #18
 8001bf0:	d859      	bhi.n	8001ca6 <HAL_GPIO_Init+0x12e>
 8001bf2:	a201      	add	r2, pc, #4	; (adr r2, 8001bf8 <HAL_GPIO_Init+0x80>)
 8001bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf8:	08001c73 	.word	0x08001c73
 8001bfc:	08001c4d 	.word	0x08001c4d
 8001c00:	08001c5f 	.word	0x08001c5f
 8001c04:	08001ca1 	.word	0x08001ca1
 8001c08:	08001ca7 	.word	0x08001ca7
 8001c0c:	08001ca7 	.word	0x08001ca7
 8001c10:	08001ca7 	.word	0x08001ca7
 8001c14:	08001ca7 	.word	0x08001ca7
 8001c18:	08001ca7 	.word	0x08001ca7
 8001c1c:	08001ca7 	.word	0x08001ca7
 8001c20:	08001ca7 	.word	0x08001ca7
 8001c24:	08001ca7 	.word	0x08001ca7
 8001c28:	08001ca7 	.word	0x08001ca7
 8001c2c:	08001ca7 	.word	0x08001ca7
 8001c30:	08001ca7 	.word	0x08001ca7
 8001c34:	08001ca7 	.word	0x08001ca7
 8001c38:	08001ca7 	.word	0x08001ca7
 8001c3c:	08001c55 	.word	0x08001c55
 8001c40:	08001c69 	.word	0x08001c69
 8001c44:	4a79      	ldr	r2, [pc, #484]	; (8001e2c <HAL_GPIO_Init+0x2b4>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d013      	beq.n	8001c72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c4a:	e02c      	b.n	8001ca6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	623b      	str	r3, [r7, #32]
          break;
 8001c52:	e029      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	623b      	str	r3, [r7, #32]
          break;
 8001c5c:	e024      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	3308      	adds	r3, #8
 8001c64:	623b      	str	r3, [r7, #32]
          break;
 8001c66:	e01f      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	330c      	adds	r3, #12
 8001c6e:	623b      	str	r3, [r7, #32]
          break;
 8001c70:	e01a      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d102      	bne.n	8001c80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	623b      	str	r3, [r7, #32]
          break;
 8001c7e:	e013      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d105      	bne.n	8001c94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c88:	2308      	movs	r3, #8
 8001c8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69fa      	ldr	r2, [r7, #28]
 8001c90:	611a      	str	r2, [r3, #16]
          break;
 8001c92:	e009      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c94:	2308      	movs	r3, #8
 8001c96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69fa      	ldr	r2, [r7, #28]
 8001c9c:	615a      	str	r2, [r3, #20]
          break;
 8001c9e:	e003      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	623b      	str	r3, [r7, #32]
          break;
 8001ca4:	e000      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          break;
 8001ca6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	2bff      	cmp	r3, #255	; 0xff
 8001cac:	d801      	bhi.n	8001cb2 <HAL_GPIO_Init+0x13a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	e001      	b.n	8001cb6 <HAL_GPIO_Init+0x13e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	2bff      	cmp	r3, #255	; 0xff
 8001cbc:	d802      	bhi.n	8001cc4 <HAL_GPIO_Init+0x14c>
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	e002      	b.n	8001cca <HAL_GPIO_Init+0x152>
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	3b08      	subs	r3, #8
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	210f      	movs	r1, #15
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	401a      	ands	r2, r3
 8001cdc:	6a39      	ldr	r1, [r7, #32]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 80b1 	beq.w	8001e5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf8:	4b4d      	ldr	r3, [pc, #308]	; (8001e30 <HAL_GPIO_Init+0x2b8>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	4a4c      	ldr	r2, [pc, #304]	; (8001e30 <HAL_GPIO_Init+0x2b8>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6193      	str	r3, [r2, #24]
 8001d04:	4b4a      	ldr	r3, [pc, #296]	; (8001e30 <HAL_GPIO_Init+0x2b8>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d10:	4a48      	ldr	r2, [pc, #288]	; (8001e34 <HAL_GPIO_Init+0x2bc>)
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3302      	adds	r3, #2
 8001d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	220f      	movs	r2, #15
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	4013      	ands	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a40      	ldr	r2, [pc, #256]	; (8001e38 <HAL_GPIO_Init+0x2c0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d013      	beq.n	8001d64 <HAL_GPIO_Init+0x1ec>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a3f      	ldr	r2, [pc, #252]	; (8001e3c <HAL_GPIO_Init+0x2c4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d00d      	beq.n	8001d60 <HAL_GPIO_Init+0x1e8>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a3e      	ldr	r2, [pc, #248]	; (8001e40 <HAL_GPIO_Init+0x2c8>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d007      	beq.n	8001d5c <HAL_GPIO_Init+0x1e4>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a3d      	ldr	r2, [pc, #244]	; (8001e44 <HAL_GPIO_Init+0x2cc>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d101      	bne.n	8001d58 <HAL_GPIO_Init+0x1e0>
 8001d54:	2303      	movs	r3, #3
 8001d56:	e006      	b.n	8001d66 <HAL_GPIO_Init+0x1ee>
 8001d58:	2304      	movs	r3, #4
 8001d5a:	e004      	b.n	8001d66 <HAL_GPIO_Init+0x1ee>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e002      	b.n	8001d66 <HAL_GPIO_Init+0x1ee>
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <HAL_GPIO_Init+0x1ee>
 8001d64:	2300      	movs	r3, #0
 8001d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d68:	f002 0203 	and.w	r2, r2, #3
 8001d6c:	0092      	lsls	r2, r2, #2
 8001d6e:	4093      	lsls	r3, r2
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d76:	492f      	ldr	r1, [pc, #188]	; (8001e34 <HAL_GPIO_Init+0x2bc>)
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	089b      	lsrs	r3, r3, #2
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d006      	beq.n	8001d9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d90:	4b2d      	ldr	r3, [pc, #180]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	492c      	ldr	r1, [pc, #176]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	608b      	str	r3, [r1, #8]
 8001d9c:	e006      	b.n	8001dac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d9e:	4b2a      	ldr	r3, [pc, #168]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	4928      	ldr	r1, [pc, #160]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d006      	beq.n	8001dc6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001db8:	4b23      	ldr	r3, [pc, #140]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	4922      	ldr	r1, [pc, #136]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	60cb      	str	r3, [r1, #12]
 8001dc4:	e006      	b.n	8001dd4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dc6:	4b20      	ldr	r3, [pc, #128]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	491e      	ldr	r1, [pc, #120]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001de0:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	4918      	ldr	r1, [pc, #96]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
 8001dec:	e006      	b.n	8001dfc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dee:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	4914      	ldr	r1, [pc, #80]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d021      	beq.n	8001e4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	490e      	ldr	r1, [pc, #56]	; (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]
 8001e14:	e021      	b.n	8001e5a <HAL_GPIO_Init+0x2e2>
 8001e16:	bf00      	nop
 8001e18:	10320000 	.word	0x10320000
 8001e1c:	10310000 	.word	0x10310000
 8001e20:	10220000 	.word	0x10220000
 8001e24:	10210000 	.word	0x10210000
 8001e28:	10120000 	.word	0x10120000
 8001e2c:	10110000 	.word	0x10110000
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40010000 	.word	0x40010000
 8001e38:	40010800 	.word	0x40010800
 8001e3c:	40010c00 	.word	0x40010c00
 8001e40:	40011000 	.word	0x40011000
 8001e44:	40011400 	.word	0x40011400
 8001e48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_GPIO_Init+0x304>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	4909      	ldr	r1, [pc, #36]	; (8001e7c <HAL_GPIO_Init+0x304>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f47f ae8e 	bne.w	8001b8c <HAL_GPIO_Init+0x14>
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	372c      	adds	r7, #44	; 0x2c
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	40010400 	.word	0x40010400

08001e80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e272      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8087 	beq.w	8001fae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ea0:	4b92      	ldr	r3, [pc, #584]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 030c 	and.w	r3, r3, #12
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d00c      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001eac:	4b8f      	ldr	r3, [pc, #572]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 030c 	and.w	r3, r3, #12
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d112      	bne.n	8001ede <HAL_RCC_OscConfig+0x5e>
 8001eb8:	4b8c      	ldr	r3, [pc, #560]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec4:	d10b      	bne.n	8001ede <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec6:	4b89      	ldr	r3, [pc, #548]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d06c      	beq.n	8001fac <HAL_RCC_OscConfig+0x12c>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d168      	bne.n	8001fac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e24c      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x76>
 8001ee8:	4b80      	ldr	r3, [pc, #512]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a7f      	ldr	r2, [pc, #508]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	e02e      	b.n	8001f54 <HAL_RCC_OscConfig+0xd4>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x98>
 8001efe:	4b7b      	ldr	r3, [pc, #492]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a7a      	ldr	r2, [pc, #488]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	4b78      	ldr	r3, [pc, #480]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a77      	ldr	r2, [pc, #476]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e01d      	b.n	8001f54 <HAL_RCC_OscConfig+0xd4>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0xbc>
 8001f22:	4b72      	ldr	r3, [pc, #456]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a71      	ldr	r2, [pc, #452]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	4b6f      	ldr	r3, [pc, #444]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a6e      	ldr	r2, [pc, #440]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	e00b      	b.n	8001f54 <HAL_RCC_OscConfig+0xd4>
 8001f3c:	4b6b      	ldr	r3, [pc, #428]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a6a      	ldr	r2, [pc, #424]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b68      	ldr	r3, [pc, #416]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a67      	ldr	r2, [pc, #412]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d013      	beq.n	8001f84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7ff fcf4 	bl	8001948 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f64:	f7ff fcf0 	bl	8001948 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e200      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	4b5d      	ldr	r3, [pc, #372]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0xe4>
 8001f82:	e014      	b.n	8001fae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7ff fce0 	bl	8001948 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7ff fcdc 	bl	8001948 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e1ec      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9e:	4b53      	ldr	r3, [pc, #332]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x10c>
 8001faa:	e000      	b.n	8001fae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d063      	beq.n	8002082 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fba:	4b4c      	ldr	r3, [pc, #304]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00b      	beq.n	8001fde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fc6:	4b49      	ldr	r3, [pc, #292]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d11c      	bne.n	800200c <HAL_RCC_OscConfig+0x18c>
 8001fd2:	4b46      	ldr	r3, [pc, #280]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d116      	bne.n	800200c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fde:	4b43      	ldr	r3, [pc, #268]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d005      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x176>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d001      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e1c0      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4939      	ldr	r1, [pc, #228]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200a:	e03a      	b.n	8002082 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d020      	beq.n	8002056 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002014:	4b36      	ldr	r3, [pc, #216]	; (80020f0 <HAL_RCC_OscConfig+0x270>)
 8002016:	2201      	movs	r2, #1
 8002018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201a:	f7ff fc95 	bl	8001948 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002022:	f7ff fc91 	bl	8001948 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e1a1      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002034:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002040:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4927      	ldr	r1, [pc, #156]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]
 8002054:	e015      	b.n	8002082 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002056:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <HAL_RCC_OscConfig+0x270>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7ff fc74 	bl	8001948 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002064:	f7ff fc70 	bl	8001948 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e180      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002076:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d03a      	beq.n	8002104 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d019      	beq.n	80020ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002096:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <HAL_RCC_OscConfig+0x274>)
 8002098:	2201      	movs	r2, #1
 800209a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209c:	f7ff fc54 	bl	8001948 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a4:	f7ff fc50 	bl	8001948 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e160      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_RCC_OscConfig+0x26c>)
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020c2:	2001      	movs	r0, #1
 80020c4:	f000 face 	bl	8002664 <RCC_Delay>
 80020c8:	e01c      	b.n	8002104 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_RCC_OscConfig+0x274>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d0:	f7ff fc3a 	bl	8001948 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d6:	e00f      	b.n	80020f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d8:	f7ff fc36 	bl	8001948 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d908      	bls.n	80020f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e146      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	42420000 	.word	0x42420000
 80020f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f8:	4b92      	ldr	r3, [pc, #584]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1e9      	bne.n	80020d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80a6 	beq.w	800225e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002116:	4b8b      	ldr	r3, [pc, #556]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10d      	bne.n	800213e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	4b88      	ldr	r3, [pc, #544]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4a87      	ldr	r2, [pc, #540]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212c:	61d3      	str	r3, [r2, #28]
 800212e:	4b85      	ldr	r3, [pc, #532]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800213a:	2301      	movs	r3, #1
 800213c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213e:	4b82      	ldr	r3, [pc, #520]	; (8002348 <HAL_RCC_OscConfig+0x4c8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d118      	bne.n	800217c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800214a:	4b7f      	ldr	r3, [pc, #508]	; (8002348 <HAL_RCC_OscConfig+0x4c8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a7e      	ldr	r2, [pc, #504]	; (8002348 <HAL_RCC_OscConfig+0x4c8>)
 8002150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002156:	f7ff fbf7 	bl	8001948 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215e:	f7ff fbf3 	bl	8001948 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b64      	cmp	r3, #100	; 0x64
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e103      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002170:	4b75      	ldr	r3, [pc, #468]	; (8002348 <HAL_RCC_OscConfig+0x4c8>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0f0      	beq.n	800215e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x312>
 8002184:	4b6f      	ldr	r3, [pc, #444]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	4a6e      	ldr	r2, [pc, #440]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6213      	str	r3, [r2, #32]
 8002190:	e02d      	b.n	80021ee <HAL_RCC_OscConfig+0x36e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x334>
 800219a:	4b6a      	ldr	r3, [pc, #424]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4a69      	ldr	r2, [pc, #420]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	f023 0301 	bic.w	r3, r3, #1
 80021a4:	6213      	str	r3, [r2, #32]
 80021a6:	4b67      	ldr	r3, [pc, #412]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4a66      	ldr	r2, [pc, #408]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	f023 0304 	bic.w	r3, r3, #4
 80021b0:	6213      	str	r3, [r2, #32]
 80021b2:	e01c      	b.n	80021ee <HAL_RCC_OscConfig+0x36e>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b05      	cmp	r3, #5
 80021ba:	d10c      	bne.n	80021d6 <HAL_RCC_OscConfig+0x356>
 80021bc:	4b61      	ldr	r3, [pc, #388]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	4a60      	ldr	r2, [pc, #384]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	f043 0304 	orr.w	r3, r3, #4
 80021c6:	6213      	str	r3, [r2, #32]
 80021c8:	4b5e      	ldr	r3, [pc, #376]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	4a5d      	ldr	r2, [pc, #372]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	6213      	str	r3, [r2, #32]
 80021d4:	e00b      	b.n	80021ee <HAL_RCC_OscConfig+0x36e>
 80021d6:	4b5b      	ldr	r3, [pc, #364]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	4a5a      	ldr	r2, [pc, #360]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	f023 0301 	bic.w	r3, r3, #1
 80021e0:	6213      	str	r3, [r2, #32]
 80021e2:	4b58      	ldr	r3, [pc, #352]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	4a57      	ldr	r2, [pc, #348]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	f023 0304 	bic.w	r3, r3, #4
 80021ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d015      	beq.n	8002222 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f6:	f7ff fba7 	bl	8001948 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fc:	e00a      	b.n	8002214 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fe:	f7ff fba3 	bl	8001948 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	f241 3288 	movw	r2, #5000	; 0x1388
 800220c:	4293      	cmp	r3, r2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e0b1      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002214:	4b4b      	ldr	r3, [pc, #300]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0ee      	beq.n	80021fe <HAL_RCC_OscConfig+0x37e>
 8002220:	e014      	b.n	800224c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002222:	f7ff fb91 	bl	8001948 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002228:	e00a      	b.n	8002240 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222a:	f7ff fb8d 	bl	8001948 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	f241 3288 	movw	r2, #5000	; 0x1388
 8002238:	4293      	cmp	r3, r2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e09b      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002240:	4b40      	ldr	r3, [pc, #256]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1ee      	bne.n	800222a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800224c:	7dfb      	ldrb	r3, [r7, #23]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d105      	bne.n	800225e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002252:	4b3c      	ldr	r3, [pc, #240]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	4a3b      	ldr	r2, [pc, #236]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 8002258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800225c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 8087 	beq.w	8002376 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002268:	4b36      	ldr	r3, [pc, #216]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 030c 	and.w	r3, r3, #12
 8002270:	2b08      	cmp	r3, #8
 8002272:	d061      	beq.n	8002338 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	2b02      	cmp	r3, #2
 800227a:	d146      	bne.n	800230a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227c:	4b33      	ldr	r3, [pc, #204]	; (800234c <HAL_RCC_OscConfig+0x4cc>)
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7ff fb61 	bl	8001948 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228a:	f7ff fb5d 	bl	8001948 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e06d      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229c:	4b29      	ldr	r3, [pc, #164]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1f0      	bne.n	800228a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b0:	d108      	bne.n	80022c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022b2:	4b24      	ldr	r3, [pc, #144]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	4921      	ldr	r1, [pc, #132]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022c4:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a19      	ldr	r1, [r3, #32]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	430b      	orrs	r3, r1
 80022d6:	491b      	ldr	r1, [pc, #108]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022dc:	4b1b      	ldr	r3, [pc, #108]	; (800234c <HAL_RCC_OscConfig+0x4cc>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e2:	f7ff fb31 	bl	8001948 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ea:	f7ff fb2d 	bl	8001948 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e03d      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x46a>
 8002308:	e035      	b.n	8002376 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230a:	4b10      	ldr	r3, [pc, #64]	; (800234c <HAL_RCC_OscConfig+0x4cc>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7ff fb1a 	bl	8001948 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002318:	f7ff fb16 	bl	8001948 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e026      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x498>
 8002336:	e01e      	b.n	8002376 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d107      	bne.n	8002350 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e019      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
 8002344:	40021000 	.word	0x40021000
 8002348:	40007000 	.word	0x40007000
 800234c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_RCC_OscConfig+0x500>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	429a      	cmp	r2, r3
 8002362:	d106      	bne.n	8002372 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236e:	429a      	cmp	r2, r3
 8002370:	d001      	beq.n	8002376 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40021000 	.word	0x40021000

08002384 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0d0      	b.n	800253a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002398:	4b6a      	ldr	r3, [pc, #424]	; (8002544 <HAL_RCC_ClockConfig+0x1c0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d910      	bls.n	80023c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a6:	4b67      	ldr	r3, [pc, #412]	; (8002544 <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 0207 	bic.w	r2, r3, #7
 80023ae:	4965      	ldr	r1, [pc, #404]	; (8002544 <HAL_RCC_ClockConfig+0x1c0>)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b63      	ldr	r3, [pc, #396]	; (8002544 <HAL_RCC_ClockConfig+0x1c0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0b8      	b.n	800253a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d020      	beq.n	8002416 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e0:	4b59      	ldr	r3, [pc, #356]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	4a58      	ldr	r2, [pc, #352]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f8:	4b53      	ldr	r3, [pc, #332]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	4a52      	ldr	r2, [pc, #328]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002402:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002404:	4b50      	ldr	r3, [pc, #320]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	494d      	ldr	r1, [pc, #308]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	4313      	orrs	r3, r2
 8002414:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d040      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d107      	bne.n	800243a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242a:	4b47      	ldr	r3, [pc, #284]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d115      	bne.n	8002462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e07f      	b.n	800253a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d107      	bne.n	8002452 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002442:	4b41      	ldr	r3, [pc, #260]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d109      	bne.n	8002462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e073      	b.n	800253a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002452:	4b3d      	ldr	r3, [pc, #244]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e06b      	b.n	800253a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002462:	4b39      	ldr	r3, [pc, #228]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f023 0203 	bic.w	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	4936      	ldr	r1, [pc, #216]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002474:	f7ff fa68 	bl	8001948 <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247a:	e00a      	b.n	8002492 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247c:	f7ff fa64 	bl	8001948 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	f241 3288 	movw	r2, #5000	; 0x1388
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e053      	b.n	800253a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002492:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 020c 	and.w	r2, r3, #12
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d1eb      	bne.n	800247c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024a4:	4b27      	ldr	r3, [pc, #156]	; (8002544 <HAL_RCC_ClockConfig+0x1c0>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d210      	bcs.n	80024d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b24      	ldr	r3, [pc, #144]	; (8002544 <HAL_RCC_ClockConfig+0x1c0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 0207 	bic.w	r2, r3, #7
 80024ba:	4922      	ldr	r1, [pc, #136]	; (8002544 <HAL_RCC_ClockConfig+0x1c0>)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c2:	4b20      	ldr	r3, [pc, #128]	; (8002544 <HAL_RCC_ClockConfig+0x1c0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e032      	b.n	800253a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4916      	ldr	r1, [pc, #88]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024fe:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	490e      	ldr	r1, [pc, #56]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 800250e:	4313      	orrs	r3, r2
 8002510:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002512:	f000 f821 	bl	8002558 <HAL_RCC_GetSysClockFreq>
 8002516:	4602      	mov	r2, r0
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	490a      	ldr	r1, [pc, #40]	; (800254c <HAL_RCC_ClockConfig+0x1c8>)
 8002524:	5ccb      	ldrb	r3, [r1, r3]
 8002526:	fa22 f303 	lsr.w	r3, r2, r3
 800252a:	4a09      	ldr	r2, [pc, #36]	; (8002550 <HAL_RCC_ClockConfig+0x1cc>)
 800252c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_RCC_ClockConfig+0x1d0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff f9c6 	bl	80018c4 <HAL_InitTick>

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40022000 	.word	0x40022000
 8002548:	40021000 	.word	0x40021000
 800254c:	08006eec 	.word	0x08006eec
 8002550:	20000000 	.word	0x20000000
 8002554:	20000004 	.word	0x20000004

08002558 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	2300      	movs	r3, #0
 800256c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002572:	4b1e      	ldr	r3, [pc, #120]	; (80025ec <HAL_RCC_GetSysClockFreq+0x94>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b04      	cmp	r3, #4
 8002580:	d002      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x30>
 8002582:	2b08      	cmp	r3, #8
 8002584:	d003      	beq.n	800258e <HAL_RCC_GetSysClockFreq+0x36>
 8002586:	e027      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002588:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800258a:	613b      	str	r3, [r7, #16]
      break;
 800258c:	e027      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	0c9b      	lsrs	r3, r3, #18
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	4a17      	ldr	r2, [pc, #92]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002598:	5cd3      	ldrb	r3, [r2, r3]
 800259a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d010      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025a6:	4b11      	ldr	r3, [pc, #68]	; (80025ec <HAL_RCC_GetSysClockFreq+0x94>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	0c5b      	lsrs	r3, r3, #17
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	4a11      	ldr	r2, [pc, #68]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025b2:	5cd3      	ldrb	r3, [r2, r3]
 80025b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a0d      	ldr	r2, [pc, #52]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ba:	fb03 f202 	mul.w	r2, r3, r2
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	e004      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a0c      	ldr	r2, [pc, #48]	; (80025fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80025cc:	fb02 f303 	mul.w	r3, r2, r3
 80025d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	613b      	str	r3, [r7, #16]
      break;
 80025d6:	e002      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80025da:	613b      	str	r3, [r7, #16]
      break;
 80025dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025de:	693b      	ldr	r3, [r7, #16]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	371c      	adds	r7, #28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	007a1200 	.word	0x007a1200
 80025f4:	08006f04 	.word	0x08006f04
 80025f8:	08006f14 	.word	0x08006f14
 80025fc:	003d0900 	.word	0x003d0900

08002600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002604:	4b02      	ldr	r3, [pc, #8]	; (8002610 <HAL_RCC_GetHCLKFreq+0x10>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	20000000 	.word	0x20000000

08002614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002618:	f7ff fff2 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 800261c:	4602      	mov	r2, r0
 800261e:	4b05      	ldr	r3, [pc, #20]	; (8002634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	0a1b      	lsrs	r3, r3, #8
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	4903      	ldr	r1, [pc, #12]	; (8002638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800262a:	5ccb      	ldrb	r3, [r1, r3]
 800262c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002630:	4618      	mov	r0, r3
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40021000 	.word	0x40021000
 8002638:	08006efc 	.word	0x08006efc

0800263c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002640:	f7ff ffde 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8002644:	4602      	mov	r2, r0
 8002646:	4b05      	ldr	r3, [pc, #20]	; (800265c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	0adb      	lsrs	r3, r3, #11
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	4903      	ldr	r1, [pc, #12]	; (8002660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002652:	5ccb      	ldrb	r3, [r1, r3]
 8002654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002658:	4618      	mov	r0, r3
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40021000 	.word	0x40021000
 8002660:	08006efc 	.word	0x08006efc

08002664 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800266c:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <RCC_Delay+0x34>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a0a      	ldr	r2, [pc, #40]	; (800269c <RCC_Delay+0x38>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	0a5b      	lsrs	r3, r3, #9
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	fb02 f303 	mul.w	r3, r2, r3
 800267e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002680:	bf00      	nop
  }
  while (Delay --);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1e5a      	subs	r2, r3, #1
 8002686:	60fa      	str	r2, [r7, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f9      	bne.n	8002680 <RCC_Delay+0x1c>
}
 800268c:	bf00      	nop
 800268e:	bf00      	nop
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr
 8002698:	20000000 	.word	0x20000000
 800269c:	10624dd3 	.word	0x10624dd3

080026a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e041      	b.n	8002736 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d106      	bne.n	80026cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7fe ff38 	bl	800153c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3304      	adds	r3, #4
 80026dc:	4619      	mov	r1, r3
 80026de:	4610      	mov	r0, r2
 80026e0:	f000 fc6a 	bl	8002fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b01      	cmp	r3, #1
 8002752:	d001      	beq.n	8002758 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e03a      	b.n	80027ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2202      	movs	r2, #2
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a18      	ldr	r2, [pc, #96]	; (80027d8 <HAL_TIM_Base_Start_IT+0x98>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00e      	beq.n	8002798 <HAL_TIM_Base_Start_IT+0x58>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002782:	d009      	beq.n	8002798 <HAL_TIM_Base_Start_IT+0x58>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a14      	ldr	r2, [pc, #80]	; (80027dc <HAL_TIM_Base_Start_IT+0x9c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d004      	beq.n	8002798 <HAL_TIM_Base_Start_IT+0x58>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a13      	ldr	r2, [pc, #76]	; (80027e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d111      	bne.n	80027bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b06      	cmp	r3, #6
 80027a8:	d010      	beq.n	80027cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0201 	orr.w	r2, r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ba:	e007      	b.n	80027cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	40012c00 	.word	0x40012c00
 80027dc:	40000400 	.word	0x40000400
 80027e0:	40000800 	.word	0x40000800

080027e4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e041      	b.n	800287a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d106      	bne.n	8002810 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f839 	bl	8002882 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3304      	adds	r3, #4
 8002820:	4619      	mov	r1, r3
 8002822:	4610      	mov	r0, r2
 8002824:	f000 fbc8 	bl	8002fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d104      	bne.n	80028b2 <HAL_TIM_IC_Start_IT+0x1e>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	e013      	b.n	80028da <HAL_TIM_IC_Start_IT+0x46>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d104      	bne.n	80028c2 <HAL_TIM_IC_Start_IT+0x2e>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	e00b      	b.n	80028da <HAL_TIM_IC_Start_IT+0x46>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d104      	bne.n	80028d2 <HAL_TIM_IC_Start_IT+0x3e>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	e003      	b.n	80028da <HAL_TIM_IC_Start_IT+0x46>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d104      	bne.n	80028ec <HAL_TIM_IC_Start_IT+0x58>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	e013      	b.n	8002914 <HAL_TIM_IC_Start_IT+0x80>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d104      	bne.n	80028fc <HAL_TIM_IC_Start_IT+0x68>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	e00b      	b.n	8002914 <HAL_TIM_IC_Start_IT+0x80>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d104      	bne.n	800290c <HAL_TIM_IC_Start_IT+0x78>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002908:	b2db      	uxtb	r3, r3
 800290a:	e003      	b.n	8002914 <HAL_TIM_IC_Start_IT+0x80>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002912:	b2db      	uxtb	r3, r3
 8002914:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002916:	7bbb      	ldrb	r3, [r7, #14]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d102      	bne.n	8002922 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800291c:	7b7b      	ldrb	r3, [r7, #13]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d001      	beq.n	8002926 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e0b8      	b.n	8002a98 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d104      	bne.n	8002936 <HAL_TIM_IC_Start_IT+0xa2>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002934:	e013      	b.n	800295e <HAL_TIM_IC_Start_IT+0xca>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b04      	cmp	r3, #4
 800293a:	d104      	bne.n	8002946 <HAL_TIM_IC_Start_IT+0xb2>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002944:	e00b      	b.n	800295e <HAL_TIM_IC_Start_IT+0xca>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b08      	cmp	r3, #8
 800294a:	d104      	bne.n	8002956 <HAL_TIM_IC_Start_IT+0xc2>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002954:	e003      	b.n	800295e <HAL_TIM_IC_Start_IT+0xca>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2202      	movs	r2, #2
 800295a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d104      	bne.n	800296e <HAL_TIM_IC_Start_IT+0xda>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800296c:	e013      	b.n	8002996 <HAL_TIM_IC_Start_IT+0x102>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b04      	cmp	r3, #4
 8002972:	d104      	bne.n	800297e <HAL_TIM_IC_Start_IT+0xea>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800297c:	e00b      	b.n	8002996 <HAL_TIM_IC_Start_IT+0x102>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b08      	cmp	r3, #8
 8002982:	d104      	bne.n	800298e <HAL_TIM_IC_Start_IT+0xfa>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800298c:	e003      	b.n	8002996 <HAL_TIM_IC_Start_IT+0x102>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2202      	movs	r2, #2
 8002992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b0c      	cmp	r3, #12
 800299a:	d841      	bhi.n	8002a20 <HAL_TIM_IC_Start_IT+0x18c>
 800299c:	a201      	add	r2, pc, #4	; (adr r2, 80029a4 <HAL_TIM_IC_Start_IT+0x110>)
 800299e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a2:	bf00      	nop
 80029a4:	080029d9 	.word	0x080029d9
 80029a8:	08002a21 	.word	0x08002a21
 80029ac:	08002a21 	.word	0x08002a21
 80029b0:	08002a21 	.word	0x08002a21
 80029b4:	080029eb 	.word	0x080029eb
 80029b8:	08002a21 	.word	0x08002a21
 80029bc:	08002a21 	.word	0x08002a21
 80029c0:	08002a21 	.word	0x08002a21
 80029c4:	080029fd 	.word	0x080029fd
 80029c8:	08002a21 	.word	0x08002a21
 80029cc:	08002a21 	.word	0x08002a21
 80029d0:	08002a21 	.word	0x08002a21
 80029d4:	08002a0f 	.word	0x08002a0f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0202 	orr.w	r2, r2, #2
 80029e6:	60da      	str	r2, [r3, #12]
      break;
 80029e8:	e01d      	b.n	8002a26 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0204 	orr.w	r2, r2, #4
 80029f8:	60da      	str	r2, [r3, #12]
      break;
 80029fa:	e014      	b.n	8002a26 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0208 	orr.w	r2, r2, #8
 8002a0a:	60da      	str	r2, [r3, #12]
      break;
 8002a0c:	e00b      	b.n	8002a26 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0210 	orr.w	r2, r2, #16
 8002a1c:	60da      	str	r2, [r3, #12]
      break;
 8002a1e:	e002      	b.n	8002a26 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
      break;
 8002a24:	bf00      	nop
  }

  if (status == HAL_OK)
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d134      	bne.n	8002a96 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2201      	movs	r2, #1
 8002a32:	6839      	ldr	r1, [r7, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fcc4 	bl	80033c2 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a18      	ldr	r2, [pc, #96]	; (8002aa0 <HAL_TIM_IC_Start_IT+0x20c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d00e      	beq.n	8002a62 <HAL_TIM_IC_Start_IT+0x1ce>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4c:	d009      	beq.n	8002a62 <HAL_TIM_IC_Start_IT+0x1ce>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <HAL_TIM_IC_Start_IT+0x210>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d004      	beq.n	8002a62 <HAL_TIM_IC_Start_IT+0x1ce>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a12      	ldr	r2, [pc, #72]	; (8002aa8 <HAL_TIM_IC_Start_IT+0x214>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d111      	bne.n	8002a86 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b06      	cmp	r3, #6
 8002a72:	d010      	beq.n	8002a96 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a84:	e007      	b.n	8002a96 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 0201 	orr.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40012c00 	.word	0x40012c00
 8002aa4:	40000400 	.word	0x40000400
 8002aa8:	40000800 	.word	0x40000800

08002aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d122      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d11b      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0202 	mvn.w	r2, #2
 8002ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7fe fc78 	bl	80013e4 <HAL_TIM_IC_CaptureCallback>
 8002af4:	e005      	b.n	8002b02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fa43 	bl	8002f82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 fa49 	bl	8002f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d122      	bne.n	8002b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d11b      	bne.n	8002b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0204 	mvn.w	r2, #4
 8002b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2202      	movs	r2, #2
 8002b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fe fc4e 	bl	80013e4 <HAL_TIM_IC_CaptureCallback>
 8002b48:	e005      	b.n	8002b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fa19 	bl	8002f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 fa1f 	bl	8002f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d122      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d11b      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0208 	mvn.w	r2, #8
 8002b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2204      	movs	r2, #4
 8002b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7fe fc24 	bl	80013e4 <HAL_TIM_IC_CaptureCallback>
 8002b9c:	e005      	b.n	8002baa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f9ef 	bl	8002f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f9f5 	bl	8002f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b10      	cmp	r3, #16
 8002bbc:	d122      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b10      	cmp	r3, #16
 8002bca:	d11b      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0210 	mvn.w	r2, #16
 8002bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2208      	movs	r2, #8
 8002bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fe fbfa 	bl	80013e4 <HAL_TIM_IC_CaptureCallback>
 8002bf0:	e005      	b.n	8002bfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f9c5 	bl	8002f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f9cb 	bl	8002f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d10e      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d107      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0201 	mvn.w	r2, #1
 8002c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7fe fc4c 	bl	80014c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3a:	2b80      	cmp	r3, #128	; 0x80
 8002c3c:	d10e      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c48:	2b80      	cmp	r3, #128	; 0x80
 8002c4a:	d107      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fc3f 	bl	80034da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c66:	2b40      	cmp	r3, #64	; 0x40
 8002c68:	d10e      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c74:	2b40      	cmp	r3, #64	; 0x40
 8002c76:	d107      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f98f 	bl	8002fa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d10e      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d107      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f06f 0220 	mvn.w	r2, #32
 8002cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fc0a 	bl	80034c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_TIM_IC_ConfigChannel+0x1e>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e088      	b.n	8002dec <HAL_TIM_IC_ConfigChannel+0x130>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d11b      	bne.n	8002d20 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002cf8:	f000 f9c0 	bl	800307c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 020c 	bic.w	r2, r2, #12
 8002d0a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6999      	ldr	r1, [r3, #24]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	619a      	str	r2, [r3, #24]
 8002d1e:	e060      	b.n	8002de2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d11c      	bne.n	8002d60 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002d36:	f000 fa29 	bl	800318c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699a      	ldr	r2, [r3, #24]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d48:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6999      	ldr	r1, [r3, #24]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	021a      	lsls	r2, r3, #8
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	619a      	str	r2, [r3, #24]
 8002d5e:	e040      	b.n	8002de2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d11b      	bne.n	8002d9e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002d76:	f000 fa74 	bl	8003262 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	69da      	ldr	r2, [r3, #28]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 020c 	bic.w	r2, r2, #12
 8002d88:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69d9      	ldr	r1, [r3, #28]
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	61da      	str	r2, [r3, #28]
 8002d9c:	e021      	b.n	8002de2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b0c      	cmp	r3, #12
 8002da2:	d11c      	bne.n	8002dde <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002db4:	f000 fa90 	bl	80032d8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69da      	ldr	r2, [r3, #28]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002dc6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	69d9      	ldr	r1, [r3, #28]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	021a      	lsls	r2, r3, #8
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	61da      	str	r2, [r3, #28]
 8002ddc:	e001      	b.n	8002de2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_TIM_ConfigClockSource+0x1c>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e0b4      	b.n	8002f7a <HAL_TIM_ConfigClockSource+0x186>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e48:	d03e      	beq.n	8002ec8 <HAL_TIM_ConfigClockSource+0xd4>
 8002e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e4e:	f200 8087 	bhi.w	8002f60 <HAL_TIM_ConfigClockSource+0x16c>
 8002e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e56:	f000 8086 	beq.w	8002f66 <HAL_TIM_ConfigClockSource+0x172>
 8002e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e5e:	d87f      	bhi.n	8002f60 <HAL_TIM_ConfigClockSource+0x16c>
 8002e60:	2b70      	cmp	r3, #112	; 0x70
 8002e62:	d01a      	beq.n	8002e9a <HAL_TIM_ConfigClockSource+0xa6>
 8002e64:	2b70      	cmp	r3, #112	; 0x70
 8002e66:	d87b      	bhi.n	8002f60 <HAL_TIM_ConfigClockSource+0x16c>
 8002e68:	2b60      	cmp	r3, #96	; 0x60
 8002e6a:	d050      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0x11a>
 8002e6c:	2b60      	cmp	r3, #96	; 0x60
 8002e6e:	d877      	bhi.n	8002f60 <HAL_TIM_ConfigClockSource+0x16c>
 8002e70:	2b50      	cmp	r3, #80	; 0x50
 8002e72:	d03c      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0xfa>
 8002e74:	2b50      	cmp	r3, #80	; 0x50
 8002e76:	d873      	bhi.n	8002f60 <HAL_TIM_ConfigClockSource+0x16c>
 8002e78:	2b40      	cmp	r3, #64	; 0x40
 8002e7a:	d058      	beq.n	8002f2e <HAL_TIM_ConfigClockSource+0x13a>
 8002e7c:	2b40      	cmp	r3, #64	; 0x40
 8002e7e:	d86f      	bhi.n	8002f60 <HAL_TIM_ConfigClockSource+0x16c>
 8002e80:	2b30      	cmp	r3, #48	; 0x30
 8002e82:	d064      	beq.n	8002f4e <HAL_TIM_ConfigClockSource+0x15a>
 8002e84:	2b30      	cmp	r3, #48	; 0x30
 8002e86:	d86b      	bhi.n	8002f60 <HAL_TIM_ConfigClockSource+0x16c>
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d060      	beq.n	8002f4e <HAL_TIM_ConfigClockSource+0x15a>
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d867      	bhi.n	8002f60 <HAL_TIM_ConfigClockSource+0x16c>
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d05c      	beq.n	8002f4e <HAL_TIM_ConfigClockSource+0x15a>
 8002e94:	2b10      	cmp	r3, #16
 8002e96:	d05a      	beq.n	8002f4e <HAL_TIM_ConfigClockSource+0x15a>
 8002e98:	e062      	b.n	8002f60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002eaa:	f000 fa6b 	bl	8003384 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ebc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	609a      	str	r2, [r3, #8]
      break;
 8002ec6:	e04f      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ed8:	f000 fa54 	bl	8003384 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eea:	609a      	str	r2, [r3, #8]
      break;
 8002eec:	e03c      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002efa:	461a      	mov	r2, r3
 8002efc:	f000 f918 	bl	8003130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2150      	movs	r1, #80	; 0x50
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 fa22 	bl	8003350 <TIM_ITRx_SetConfig>
      break;
 8002f0c:	e02c      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	f000 f972 	bl	8003204 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2160      	movs	r1, #96	; 0x60
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fa12 	bl	8003350 <TIM_ITRx_SetConfig>
      break;
 8002f2c:	e01c      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f000 f8f8 	bl	8003130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2140      	movs	r1, #64	; 0x40
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fa02 	bl	8003350 <TIM_ITRx_SetConfig>
      break;
 8002f4c:	e00c      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4619      	mov	r1, r3
 8002f58:	4610      	mov	r0, r2
 8002f5a:	f000 f9f9 	bl	8003350 <TIM_ITRx_SetConfig>
      break;
 8002f5e:	e003      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
      break;
 8002f64:	e000      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr

08002fa6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a29      	ldr	r2, [pc, #164]	; (8003070 <TIM_Base_SetConfig+0xb8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00b      	beq.n	8002fe8 <TIM_Base_SetConfig+0x30>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd6:	d007      	beq.n	8002fe8 <TIM_Base_SetConfig+0x30>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a26      	ldr	r2, [pc, #152]	; (8003074 <TIM_Base_SetConfig+0xbc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d003      	beq.n	8002fe8 <TIM_Base_SetConfig+0x30>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a25      	ldr	r2, [pc, #148]	; (8003078 <TIM_Base_SetConfig+0xc0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d108      	bne.n	8002ffa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a1c      	ldr	r2, [pc, #112]	; (8003070 <TIM_Base_SetConfig+0xb8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00b      	beq.n	800301a <TIM_Base_SetConfig+0x62>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003008:	d007      	beq.n	800301a <TIM_Base_SetConfig+0x62>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a19      	ldr	r2, [pc, #100]	; (8003074 <TIM_Base_SetConfig+0xbc>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d003      	beq.n	800301a <TIM_Base_SetConfig+0x62>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a18      	ldr	r2, [pc, #96]	; (8003078 <TIM_Base_SetConfig+0xc0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d108      	bne.n	800302c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4313      	orrs	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a07      	ldr	r2, [pc, #28]	; (8003070 <TIM_Base_SetConfig+0xb8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d103      	bne.n	8003060 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	615a      	str	r2, [r3, #20]
}
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr
 8003070:	40012c00 	.word	0x40012c00
 8003074:	40000400 	.word	0x40000400
 8003078:	40000800 	.word	0x40000800

0800307c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	f023 0201 	bic.w	r2, r3, #1
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4a1f      	ldr	r2, [pc, #124]	; (8003124 <TIM_TI1_SetConfig+0xa8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d00b      	beq.n	80030c2 <TIM_TI1_SetConfig+0x46>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b0:	d007      	beq.n	80030c2 <TIM_TI1_SetConfig+0x46>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4a1c      	ldr	r2, [pc, #112]	; (8003128 <TIM_TI1_SetConfig+0xac>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d003      	beq.n	80030c2 <TIM_TI1_SetConfig+0x46>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4a1b      	ldr	r2, [pc, #108]	; (800312c <TIM_TI1_SetConfig+0xb0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d101      	bne.n	80030c6 <TIM_TI1_SetConfig+0x4a>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <TIM_TI1_SetConfig+0x4c>
 80030c6:	2300      	movs	r3, #0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f023 0303 	bic.w	r3, r3, #3
 80030d2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4313      	orrs	r3, r2
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	e003      	b.n	80030e6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f023 030a 	bic.w	r3, r3, #10
 8003100:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f003 030a 	and.w	r3, r3, #10
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	621a      	str	r2, [r3, #32]
}
 800311a:	bf00      	nop
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr
 8003124:	40012c00 	.word	0x40012c00
 8003128:	40000400 	.word	0x40000400
 800312c:	40000800 	.word	0x40000800

08003130 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003130:	b480      	push	{r7}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	f023 0201 	bic.w	r2, r3, #1
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800315a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f023 030a 	bic.w	r3, r3, #10
 800316c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4313      	orrs	r3, r2
 8003174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	621a      	str	r2, [r3, #32]
}
 8003182:	bf00      	nop
 8003184:	371c      	adds	r7, #28
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f023 0210 	bic.w	r2, r3, #16
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	021b      	lsls	r3, r3, #8
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	031b      	lsls	r3, r3, #12
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031de:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	621a      	str	r2, [r3, #32]
}
 80031fa:	bf00      	nop
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr

08003204 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f023 0210 	bic.w	r2, r3, #16
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800322e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	031b      	lsls	r3, r3, #12
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003240:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	621a      	str	r2, [r3, #32]
}
 8003258:	bf00      	nop
 800325a:	371c      	adds	r7, #28
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr

08003262 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003262:	b480      	push	{r7}
 8003264:	b087      	sub	sp, #28
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	607a      	str	r2, [r7, #4]
 800326e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f023 0303 	bic.w	r3, r3, #3
 800328e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4313      	orrs	r3, r2
 8003296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800329e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032b2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	021b      	lsls	r3, r3, #8
 80032b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	621a      	str	r2, [r3, #32]
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003304:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	021b      	lsls	r3, r3, #8
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003316:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	031b      	lsls	r3, r3, #12
 800331c:	b29b      	uxth	r3, r3
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800332a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	031b      	lsls	r3, r3, #12
 8003330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	4313      	orrs	r3, r2
 8003338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	621a      	str	r2, [r3, #32]
}
 8003346:	bf00      	nop
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003366:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4313      	orrs	r3, r2
 800336e:	f043 0307 	orr.w	r3, r3, #7
 8003372:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	609a      	str	r2, [r3, #8]
}
 800337a:	bf00      	nop
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr

08003384 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800339e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	021a      	lsls	r2, r3, #8
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	609a      	str	r2, [r3, #8]
}
 80033b8:	bf00      	nop
 80033ba:	371c      	adds	r7, #28
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr

080033c2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b087      	sub	sp, #28
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	2201      	movs	r2, #1
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a1a      	ldr	r2, [r3, #32]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	43db      	mvns	r3, r3
 80033e4:	401a      	ands	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a1a      	ldr	r2, [r3, #32]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f003 031f 	and.w	r3, r3, #31
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	fa01 f303 	lsl.w	r3, r1, r3
 80033fa:	431a      	orrs	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	621a      	str	r2, [r3, #32]
}
 8003400:	bf00      	nop
 8003402:	371c      	adds	r7, #28
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr
	...

0800340c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003420:	2302      	movs	r3, #2
 8003422:	e046      	b.n	80034b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a16      	ldr	r2, [pc, #88]	; (80034bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00e      	beq.n	8003486 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003470:	d009      	beq.n	8003486 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a12      	ldr	r2, [pc, #72]	; (80034c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d004      	beq.n	8003486 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a10      	ldr	r2, [pc, #64]	; (80034c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d10c      	bne.n	80034a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800348c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	4313      	orrs	r3, r2
 8003496:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr
 80034bc:	40012c00 	.word	0x40012c00
 80034c0:	40000400 	.word	0x40000400
 80034c4:	40000800 	.word	0x40000800

080034c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr

080034da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr

080034ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e042      	b.n	8003584 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fe f856 	bl	80015c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2224      	movs	r2, #36	; 0x24
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800352e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f91d 	bl	8003770 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003544:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003554:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003564:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	; 0x28
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	4613      	mov	r3, r2
 800359a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b20      	cmp	r3, #32
 80035aa:	d16d      	bne.n	8003688 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_UART_Transmit+0x2c>
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e066      	b.n	800368a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2221      	movs	r2, #33	; 0x21
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035ca:	f7fe f9bd 	bl	8001948 <HAL_GetTick>
 80035ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	88fa      	ldrh	r2, [r7, #6]
 80035d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	88fa      	ldrh	r2, [r7, #6]
 80035da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e4:	d108      	bne.n	80035f8 <HAL_UART_Transmit+0x6c>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d104      	bne.n	80035f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	61bb      	str	r3, [r7, #24]
 80035f6:	e003      	b.n	8003600 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003600:	e02a      	b.n	8003658 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2200      	movs	r2, #0
 800360a:	2180      	movs	r1, #128	; 0x80
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 f840 	bl	8003692 <UART_WaitOnFlagUntilTimeout>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e036      	b.n	800368a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10b      	bne.n	800363a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003630:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	3302      	adds	r3, #2
 8003636:	61bb      	str	r3, [r7, #24]
 8003638:	e007      	b.n	800364a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	781a      	ldrb	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	3301      	adds	r3, #1
 8003648:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1cf      	bne.n	8003602 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2200      	movs	r2, #0
 800366a:	2140      	movs	r1, #64	; 0x40
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 f810 	bl	8003692 <UART_WaitOnFlagUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e006      	b.n	800368a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	e000      	b.n	800368a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003688:	2302      	movs	r3, #2
  }
}
 800368a:	4618      	mov	r0, r3
 800368c:	3720      	adds	r7, #32
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b090      	sub	sp, #64	; 0x40
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	603b      	str	r3, [r7, #0]
 800369e:	4613      	mov	r3, r2
 80036a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a2:	e050      	b.n	8003746 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036aa:	d04c      	beq.n	8003746 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d007      	beq.n	80036c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80036b2:	f7fe f949 	bl	8001948 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036be:	429a      	cmp	r2, r3
 80036c0:	d241      	bcs.n	8003746 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	330c      	adds	r3, #12
 80036c8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036cc:	e853 3f00 	ldrex	r3, [r3]
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	330c      	adds	r3, #12
 80036e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036e2:	637a      	str	r2, [r7, #52]	; 0x34
 80036e4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036ea:	e841 2300 	strex	r3, r2, [r1]
 80036ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1e5      	bne.n	80036c2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	3314      	adds	r3, #20
 80036fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	e853 3f00 	ldrex	r3, [r3]
 8003704:	613b      	str	r3, [r7, #16]
   return(result);
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f023 0301 	bic.w	r3, r3, #1
 800370c:	63bb      	str	r3, [r7, #56]	; 0x38
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3314      	adds	r3, #20
 8003714:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003716:	623a      	str	r2, [r7, #32]
 8003718:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371a:	69f9      	ldr	r1, [r7, #28]
 800371c:	6a3a      	ldr	r2, [r7, #32]
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	61bb      	str	r3, [r7, #24]
   return(result);
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e5      	bne.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2220      	movs	r2, #32
 800372e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e00f      	b.n	8003766 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4013      	ands	r3, r2
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	429a      	cmp	r2, r3
 8003754:	bf0c      	ite	eq
 8003756:	2301      	moveq	r3, #1
 8003758:	2300      	movne	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	461a      	mov	r2, r3
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	429a      	cmp	r2, r3
 8003762:	d09f      	beq.n	80036a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3740      	adds	r7, #64	; 0x40
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80037aa:	f023 030c 	bic.w	r3, r3, #12
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6812      	ldr	r2, [r2, #0]
 80037b2:	68b9      	ldr	r1, [r7, #8]
 80037b4:	430b      	orrs	r3, r1
 80037b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a2c      	ldr	r2, [pc, #176]	; (8003884 <UART_SetConfig+0x114>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d103      	bne.n	80037e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037d8:	f7fe ff30 	bl	800263c <HAL_RCC_GetPCLK2Freq>
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	e002      	b.n	80037e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037e0:	f7fe ff18 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
 80037e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	009a      	lsls	r2, r3, #2
 80037f0:	441a      	add	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fc:	4a22      	ldr	r2, [pc, #136]	; (8003888 <UART_SetConfig+0x118>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	0119      	lsls	r1, r3, #4
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	009a      	lsls	r2, r3, #2
 8003810:	441a      	add	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	fbb2 f2f3 	udiv	r2, r2, r3
 800381c:	4b1a      	ldr	r3, [pc, #104]	; (8003888 <UART_SetConfig+0x118>)
 800381e:	fba3 0302 	umull	r0, r3, r3, r2
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	2064      	movs	r0, #100	; 0x64
 8003826:	fb00 f303 	mul.w	r3, r0, r3
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	3332      	adds	r3, #50	; 0x32
 8003830:	4a15      	ldr	r2, [pc, #84]	; (8003888 <UART_SetConfig+0x118>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800383c:	4419      	add	r1, r3
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	009a      	lsls	r2, r3, #2
 8003848:	441a      	add	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	fbb2 f2f3 	udiv	r2, r2, r3
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <UART_SetConfig+0x118>)
 8003856:	fba3 0302 	umull	r0, r3, r3, r2
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	2064      	movs	r0, #100	; 0x64
 800385e:	fb00 f303 	mul.w	r3, r0, r3
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	3332      	adds	r3, #50	; 0x32
 8003868:	4a07      	ldr	r2, [pc, #28]	; (8003888 <UART_SetConfig+0x118>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	f003 020f 	and.w	r2, r3, #15
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	440a      	add	r2, r1
 800387a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800387c:	bf00      	nop
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40013800 	.word	0x40013800
 8003888:	51eb851f 	.word	0x51eb851f

0800388c <__cvt>:
 800388c:	2b00      	cmp	r3, #0
 800388e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003892:	461f      	mov	r7, r3
 8003894:	bfbb      	ittet	lt
 8003896:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800389a:	461f      	movlt	r7, r3
 800389c:	2300      	movge	r3, #0
 800389e:	232d      	movlt	r3, #45	; 0x2d
 80038a0:	b088      	sub	sp, #32
 80038a2:	4614      	mov	r4, r2
 80038a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80038a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80038a8:	7013      	strb	r3, [r2, #0]
 80038aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80038ac:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80038b0:	f023 0820 	bic.w	r8, r3, #32
 80038b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80038b8:	d005      	beq.n	80038c6 <__cvt+0x3a>
 80038ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80038be:	d100      	bne.n	80038c2 <__cvt+0x36>
 80038c0:	3501      	adds	r5, #1
 80038c2:	2302      	movs	r3, #2
 80038c4:	e000      	b.n	80038c8 <__cvt+0x3c>
 80038c6:	2303      	movs	r3, #3
 80038c8:	aa07      	add	r2, sp, #28
 80038ca:	9204      	str	r2, [sp, #16]
 80038cc:	aa06      	add	r2, sp, #24
 80038ce:	e9cd a202 	strd	sl, r2, [sp, #8]
 80038d2:	e9cd 3500 	strd	r3, r5, [sp]
 80038d6:	4622      	mov	r2, r4
 80038d8:	463b      	mov	r3, r7
 80038da:	f000 fe61 	bl	80045a0 <_dtoa_r>
 80038de:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80038e2:	4606      	mov	r6, r0
 80038e4:	d102      	bne.n	80038ec <__cvt+0x60>
 80038e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80038e8:	07db      	lsls	r3, r3, #31
 80038ea:	d522      	bpl.n	8003932 <__cvt+0xa6>
 80038ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80038f0:	eb06 0905 	add.w	r9, r6, r5
 80038f4:	d110      	bne.n	8003918 <__cvt+0x8c>
 80038f6:	7833      	ldrb	r3, [r6, #0]
 80038f8:	2b30      	cmp	r3, #48	; 0x30
 80038fa:	d10a      	bne.n	8003912 <__cvt+0x86>
 80038fc:	2200      	movs	r2, #0
 80038fe:	2300      	movs	r3, #0
 8003900:	4620      	mov	r0, r4
 8003902:	4639      	mov	r1, r7
 8003904:	f7fd f850 	bl	80009a8 <__aeabi_dcmpeq>
 8003908:	b918      	cbnz	r0, 8003912 <__cvt+0x86>
 800390a:	f1c5 0501 	rsb	r5, r5, #1
 800390e:	f8ca 5000 	str.w	r5, [sl]
 8003912:	f8da 3000 	ldr.w	r3, [sl]
 8003916:	4499      	add	r9, r3
 8003918:	2200      	movs	r2, #0
 800391a:	2300      	movs	r3, #0
 800391c:	4620      	mov	r0, r4
 800391e:	4639      	mov	r1, r7
 8003920:	f7fd f842 	bl	80009a8 <__aeabi_dcmpeq>
 8003924:	b108      	cbz	r0, 800392a <__cvt+0x9e>
 8003926:	f8cd 901c 	str.w	r9, [sp, #28]
 800392a:	2230      	movs	r2, #48	; 0x30
 800392c:	9b07      	ldr	r3, [sp, #28]
 800392e:	454b      	cmp	r3, r9
 8003930:	d307      	bcc.n	8003942 <__cvt+0xb6>
 8003932:	4630      	mov	r0, r6
 8003934:	9b07      	ldr	r3, [sp, #28]
 8003936:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003938:	1b9b      	subs	r3, r3, r6
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	b008      	add	sp, #32
 800393e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003942:	1c59      	adds	r1, r3, #1
 8003944:	9107      	str	r1, [sp, #28]
 8003946:	701a      	strb	r2, [r3, #0]
 8003948:	e7f0      	b.n	800392c <__cvt+0xa0>

0800394a <__exponent>:
 800394a:	4603      	mov	r3, r0
 800394c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800394e:	2900      	cmp	r1, #0
 8003950:	f803 2b02 	strb.w	r2, [r3], #2
 8003954:	bfb6      	itet	lt
 8003956:	222d      	movlt	r2, #45	; 0x2d
 8003958:	222b      	movge	r2, #43	; 0x2b
 800395a:	4249      	neglt	r1, r1
 800395c:	2909      	cmp	r1, #9
 800395e:	7042      	strb	r2, [r0, #1]
 8003960:	dd2a      	ble.n	80039b8 <__exponent+0x6e>
 8003962:	f10d 0207 	add.w	r2, sp, #7
 8003966:	4617      	mov	r7, r2
 8003968:	260a      	movs	r6, #10
 800396a:	fb91 f5f6 	sdiv	r5, r1, r6
 800396e:	4694      	mov	ip, r2
 8003970:	fb06 1415 	mls	r4, r6, r5, r1
 8003974:	3430      	adds	r4, #48	; 0x30
 8003976:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800397a:	460c      	mov	r4, r1
 800397c:	2c63      	cmp	r4, #99	; 0x63
 800397e:	4629      	mov	r1, r5
 8003980:	f102 32ff 	add.w	r2, r2, #4294967295
 8003984:	dcf1      	bgt.n	800396a <__exponent+0x20>
 8003986:	3130      	adds	r1, #48	; 0x30
 8003988:	f1ac 0402 	sub.w	r4, ip, #2
 800398c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003990:	4622      	mov	r2, r4
 8003992:	1c41      	adds	r1, r0, #1
 8003994:	42ba      	cmp	r2, r7
 8003996:	d30a      	bcc.n	80039ae <__exponent+0x64>
 8003998:	f10d 0209 	add.w	r2, sp, #9
 800399c:	eba2 020c 	sub.w	r2, r2, ip
 80039a0:	42bc      	cmp	r4, r7
 80039a2:	bf88      	it	hi
 80039a4:	2200      	movhi	r2, #0
 80039a6:	4413      	add	r3, r2
 80039a8:	1a18      	subs	r0, r3, r0
 80039aa:	b003      	add	sp, #12
 80039ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039ae:	f812 5b01 	ldrb.w	r5, [r2], #1
 80039b2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80039b6:	e7ed      	b.n	8003994 <__exponent+0x4a>
 80039b8:	2330      	movs	r3, #48	; 0x30
 80039ba:	3130      	adds	r1, #48	; 0x30
 80039bc:	7083      	strb	r3, [r0, #2]
 80039be:	70c1      	strb	r1, [r0, #3]
 80039c0:	1d03      	adds	r3, r0, #4
 80039c2:	e7f1      	b.n	80039a8 <__exponent+0x5e>

080039c4 <_printf_float>:
 80039c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039c8:	b091      	sub	sp, #68	; 0x44
 80039ca:	460c      	mov	r4, r1
 80039cc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80039d0:	4616      	mov	r6, r2
 80039d2:	461f      	mov	r7, r3
 80039d4:	4605      	mov	r5, r0
 80039d6:	f000 fcd3 	bl	8004380 <_localeconv_r>
 80039da:	6803      	ldr	r3, [r0, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	9309      	str	r3, [sp, #36]	; 0x24
 80039e0:	f7fc fbb6 	bl	8000150 <strlen>
 80039e4:	2300      	movs	r3, #0
 80039e6:	930e      	str	r3, [sp, #56]	; 0x38
 80039e8:	f8d8 3000 	ldr.w	r3, [r8]
 80039ec:	900a      	str	r0, [sp, #40]	; 0x28
 80039ee:	3307      	adds	r3, #7
 80039f0:	f023 0307 	bic.w	r3, r3, #7
 80039f4:	f103 0208 	add.w	r2, r3, #8
 80039f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80039fc:	f8d4 b000 	ldr.w	fp, [r4]
 8003a00:	f8c8 2000 	str.w	r2, [r8]
 8003a04:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003a08:	4652      	mov	r2, sl
 8003a0a:	4643      	mov	r3, r8
 8003a0c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003a10:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003a14:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a16:	f04f 32ff 	mov.w	r2, #4294967295
 8003a1a:	4650      	mov	r0, sl
 8003a1c:	4b9c      	ldr	r3, [pc, #624]	; (8003c90 <_printf_float+0x2cc>)
 8003a1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a20:	f7fc fff4 	bl	8000a0c <__aeabi_dcmpun>
 8003a24:	bb70      	cbnz	r0, 8003a84 <_printf_float+0xc0>
 8003a26:	f04f 32ff 	mov.w	r2, #4294967295
 8003a2a:	4650      	mov	r0, sl
 8003a2c:	4b98      	ldr	r3, [pc, #608]	; (8003c90 <_printf_float+0x2cc>)
 8003a2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a30:	f7fc ffce 	bl	80009d0 <__aeabi_dcmple>
 8003a34:	bb30      	cbnz	r0, 8003a84 <_printf_float+0xc0>
 8003a36:	2200      	movs	r2, #0
 8003a38:	2300      	movs	r3, #0
 8003a3a:	4650      	mov	r0, sl
 8003a3c:	4641      	mov	r1, r8
 8003a3e:	f7fc ffbd 	bl	80009bc <__aeabi_dcmplt>
 8003a42:	b110      	cbz	r0, 8003a4a <_printf_float+0x86>
 8003a44:	232d      	movs	r3, #45	; 0x2d
 8003a46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a4a:	4a92      	ldr	r2, [pc, #584]	; (8003c94 <_printf_float+0x2d0>)
 8003a4c:	4b92      	ldr	r3, [pc, #584]	; (8003c98 <_printf_float+0x2d4>)
 8003a4e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003a52:	bf94      	ite	ls
 8003a54:	4690      	movls	r8, r2
 8003a56:	4698      	movhi	r8, r3
 8003a58:	2303      	movs	r3, #3
 8003a5a:	f04f 0a00 	mov.w	sl, #0
 8003a5e:	6123      	str	r3, [r4, #16]
 8003a60:	f02b 0304 	bic.w	r3, fp, #4
 8003a64:	6023      	str	r3, [r4, #0]
 8003a66:	4633      	mov	r3, r6
 8003a68:	4621      	mov	r1, r4
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	9700      	str	r7, [sp, #0]
 8003a6e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003a70:	f000 f9d6 	bl	8003e20 <_printf_common>
 8003a74:	3001      	adds	r0, #1
 8003a76:	f040 8090 	bne.w	8003b9a <_printf_float+0x1d6>
 8003a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7e:	b011      	add	sp, #68	; 0x44
 8003a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a84:	4652      	mov	r2, sl
 8003a86:	4643      	mov	r3, r8
 8003a88:	4650      	mov	r0, sl
 8003a8a:	4641      	mov	r1, r8
 8003a8c:	f7fc ffbe 	bl	8000a0c <__aeabi_dcmpun>
 8003a90:	b148      	cbz	r0, 8003aa6 <_printf_float+0xe2>
 8003a92:	f1b8 0f00 	cmp.w	r8, #0
 8003a96:	bfb8      	it	lt
 8003a98:	232d      	movlt	r3, #45	; 0x2d
 8003a9a:	4a80      	ldr	r2, [pc, #512]	; (8003c9c <_printf_float+0x2d8>)
 8003a9c:	bfb8      	it	lt
 8003a9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003aa2:	4b7f      	ldr	r3, [pc, #508]	; (8003ca0 <_printf_float+0x2dc>)
 8003aa4:	e7d3      	b.n	8003a4e <_printf_float+0x8a>
 8003aa6:	6863      	ldr	r3, [r4, #4]
 8003aa8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	d142      	bne.n	8003b36 <_printf_float+0x172>
 8003ab0:	2306      	movs	r3, #6
 8003ab2:	6063      	str	r3, [r4, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	9206      	str	r2, [sp, #24]
 8003ab8:	aa0e      	add	r2, sp, #56	; 0x38
 8003aba:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003abe:	aa0d      	add	r2, sp, #52	; 0x34
 8003ac0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003ac4:	9203      	str	r2, [sp, #12]
 8003ac6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003aca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003ace:	6023      	str	r3, [r4, #0]
 8003ad0:	6863      	ldr	r3, [r4, #4]
 8003ad2:	4652      	mov	r2, sl
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	4628      	mov	r0, r5
 8003ad8:	4643      	mov	r3, r8
 8003ada:	910b      	str	r1, [sp, #44]	; 0x2c
 8003adc:	f7ff fed6 	bl	800388c <__cvt>
 8003ae0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ae2:	4680      	mov	r8, r0
 8003ae4:	2947      	cmp	r1, #71	; 0x47
 8003ae6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003ae8:	d108      	bne.n	8003afc <_printf_float+0x138>
 8003aea:	1cc8      	adds	r0, r1, #3
 8003aec:	db02      	blt.n	8003af4 <_printf_float+0x130>
 8003aee:	6863      	ldr	r3, [r4, #4]
 8003af0:	4299      	cmp	r1, r3
 8003af2:	dd40      	ble.n	8003b76 <_printf_float+0x1b2>
 8003af4:	f1a9 0902 	sub.w	r9, r9, #2
 8003af8:	fa5f f989 	uxtb.w	r9, r9
 8003afc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003b00:	d81f      	bhi.n	8003b42 <_printf_float+0x17e>
 8003b02:	464a      	mov	r2, r9
 8003b04:	3901      	subs	r1, #1
 8003b06:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003b0a:	910d      	str	r1, [sp, #52]	; 0x34
 8003b0c:	f7ff ff1d 	bl	800394a <__exponent>
 8003b10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b12:	4682      	mov	sl, r0
 8003b14:	1813      	adds	r3, r2, r0
 8003b16:	2a01      	cmp	r2, #1
 8003b18:	6123      	str	r3, [r4, #16]
 8003b1a:	dc02      	bgt.n	8003b22 <_printf_float+0x15e>
 8003b1c:	6822      	ldr	r2, [r4, #0]
 8003b1e:	07d2      	lsls	r2, r2, #31
 8003b20:	d501      	bpl.n	8003b26 <_printf_float+0x162>
 8003b22:	3301      	adds	r3, #1
 8003b24:	6123      	str	r3, [r4, #16]
 8003b26:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d09b      	beq.n	8003a66 <_printf_float+0xa2>
 8003b2e:	232d      	movs	r3, #45	; 0x2d
 8003b30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b34:	e797      	b.n	8003a66 <_printf_float+0xa2>
 8003b36:	2947      	cmp	r1, #71	; 0x47
 8003b38:	d1bc      	bne.n	8003ab4 <_printf_float+0xf0>
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1ba      	bne.n	8003ab4 <_printf_float+0xf0>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e7b7      	b.n	8003ab2 <_printf_float+0xee>
 8003b42:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003b46:	d118      	bne.n	8003b7a <_printf_float+0x1b6>
 8003b48:	2900      	cmp	r1, #0
 8003b4a:	6863      	ldr	r3, [r4, #4]
 8003b4c:	dd0b      	ble.n	8003b66 <_printf_float+0x1a2>
 8003b4e:	6121      	str	r1, [r4, #16]
 8003b50:	b913      	cbnz	r3, 8003b58 <_printf_float+0x194>
 8003b52:	6822      	ldr	r2, [r4, #0]
 8003b54:	07d0      	lsls	r0, r2, #31
 8003b56:	d502      	bpl.n	8003b5e <_printf_float+0x19a>
 8003b58:	3301      	adds	r3, #1
 8003b5a:	440b      	add	r3, r1
 8003b5c:	6123      	str	r3, [r4, #16]
 8003b5e:	f04f 0a00 	mov.w	sl, #0
 8003b62:	65a1      	str	r1, [r4, #88]	; 0x58
 8003b64:	e7df      	b.n	8003b26 <_printf_float+0x162>
 8003b66:	b913      	cbnz	r3, 8003b6e <_printf_float+0x1aa>
 8003b68:	6822      	ldr	r2, [r4, #0]
 8003b6a:	07d2      	lsls	r2, r2, #31
 8003b6c:	d501      	bpl.n	8003b72 <_printf_float+0x1ae>
 8003b6e:	3302      	adds	r3, #2
 8003b70:	e7f4      	b.n	8003b5c <_printf_float+0x198>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e7f2      	b.n	8003b5c <_printf_float+0x198>
 8003b76:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003b7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b7c:	4299      	cmp	r1, r3
 8003b7e:	db05      	blt.n	8003b8c <_printf_float+0x1c8>
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	6121      	str	r1, [r4, #16]
 8003b84:	07d8      	lsls	r0, r3, #31
 8003b86:	d5ea      	bpl.n	8003b5e <_printf_float+0x19a>
 8003b88:	1c4b      	adds	r3, r1, #1
 8003b8a:	e7e7      	b.n	8003b5c <_printf_float+0x198>
 8003b8c:	2900      	cmp	r1, #0
 8003b8e:	bfcc      	ite	gt
 8003b90:	2201      	movgt	r2, #1
 8003b92:	f1c1 0202 	rsble	r2, r1, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	e7e0      	b.n	8003b5c <_printf_float+0x198>
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	055a      	lsls	r2, r3, #21
 8003b9e:	d407      	bmi.n	8003bb0 <_printf_float+0x1ec>
 8003ba0:	6923      	ldr	r3, [r4, #16]
 8003ba2:	4642      	mov	r2, r8
 8003ba4:	4631      	mov	r1, r6
 8003ba6:	4628      	mov	r0, r5
 8003ba8:	47b8      	blx	r7
 8003baa:	3001      	adds	r0, #1
 8003bac:	d12b      	bne.n	8003c06 <_printf_float+0x242>
 8003bae:	e764      	b.n	8003a7a <_printf_float+0xb6>
 8003bb0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003bb4:	f240 80dd 	bls.w	8003d72 <_printf_float+0x3ae>
 8003bb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f7fc fef2 	bl	80009a8 <__aeabi_dcmpeq>
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	d033      	beq.n	8003c30 <_printf_float+0x26c>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	4631      	mov	r1, r6
 8003bcc:	4628      	mov	r0, r5
 8003bce:	4a35      	ldr	r2, [pc, #212]	; (8003ca4 <_printf_float+0x2e0>)
 8003bd0:	47b8      	blx	r7
 8003bd2:	3001      	adds	r0, #1
 8003bd4:	f43f af51 	beq.w	8003a7a <_printf_float+0xb6>
 8003bd8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	db02      	blt.n	8003be6 <_printf_float+0x222>
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	07d8      	lsls	r0, r3, #31
 8003be4:	d50f      	bpl.n	8003c06 <_printf_float+0x242>
 8003be6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bea:	4631      	mov	r1, r6
 8003bec:	4628      	mov	r0, r5
 8003bee:	47b8      	blx	r7
 8003bf0:	3001      	adds	r0, #1
 8003bf2:	f43f af42 	beq.w	8003a7a <_printf_float+0xb6>
 8003bf6:	f04f 0800 	mov.w	r8, #0
 8003bfa:	f104 091a 	add.w	r9, r4, #26
 8003bfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c00:	3b01      	subs	r3, #1
 8003c02:	4543      	cmp	r3, r8
 8003c04:	dc09      	bgt.n	8003c1a <_printf_float+0x256>
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	079b      	lsls	r3, r3, #30
 8003c0a:	f100 8104 	bmi.w	8003e16 <_printf_float+0x452>
 8003c0e:	68e0      	ldr	r0, [r4, #12]
 8003c10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c12:	4298      	cmp	r0, r3
 8003c14:	bfb8      	it	lt
 8003c16:	4618      	movlt	r0, r3
 8003c18:	e731      	b.n	8003a7e <_printf_float+0xba>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	464a      	mov	r2, r9
 8003c1e:	4631      	mov	r1, r6
 8003c20:	4628      	mov	r0, r5
 8003c22:	47b8      	blx	r7
 8003c24:	3001      	adds	r0, #1
 8003c26:	f43f af28 	beq.w	8003a7a <_printf_float+0xb6>
 8003c2a:	f108 0801 	add.w	r8, r8, #1
 8003c2e:	e7e6      	b.n	8003bfe <_printf_float+0x23a>
 8003c30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	dc38      	bgt.n	8003ca8 <_printf_float+0x2e4>
 8003c36:	2301      	movs	r3, #1
 8003c38:	4631      	mov	r1, r6
 8003c3a:	4628      	mov	r0, r5
 8003c3c:	4a19      	ldr	r2, [pc, #100]	; (8003ca4 <_printf_float+0x2e0>)
 8003c3e:	47b8      	blx	r7
 8003c40:	3001      	adds	r0, #1
 8003c42:	f43f af1a 	beq.w	8003a7a <_printf_float+0xb6>
 8003c46:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	d102      	bne.n	8003c54 <_printf_float+0x290>
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	07d9      	lsls	r1, r3, #31
 8003c52:	d5d8      	bpl.n	8003c06 <_printf_float+0x242>
 8003c54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c58:	4631      	mov	r1, r6
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	47b8      	blx	r7
 8003c5e:	3001      	adds	r0, #1
 8003c60:	f43f af0b 	beq.w	8003a7a <_printf_float+0xb6>
 8003c64:	f04f 0900 	mov.w	r9, #0
 8003c68:	f104 0a1a 	add.w	sl, r4, #26
 8003c6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c6e:	425b      	negs	r3, r3
 8003c70:	454b      	cmp	r3, r9
 8003c72:	dc01      	bgt.n	8003c78 <_printf_float+0x2b4>
 8003c74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c76:	e794      	b.n	8003ba2 <_printf_float+0x1de>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	4652      	mov	r2, sl
 8003c7c:	4631      	mov	r1, r6
 8003c7e:	4628      	mov	r0, r5
 8003c80:	47b8      	blx	r7
 8003c82:	3001      	adds	r0, #1
 8003c84:	f43f aef9 	beq.w	8003a7a <_printf_float+0xb6>
 8003c88:	f109 0901 	add.w	r9, r9, #1
 8003c8c:	e7ee      	b.n	8003c6c <_printf_float+0x2a8>
 8003c8e:	bf00      	nop
 8003c90:	7fefffff 	.word	0x7fefffff
 8003c94:	08006f16 	.word	0x08006f16
 8003c98:	08006f1a 	.word	0x08006f1a
 8003c9c:	08006f1e 	.word	0x08006f1e
 8003ca0:	08006f22 	.word	0x08006f22
 8003ca4:	08006f26 	.word	0x08006f26
 8003ca8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003caa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003cac:	429a      	cmp	r2, r3
 8003cae:	bfa8      	it	ge
 8003cb0:	461a      	movge	r2, r3
 8003cb2:	2a00      	cmp	r2, #0
 8003cb4:	4691      	mov	r9, r2
 8003cb6:	dc37      	bgt.n	8003d28 <_printf_float+0x364>
 8003cb8:	f04f 0b00 	mov.w	fp, #0
 8003cbc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003cc0:	f104 021a 	add.w	r2, r4, #26
 8003cc4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003cc8:	ebaa 0309 	sub.w	r3, sl, r9
 8003ccc:	455b      	cmp	r3, fp
 8003cce:	dc33      	bgt.n	8003d38 <_printf_float+0x374>
 8003cd0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	db3b      	blt.n	8003d50 <_printf_float+0x38c>
 8003cd8:	6823      	ldr	r3, [r4, #0]
 8003cda:	07da      	lsls	r2, r3, #31
 8003cdc:	d438      	bmi.n	8003d50 <_printf_float+0x38c>
 8003cde:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003ce2:	eba2 0903 	sub.w	r9, r2, r3
 8003ce6:	eba2 020a 	sub.w	r2, r2, sl
 8003cea:	4591      	cmp	r9, r2
 8003cec:	bfa8      	it	ge
 8003cee:	4691      	movge	r9, r2
 8003cf0:	f1b9 0f00 	cmp.w	r9, #0
 8003cf4:	dc34      	bgt.n	8003d60 <_printf_float+0x39c>
 8003cf6:	f04f 0800 	mov.w	r8, #0
 8003cfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003cfe:	f104 0a1a 	add.w	sl, r4, #26
 8003d02:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	eba3 0309 	sub.w	r3, r3, r9
 8003d0c:	4543      	cmp	r3, r8
 8003d0e:	f77f af7a 	ble.w	8003c06 <_printf_float+0x242>
 8003d12:	2301      	movs	r3, #1
 8003d14:	4652      	mov	r2, sl
 8003d16:	4631      	mov	r1, r6
 8003d18:	4628      	mov	r0, r5
 8003d1a:	47b8      	blx	r7
 8003d1c:	3001      	adds	r0, #1
 8003d1e:	f43f aeac 	beq.w	8003a7a <_printf_float+0xb6>
 8003d22:	f108 0801 	add.w	r8, r8, #1
 8003d26:	e7ec      	b.n	8003d02 <_printf_float+0x33e>
 8003d28:	4613      	mov	r3, r2
 8003d2a:	4631      	mov	r1, r6
 8003d2c:	4642      	mov	r2, r8
 8003d2e:	4628      	mov	r0, r5
 8003d30:	47b8      	blx	r7
 8003d32:	3001      	adds	r0, #1
 8003d34:	d1c0      	bne.n	8003cb8 <_printf_float+0x2f4>
 8003d36:	e6a0      	b.n	8003a7a <_printf_float+0xb6>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	4631      	mov	r1, r6
 8003d3c:	4628      	mov	r0, r5
 8003d3e:	920b      	str	r2, [sp, #44]	; 0x2c
 8003d40:	47b8      	blx	r7
 8003d42:	3001      	adds	r0, #1
 8003d44:	f43f ae99 	beq.w	8003a7a <_printf_float+0xb6>
 8003d48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003d4a:	f10b 0b01 	add.w	fp, fp, #1
 8003d4e:	e7b9      	b.n	8003cc4 <_printf_float+0x300>
 8003d50:	4631      	mov	r1, r6
 8003d52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d56:	4628      	mov	r0, r5
 8003d58:	47b8      	blx	r7
 8003d5a:	3001      	adds	r0, #1
 8003d5c:	d1bf      	bne.n	8003cde <_printf_float+0x31a>
 8003d5e:	e68c      	b.n	8003a7a <_printf_float+0xb6>
 8003d60:	464b      	mov	r3, r9
 8003d62:	4631      	mov	r1, r6
 8003d64:	4628      	mov	r0, r5
 8003d66:	eb08 020a 	add.w	r2, r8, sl
 8003d6a:	47b8      	blx	r7
 8003d6c:	3001      	adds	r0, #1
 8003d6e:	d1c2      	bne.n	8003cf6 <_printf_float+0x332>
 8003d70:	e683      	b.n	8003a7a <_printf_float+0xb6>
 8003d72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d74:	2a01      	cmp	r2, #1
 8003d76:	dc01      	bgt.n	8003d7c <_printf_float+0x3b8>
 8003d78:	07db      	lsls	r3, r3, #31
 8003d7a:	d539      	bpl.n	8003df0 <_printf_float+0x42c>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	4642      	mov	r2, r8
 8003d80:	4631      	mov	r1, r6
 8003d82:	4628      	mov	r0, r5
 8003d84:	47b8      	blx	r7
 8003d86:	3001      	adds	r0, #1
 8003d88:	f43f ae77 	beq.w	8003a7a <_printf_float+0xb6>
 8003d8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d90:	4631      	mov	r1, r6
 8003d92:	4628      	mov	r0, r5
 8003d94:	47b8      	blx	r7
 8003d96:	3001      	adds	r0, #1
 8003d98:	f43f ae6f 	beq.w	8003a7a <_printf_float+0xb6>
 8003d9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003da0:	2200      	movs	r2, #0
 8003da2:	2300      	movs	r3, #0
 8003da4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8003da8:	f7fc fdfe 	bl	80009a8 <__aeabi_dcmpeq>
 8003dac:	b9d8      	cbnz	r0, 8003de6 <_printf_float+0x422>
 8003dae:	f109 33ff 	add.w	r3, r9, #4294967295
 8003db2:	f108 0201 	add.w	r2, r8, #1
 8003db6:	4631      	mov	r1, r6
 8003db8:	4628      	mov	r0, r5
 8003dba:	47b8      	blx	r7
 8003dbc:	3001      	adds	r0, #1
 8003dbe:	d10e      	bne.n	8003dde <_printf_float+0x41a>
 8003dc0:	e65b      	b.n	8003a7a <_printf_float+0xb6>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	464a      	mov	r2, r9
 8003dc6:	4631      	mov	r1, r6
 8003dc8:	4628      	mov	r0, r5
 8003dca:	47b8      	blx	r7
 8003dcc:	3001      	adds	r0, #1
 8003dce:	f43f ae54 	beq.w	8003a7a <_printf_float+0xb6>
 8003dd2:	f108 0801 	add.w	r8, r8, #1
 8003dd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	4543      	cmp	r3, r8
 8003ddc:	dcf1      	bgt.n	8003dc2 <_printf_float+0x3fe>
 8003dde:	4653      	mov	r3, sl
 8003de0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003de4:	e6de      	b.n	8003ba4 <_printf_float+0x1e0>
 8003de6:	f04f 0800 	mov.w	r8, #0
 8003dea:	f104 091a 	add.w	r9, r4, #26
 8003dee:	e7f2      	b.n	8003dd6 <_printf_float+0x412>
 8003df0:	2301      	movs	r3, #1
 8003df2:	4642      	mov	r2, r8
 8003df4:	e7df      	b.n	8003db6 <_printf_float+0x3f2>
 8003df6:	2301      	movs	r3, #1
 8003df8:	464a      	mov	r2, r9
 8003dfa:	4631      	mov	r1, r6
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	47b8      	blx	r7
 8003e00:	3001      	adds	r0, #1
 8003e02:	f43f ae3a 	beq.w	8003a7a <_printf_float+0xb6>
 8003e06:	f108 0801 	add.w	r8, r8, #1
 8003e0a:	68e3      	ldr	r3, [r4, #12]
 8003e0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003e0e:	1a5b      	subs	r3, r3, r1
 8003e10:	4543      	cmp	r3, r8
 8003e12:	dcf0      	bgt.n	8003df6 <_printf_float+0x432>
 8003e14:	e6fb      	b.n	8003c0e <_printf_float+0x24a>
 8003e16:	f04f 0800 	mov.w	r8, #0
 8003e1a:	f104 0919 	add.w	r9, r4, #25
 8003e1e:	e7f4      	b.n	8003e0a <_printf_float+0x446>

08003e20 <_printf_common>:
 8003e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e24:	4616      	mov	r6, r2
 8003e26:	4699      	mov	r9, r3
 8003e28:	688a      	ldr	r2, [r1, #8]
 8003e2a:	690b      	ldr	r3, [r1, #16]
 8003e2c:	4607      	mov	r7, r0
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	bfb8      	it	lt
 8003e32:	4613      	movlt	r3, r2
 8003e34:	6033      	str	r3, [r6, #0]
 8003e36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e3a:	460c      	mov	r4, r1
 8003e3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e40:	b10a      	cbz	r2, 8003e46 <_printf_common+0x26>
 8003e42:	3301      	adds	r3, #1
 8003e44:	6033      	str	r3, [r6, #0]
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	0699      	lsls	r1, r3, #26
 8003e4a:	bf42      	ittt	mi
 8003e4c:	6833      	ldrmi	r3, [r6, #0]
 8003e4e:	3302      	addmi	r3, #2
 8003e50:	6033      	strmi	r3, [r6, #0]
 8003e52:	6825      	ldr	r5, [r4, #0]
 8003e54:	f015 0506 	ands.w	r5, r5, #6
 8003e58:	d106      	bne.n	8003e68 <_printf_common+0x48>
 8003e5a:	f104 0a19 	add.w	sl, r4, #25
 8003e5e:	68e3      	ldr	r3, [r4, #12]
 8003e60:	6832      	ldr	r2, [r6, #0]
 8003e62:	1a9b      	subs	r3, r3, r2
 8003e64:	42ab      	cmp	r3, r5
 8003e66:	dc2b      	bgt.n	8003ec0 <_printf_common+0xa0>
 8003e68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e6c:	1e13      	subs	r3, r2, #0
 8003e6e:	6822      	ldr	r2, [r4, #0]
 8003e70:	bf18      	it	ne
 8003e72:	2301      	movne	r3, #1
 8003e74:	0692      	lsls	r2, r2, #26
 8003e76:	d430      	bmi.n	8003eda <_printf_common+0xba>
 8003e78:	4649      	mov	r1, r9
 8003e7a:	4638      	mov	r0, r7
 8003e7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e80:	47c0      	blx	r8
 8003e82:	3001      	adds	r0, #1
 8003e84:	d023      	beq.n	8003ece <_printf_common+0xae>
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	6922      	ldr	r2, [r4, #16]
 8003e8a:	f003 0306 	and.w	r3, r3, #6
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	bf14      	ite	ne
 8003e92:	2500      	movne	r5, #0
 8003e94:	6833      	ldreq	r3, [r6, #0]
 8003e96:	f04f 0600 	mov.w	r6, #0
 8003e9a:	bf08      	it	eq
 8003e9c:	68e5      	ldreq	r5, [r4, #12]
 8003e9e:	f104 041a 	add.w	r4, r4, #26
 8003ea2:	bf08      	it	eq
 8003ea4:	1aed      	subeq	r5, r5, r3
 8003ea6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003eaa:	bf08      	it	eq
 8003eac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	bfc4      	itt	gt
 8003eb4:	1a9b      	subgt	r3, r3, r2
 8003eb6:	18ed      	addgt	r5, r5, r3
 8003eb8:	42b5      	cmp	r5, r6
 8003eba:	d11a      	bne.n	8003ef2 <_printf_common+0xd2>
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	e008      	b.n	8003ed2 <_printf_common+0xb2>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	4652      	mov	r2, sl
 8003ec4:	4649      	mov	r1, r9
 8003ec6:	4638      	mov	r0, r7
 8003ec8:	47c0      	blx	r8
 8003eca:	3001      	adds	r0, #1
 8003ecc:	d103      	bne.n	8003ed6 <_printf_common+0xb6>
 8003ece:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ed6:	3501      	adds	r5, #1
 8003ed8:	e7c1      	b.n	8003e5e <_printf_common+0x3e>
 8003eda:	2030      	movs	r0, #48	; 0x30
 8003edc:	18e1      	adds	r1, r4, r3
 8003ede:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ee8:	4422      	add	r2, r4
 8003eea:	3302      	adds	r3, #2
 8003eec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ef0:	e7c2      	b.n	8003e78 <_printf_common+0x58>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	4622      	mov	r2, r4
 8003ef6:	4649      	mov	r1, r9
 8003ef8:	4638      	mov	r0, r7
 8003efa:	47c0      	blx	r8
 8003efc:	3001      	adds	r0, #1
 8003efe:	d0e6      	beq.n	8003ece <_printf_common+0xae>
 8003f00:	3601      	adds	r6, #1
 8003f02:	e7d9      	b.n	8003eb8 <_printf_common+0x98>

08003f04 <_printf_i>:
 8003f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f08:	7e0f      	ldrb	r7, [r1, #24]
 8003f0a:	4691      	mov	r9, r2
 8003f0c:	2f78      	cmp	r7, #120	; 0x78
 8003f0e:	4680      	mov	r8, r0
 8003f10:	460c      	mov	r4, r1
 8003f12:	469a      	mov	sl, r3
 8003f14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f1a:	d807      	bhi.n	8003f2c <_printf_i+0x28>
 8003f1c:	2f62      	cmp	r7, #98	; 0x62
 8003f1e:	d80a      	bhi.n	8003f36 <_printf_i+0x32>
 8003f20:	2f00      	cmp	r7, #0
 8003f22:	f000 80d5 	beq.w	80040d0 <_printf_i+0x1cc>
 8003f26:	2f58      	cmp	r7, #88	; 0x58
 8003f28:	f000 80c1 	beq.w	80040ae <_printf_i+0x1aa>
 8003f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f34:	e03a      	b.n	8003fac <_printf_i+0xa8>
 8003f36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f3a:	2b15      	cmp	r3, #21
 8003f3c:	d8f6      	bhi.n	8003f2c <_printf_i+0x28>
 8003f3e:	a101      	add	r1, pc, #4	; (adr r1, 8003f44 <_printf_i+0x40>)
 8003f40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f44:	08003f9d 	.word	0x08003f9d
 8003f48:	08003fb1 	.word	0x08003fb1
 8003f4c:	08003f2d 	.word	0x08003f2d
 8003f50:	08003f2d 	.word	0x08003f2d
 8003f54:	08003f2d 	.word	0x08003f2d
 8003f58:	08003f2d 	.word	0x08003f2d
 8003f5c:	08003fb1 	.word	0x08003fb1
 8003f60:	08003f2d 	.word	0x08003f2d
 8003f64:	08003f2d 	.word	0x08003f2d
 8003f68:	08003f2d 	.word	0x08003f2d
 8003f6c:	08003f2d 	.word	0x08003f2d
 8003f70:	080040b7 	.word	0x080040b7
 8003f74:	08003fdd 	.word	0x08003fdd
 8003f78:	08004071 	.word	0x08004071
 8003f7c:	08003f2d 	.word	0x08003f2d
 8003f80:	08003f2d 	.word	0x08003f2d
 8003f84:	080040d9 	.word	0x080040d9
 8003f88:	08003f2d 	.word	0x08003f2d
 8003f8c:	08003fdd 	.word	0x08003fdd
 8003f90:	08003f2d 	.word	0x08003f2d
 8003f94:	08003f2d 	.word	0x08003f2d
 8003f98:	08004079 	.word	0x08004079
 8003f9c:	682b      	ldr	r3, [r5, #0]
 8003f9e:	1d1a      	adds	r2, r3, #4
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	602a      	str	r2, [r5, #0]
 8003fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fac:	2301      	movs	r3, #1
 8003fae:	e0a0      	b.n	80040f2 <_printf_i+0x1ee>
 8003fb0:	6820      	ldr	r0, [r4, #0]
 8003fb2:	682b      	ldr	r3, [r5, #0]
 8003fb4:	0607      	lsls	r7, r0, #24
 8003fb6:	f103 0104 	add.w	r1, r3, #4
 8003fba:	6029      	str	r1, [r5, #0]
 8003fbc:	d501      	bpl.n	8003fc2 <_printf_i+0xbe>
 8003fbe:	681e      	ldr	r6, [r3, #0]
 8003fc0:	e003      	b.n	8003fca <_printf_i+0xc6>
 8003fc2:	0646      	lsls	r6, r0, #25
 8003fc4:	d5fb      	bpl.n	8003fbe <_printf_i+0xba>
 8003fc6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003fca:	2e00      	cmp	r6, #0
 8003fcc:	da03      	bge.n	8003fd6 <_printf_i+0xd2>
 8003fce:	232d      	movs	r3, #45	; 0x2d
 8003fd0:	4276      	negs	r6, r6
 8003fd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fd6:	230a      	movs	r3, #10
 8003fd8:	4859      	ldr	r0, [pc, #356]	; (8004140 <_printf_i+0x23c>)
 8003fda:	e012      	b.n	8004002 <_printf_i+0xfe>
 8003fdc:	682b      	ldr	r3, [r5, #0]
 8003fde:	6820      	ldr	r0, [r4, #0]
 8003fe0:	1d19      	adds	r1, r3, #4
 8003fe2:	6029      	str	r1, [r5, #0]
 8003fe4:	0605      	lsls	r5, r0, #24
 8003fe6:	d501      	bpl.n	8003fec <_printf_i+0xe8>
 8003fe8:	681e      	ldr	r6, [r3, #0]
 8003fea:	e002      	b.n	8003ff2 <_printf_i+0xee>
 8003fec:	0641      	lsls	r1, r0, #25
 8003fee:	d5fb      	bpl.n	8003fe8 <_printf_i+0xe4>
 8003ff0:	881e      	ldrh	r6, [r3, #0]
 8003ff2:	2f6f      	cmp	r7, #111	; 0x6f
 8003ff4:	bf0c      	ite	eq
 8003ff6:	2308      	moveq	r3, #8
 8003ff8:	230a      	movne	r3, #10
 8003ffa:	4851      	ldr	r0, [pc, #324]	; (8004140 <_printf_i+0x23c>)
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004002:	6865      	ldr	r5, [r4, #4]
 8004004:	2d00      	cmp	r5, #0
 8004006:	bfa8      	it	ge
 8004008:	6821      	ldrge	r1, [r4, #0]
 800400a:	60a5      	str	r5, [r4, #8]
 800400c:	bfa4      	itt	ge
 800400e:	f021 0104 	bicge.w	r1, r1, #4
 8004012:	6021      	strge	r1, [r4, #0]
 8004014:	b90e      	cbnz	r6, 800401a <_printf_i+0x116>
 8004016:	2d00      	cmp	r5, #0
 8004018:	d04b      	beq.n	80040b2 <_printf_i+0x1ae>
 800401a:	4615      	mov	r5, r2
 800401c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004020:	fb03 6711 	mls	r7, r3, r1, r6
 8004024:	5dc7      	ldrb	r7, [r0, r7]
 8004026:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800402a:	4637      	mov	r7, r6
 800402c:	42bb      	cmp	r3, r7
 800402e:	460e      	mov	r6, r1
 8004030:	d9f4      	bls.n	800401c <_printf_i+0x118>
 8004032:	2b08      	cmp	r3, #8
 8004034:	d10b      	bne.n	800404e <_printf_i+0x14a>
 8004036:	6823      	ldr	r3, [r4, #0]
 8004038:	07de      	lsls	r6, r3, #31
 800403a:	d508      	bpl.n	800404e <_printf_i+0x14a>
 800403c:	6923      	ldr	r3, [r4, #16]
 800403e:	6861      	ldr	r1, [r4, #4]
 8004040:	4299      	cmp	r1, r3
 8004042:	bfde      	ittt	le
 8004044:	2330      	movle	r3, #48	; 0x30
 8004046:	f805 3c01 	strble.w	r3, [r5, #-1]
 800404a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800404e:	1b52      	subs	r2, r2, r5
 8004050:	6122      	str	r2, [r4, #16]
 8004052:	464b      	mov	r3, r9
 8004054:	4621      	mov	r1, r4
 8004056:	4640      	mov	r0, r8
 8004058:	f8cd a000 	str.w	sl, [sp]
 800405c:	aa03      	add	r2, sp, #12
 800405e:	f7ff fedf 	bl	8003e20 <_printf_common>
 8004062:	3001      	adds	r0, #1
 8004064:	d14a      	bne.n	80040fc <_printf_i+0x1f8>
 8004066:	f04f 30ff 	mov.w	r0, #4294967295
 800406a:	b004      	add	sp, #16
 800406c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004070:	6823      	ldr	r3, [r4, #0]
 8004072:	f043 0320 	orr.w	r3, r3, #32
 8004076:	6023      	str	r3, [r4, #0]
 8004078:	2778      	movs	r7, #120	; 0x78
 800407a:	4832      	ldr	r0, [pc, #200]	; (8004144 <_printf_i+0x240>)
 800407c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	6829      	ldr	r1, [r5, #0]
 8004084:	061f      	lsls	r7, r3, #24
 8004086:	f851 6b04 	ldr.w	r6, [r1], #4
 800408a:	d402      	bmi.n	8004092 <_printf_i+0x18e>
 800408c:	065f      	lsls	r7, r3, #25
 800408e:	bf48      	it	mi
 8004090:	b2b6      	uxthmi	r6, r6
 8004092:	07df      	lsls	r7, r3, #31
 8004094:	bf48      	it	mi
 8004096:	f043 0320 	orrmi.w	r3, r3, #32
 800409a:	6029      	str	r1, [r5, #0]
 800409c:	bf48      	it	mi
 800409e:	6023      	strmi	r3, [r4, #0]
 80040a0:	b91e      	cbnz	r6, 80040aa <_printf_i+0x1a6>
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	f023 0320 	bic.w	r3, r3, #32
 80040a8:	6023      	str	r3, [r4, #0]
 80040aa:	2310      	movs	r3, #16
 80040ac:	e7a6      	b.n	8003ffc <_printf_i+0xf8>
 80040ae:	4824      	ldr	r0, [pc, #144]	; (8004140 <_printf_i+0x23c>)
 80040b0:	e7e4      	b.n	800407c <_printf_i+0x178>
 80040b2:	4615      	mov	r5, r2
 80040b4:	e7bd      	b.n	8004032 <_printf_i+0x12e>
 80040b6:	682b      	ldr	r3, [r5, #0]
 80040b8:	6826      	ldr	r6, [r4, #0]
 80040ba:	1d18      	adds	r0, r3, #4
 80040bc:	6961      	ldr	r1, [r4, #20]
 80040be:	6028      	str	r0, [r5, #0]
 80040c0:	0635      	lsls	r5, r6, #24
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	d501      	bpl.n	80040ca <_printf_i+0x1c6>
 80040c6:	6019      	str	r1, [r3, #0]
 80040c8:	e002      	b.n	80040d0 <_printf_i+0x1cc>
 80040ca:	0670      	lsls	r0, r6, #25
 80040cc:	d5fb      	bpl.n	80040c6 <_printf_i+0x1c2>
 80040ce:	8019      	strh	r1, [r3, #0]
 80040d0:	2300      	movs	r3, #0
 80040d2:	4615      	mov	r5, r2
 80040d4:	6123      	str	r3, [r4, #16]
 80040d6:	e7bc      	b.n	8004052 <_printf_i+0x14e>
 80040d8:	682b      	ldr	r3, [r5, #0]
 80040da:	2100      	movs	r1, #0
 80040dc:	1d1a      	adds	r2, r3, #4
 80040de:	602a      	str	r2, [r5, #0]
 80040e0:	681d      	ldr	r5, [r3, #0]
 80040e2:	6862      	ldr	r2, [r4, #4]
 80040e4:	4628      	mov	r0, r5
 80040e6:	f000 f9c1 	bl	800446c <memchr>
 80040ea:	b108      	cbz	r0, 80040f0 <_printf_i+0x1ec>
 80040ec:	1b40      	subs	r0, r0, r5
 80040ee:	6060      	str	r0, [r4, #4]
 80040f0:	6863      	ldr	r3, [r4, #4]
 80040f2:	6123      	str	r3, [r4, #16]
 80040f4:	2300      	movs	r3, #0
 80040f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040fa:	e7aa      	b.n	8004052 <_printf_i+0x14e>
 80040fc:	462a      	mov	r2, r5
 80040fe:	4649      	mov	r1, r9
 8004100:	4640      	mov	r0, r8
 8004102:	6923      	ldr	r3, [r4, #16]
 8004104:	47d0      	blx	sl
 8004106:	3001      	adds	r0, #1
 8004108:	d0ad      	beq.n	8004066 <_printf_i+0x162>
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	079b      	lsls	r3, r3, #30
 800410e:	d413      	bmi.n	8004138 <_printf_i+0x234>
 8004110:	68e0      	ldr	r0, [r4, #12]
 8004112:	9b03      	ldr	r3, [sp, #12]
 8004114:	4298      	cmp	r0, r3
 8004116:	bfb8      	it	lt
 8004118:	4618      	movlt	r0, r3
 800411a:	e7a6      	b.n	800406a <_printf_i+0x166>
 800411c:	2301      	movs	r3, #1
 800411e:	4632      	mov	r2, r6
 8004120:	4649      	mov	r1, r9
 8004122:	4640      	mov	r0, r8
 8004124:	47d0      	blx	sl
 8004126:	3001      	adds	r0, #1
 8004128:	d09d      	beq.n	8004066 <_printf_i+0x162>
 800412a:	3501      	adds	r5, #1
 800412c:	68e3      	ldr	r3, [r4, #12]
 800412e:	9903      	ldr	r1, [sp, #12]
 8004130:	1a5b      	subs	r3, r3, r1
 8004132:	42ab      	cmp	r3, r5
 8004134:	dcf2      	bgt.n	800411c <_printf_i+0x218>
 8004136:	e7eb      	b.n	8004110 <_printf_i+0x20c>
 8004138:	2500      	movs	r5, #0
 800413a:	f104 0619 	add.w	r6, r4, #25
 800413e:	e7f5      	b.n	800412c <_printf_i+0x228>
 8004140:	08006f28 	.word	0x08006f28
 8004144:	08006f39 	.word	0x08006f39

08004148 <std>:
 8004148:	2300      	movs	r3, #0
 800414a:	b510      	push	{r4, lr}
 800414c:	4604      	mov	r4, r0
 800414e:	e9c0 3300 	strd	r3, r3, [r0]
 8004152:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004156:	6083      	str	r3, [r0, #8]
 8004158:	8181      	strh	r1, [r0, #12]
 800415a:	6643      	str	r3, [r0, #100]	; 0x64
 800415c:	81c2      	strh	r2, [r0, #14]
 800415e:	6183      	str	r3, [r0, #24]
 8004160:	4619      	mov	r1, r3
 8004162:	2208      	movs	r2, #8
 8004164:	305c      	adds	r0, #92	; 0x5c
 8004166:	f000 f902 	bl	800436e <memset>
 800416a:	4b05      	ldr	r3, [pc, #20]	; (8004180 <std+0x38>)
 800416c:	6224      	str	r4, [r4, #32]
 800416e:	6263      	str	r3, [r4, #36]	; 0x24
 8004170:	4b04      	ldr	r3, [pc, #16]	; (8004184 <std+0x3c>)
 8004172:	62a3      	str	r3, [r4, #40]	; 0x28
 8004174:	4b04      	ldr	r3, [pc, #16]	; (8004188 <std+0x40>)
 8004176:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004178:	4b04      	ldr	r3, [pc, #16]	; (800418c <std+0x44>)
 800417a:	6323      	str	r3, [r4, #48]	; 0x30
 800417c:	bd10      	pop	{r4, pc}
 800417e:	bf00      	nop
 8004180:	080042e9 	.word	0x080042e9
 8004184:	0800430b 	.word	0x0800430b
 8004188:	08004343 	.word	0x08004343
 800418c:	08004367 	.word	0x08004367

08004190 <stdio_exit_handler>:
 8004190:	4a02      	ldr	r2, [pc, #8]	; (800419c <stdio_exit_handler+0xc>)
 8004192:	4903      	ldr	r1, [pc, #12]	; (80041a0 <stdio_exit_handler+0x10>)
 8004194:	4803      	ldr	r0, [pc, #12]	; (80041a4 <stdio_exit_handler+0x14>)
 8004196:	f000 b869 	b.w	800426c <_fwalk_sglue>
 800419a:	bf00      	nop
 800419c:	2000000c 	.word	0x2000000c
 80041a0:	08005e05 	.word	0x08005e05
 80041a4:	20000018 	.word	0x20000018

080041a8 <cleanup_stdio>:
 80041a8:	6841      	ldr	r1, [r0, #4]
 80041aa:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <cleanup_stdio+0x34>)
 80041ac:	b510      	push	{r4, lr}
 80041ae:	4299      	cmp	r1, r3
 80041b0:	4604      	mov	r4, r0
 80041b2:	d001      	beq.n	80041b8 <cleanup_stdio+0x10>
 80041b4:	f001 fe26 	bl	8005e04 <_fflush_r>
 80041b8:	68a1      	ldr	r1, [r4, #8]
 80041ba:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <cleanup_stdio+0x38>)
 80041bc:	4299      	cmp	r1, r3
 80041be:	d002      	beq.n	80041c6 <cleanup_stdio+0x1e>
 80041c0:	4620      	mov	r0, r4
 80041c2:	f001 fe1f 	bl	8005e04 <_fflush_r>
 80041c6:	68e1      	ldr	r1, [r4, #12]
 80041c8:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <cleanup_stdio+0x3c>)
 80041ca:	4299      	cmp	r1, r3
 80041cc:	d004      	beq.n	80041d8 <cleanup_stdio+0x30>
 80041ce:	4620      	mov	r0, r4
 80041d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041d4:	f001 be16 	b.w	8005e04 <_fflush_r>
 80041d8:	bd10      	pop	{r4, pc}
 80041da:	bf00      	nop
 80041dc:	20000300 	.word	0x20000300
 80041e0:	20000368 	.word	0x20000368
 80041e4:	200003d0 	.word	0x200003d0

080041e8 <global_stdio_init.part.0>:
 80041e8:	b510      	push	{r4, lr}
 80041ea:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <global_stdio_init.part.0+0x30>)
 80041ec:	4c0b      	ldr	r4, [pc, #44]	; (800421c <global_stdio_init.part.0+0x34>)
 80041ee:	4a0c      	ldr	r2, [pc, #48]	; (8004220 <global_stdio_init.part.0+0x38>)
 80041f0:	4620      	mov	r0, r4
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	2104      	movs	r1, #4
 80041f6:	2200      	movs	r2, #0
 80041f8:	f7ff ffa6 	bl	8004148 <std>
 80041fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004200:	2201      	movs	r2, #1
 8004202:	2109      	movs	r1, #9
 8004204:	f7ff ffa0 	bl	8004148 <std>
 8004208:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800420c:	2202      	movs	r2, #2
 800420e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004212:	2112      	movs	r1, #18
 8004214:	f7ff bf98 	b.w	8004148 <std>
 8004218:	20000438 	.word	0x20000438
 800421c:	20000300 	.word	0x20000300
 8004220:	08004191 	.word	0x08004191

08004224 <__sfp_lock_acquire>:
 8004224:	4801      	ldr	r0, [pc, #4]	; (800422c <__sfp_lock_acquire+0x8>)
 8004226:	f000 b91f 	b.w	8004468 <__retarget_lock_acquire_recursive>
 800422a:	bf00      	nop
 800422c:	20000441 	.word	0x20000441

08004230 <__sfp_lock_release>:
 8004230:	4801      	ldr	r0, [pc, #4]	; (8004238 <__sfp_lock_release+0x8>)
 8004232:	f000 b91a 	b.w	800446a <__retarget_lock_release_recursive>
 8004236:	bf00      	nop
 8004238:	20000441 	.word	0x20000441

0800423c <__sinit>:
 800423c:	b510      	push	{r4, lr}
 800423e:	4604      	mov	r4, r0
 8004240:	f7ff fff0 	bl	8004224 <__sfp_lock_acquire>
 8004244:	6a23      	ldr	r3, [r4, #32]
 8004246:	b11b      	cbz	r3, 8004250 <__sinit+0x14>
 8004248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800424c:	f7ff bff0 	b.w	8004230 <__sfp_lock_release>
 8004250:	4b04      	ldr	r3, [pc, #16]	; (8004264 <__sinit+0x28>)
 8004252:	6223      	str	r3, [r4, #32]
 8004254:	4b04      	ldr	r3, [pc, #16]	; (8004268 <__sinit+0x2c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1f5      	bne.n	8004248 <__sinit+0xc>
 800425c:	f7ff ffc4 	bl	80041e8 <global_stdio_init.part.0>
 8004260:	e7f2      	b.n	8004248 <__sinit+0xc>
 8004262:	bf00      	nop
 8004264:	080041a9 	.word	0x080041a9
 8004268:	20000438 	.word	0x20000438

0800426c <_fwalk_sglue>:
 800426c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004270:	4607      	mov	r7, r0
 8004272:	4688      	mov	r8, r1
 8004274:	4614      	mov	r4, r2
 8004276:	2600      	movs	r6, #0
 8004278:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800427c:	f1b9 0901 	subs.w	r9, r9, #1
 8004280:	d505      	bpl.n	800428e <_fwalk_sglue+0x22>
 8004282:	6824      	ldr	r4, [r4, #0]
 8004284:	2c00      	cmp	r4, #0
 8004286:	d1f7      	bne.n	8004278 <_fwalk_sglue+0xc>
 8004288:	4630      	mov	r0, r6
 800428a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800428e:	89ab      	ldrh	r3, [r5, #12]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d907      	bls.n	80042a4 <_fwalk_sglue+0x38>
 8004294:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004298:	3301      	adds	r3, #1
 800429a:	d003      	beq.n	80042a4 <_fwalk_sglue+0x38>
 800429c:	4629      	mov	r1, r5
 800429e:	4638      	mov	r0, r7
 80042a0:	47c0      	blx	r8
 80042a2:	4306      	orrs	r6, r0
 80042a4:	3568      	adds	r5, #104	; 0x68
 80042a6:	e7e9      	b.n	800427c <_fwalk_sglue+0x10>

080042a8 <siprintf>:
 80042a8:	b40e      	push	{r1, r2, r3}
 80042aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042ae:	b500      	push	{lr}
 80042b0:	b09c      	sub	sp, #112	; 0x70
 80042b2:	ab1d      	add	r3, sp, #116	; 0x74
 80042b4:	9002      	str	r0, [sp, #8]
 80042b6:	9006      	str	r0, [sp, #24]
 80042b8:	9107      	str	r1, [sp, #28]
 80042ba:	9104      	str	r1, [sp, #16]
 80042bc:	4808      	ldr	r0, [pc, #32]	; (80042e0 <siprintf+0x38>)
 80042be:	4909      	ldr	r1, [pc, #36]	; (80042e4 <siprintf+0x3c>)
 80042c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80042c4:	9105      	str	r1, [sp, #20]
 80042c6:	6800      	ldr	r0, [r0, #0]
 80042c8:	a902      	add	r1, sp, #8
 80042ca:	9301      	str	r3, [sp, #4]
 80042cc:	f001 fc1a 	bl	8005b04 <_svfiprintf_r>
 80042d0:	2200      	movs	r2, #0
 80042d2:	9b02      	ldr	r3, [sp, #8]
 80042d4:	701a      	strb	r2, [r3, #0]
 80042d6:	b01c      	add	sp, #112	; 0x70
 80042d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80042dc:	b003      	add	sp, #12
 80042de:	4770      	bx	lr
 80042e0:	20000064 	.word	0x20000064
 80042e4:	ffff0208 	.word	0xffff0208

080042e8 <__sread>:
 80042e8:	b510      	push	{r4, lr}
 80042ea:	460c      	mov	r4, r1
 80042ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042f0:	f000 f86c 	bl	80043cc <_read_r>
 80042f4:	2800      	cmp	r0, #0
 80042f6:	bfab      	itete	ge
 80042f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042fa:	89a3      	ldrhlt	r3, [r4, #12]
 80042fc:	181b      	addge	r3, r3, r0
 80042fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004302:	bfac      	ite	ge
 8004304:	6563      	strge	r3, [r4, #84]	; 0x54
 8004306:	81a3      	strhlt	r3, [r4, #12]
 8004308:	bd10      	pop	{r4, pc}

0800430a <__swrite>:
 800430a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800430e:	461f      	mov	r7, r3
 8004310:	898b      	ldrh	r3, [r1, #12]
 8004312:	4605      	mov	r5, r0
 8004314:	05db      	lsls	r3, r3, #23
 8004316:	460c      	mov	r4, r1
 8004318:	4616      	mov	r6, r2
 800431a:	d505      	bpl.n	8004328 <__swrite+0x1e>
 800431c:	2302      	movs	r3, #2
 800431e:	2200      	movs	r2, #0
 8004320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004324:	f000 f840 	bl	80043a8 <_lseek_r>
 8004328:	89a3      	ldrh	r3, [r4, #12]
 800432a:	4632      	mov	r2, r6
 800432c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004330:	81a3      	strh	r3, [r4, #12]
 8004332:	4628      	mov	r0, r5
 8004334:	463b      	mov	r3, r7
 8004336:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800433a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800433e:	f000 b857 	b.w	80043f0 <_write_r>

08004342 <__sseek>:
 8004342:	b510      	push	{r4, lr}
 8004344:	460c      	mov	r4, r1
 8004346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800434a:	f000 f82d 	bl	80043a8 <_lseek_r>
 800434e:	1c43      	adds	r3, r0, #1
 8004350:	89a3      	ldrh	r3, [r4, #12]
 8004352:	bf15      	itete	ne
 8004354:	6560      	strne	r0, [r4, #84]	; 0x54
 8004356:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800435a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800435e:	81a3      	strheq	r3, [r4, #12]
 8004360:	bf18      	it	ne
 8004362:	81a3      	strhne	r3, [r4, #12]
 8004364:	bd10      	pop	{r4, pc}

08004366 <__sclose>:
 8004366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800436a:	f000 b80d 	b.w	8004388 <_close_r>

0800436e <memset>:
 800436e:	4603      	mov	r3, r0
 8004370:	4402      	add	r2, r0
 8004372:	4293      	cmp	r3, r2
 8004374:	d100      	bne.n	8004378 <memset+0xa>
 8004376:	4770      	bx	lr
 8004378:	f803 1b01 	strb.w	r1, [r3], #1
 800437c:	e7f9      	b.n	8004372 <memset+0x4>
	...

08004380 <_localeconv_r>:
 8004380:	4800      	ldr	r0, [pc, #0]	; (8004384 <_localeconv_r+0x4>)
 8004382:	4770      	bx	lr
 8004384:	20000158 	.word	0x20000158

08004388 <_close_r>:
 8004388:	b538      	push	{r3, r4, r5, lr}
 800438a:	2300      	movs	r3, #0
 800438c:	4d05      	ldr	r5, [pc, #20]	; (80043a4 <_close_r+0x1c>)
 800438e:	4604      	mov	r4, r0
 8004390:	4608      	mov	r0, r1
 8004392:	602b      	str	r3, [r5, #0]
 8004394:	f7fd f9ee 	bl	8001774 <_close>
 8004398:	1c43      	adds	r3, r0, #1
 800439a:	d102      	bne.n	80043a2 <_close_r+0x1a>
 800439c:	682b      	ldr	r3, [r5, #0]
 800439e:	b103      	cbz	r3, 80043a2 <_close_r+0x1a>
 80043a0:	6023      	str	r3, [r4, #0]
 80043a2:	bd38      	pop	{r3, r4, r5, pc}
 80043a4:	2000043c 	.word	0x2000043c

080043a8 <_lseek_r>:
 80043a8:	b538      	push	{r3, r4, r5, lr}
 80043aa:	4604      	mov	r4, r0
 80043ac:	4608      	mov	r0, r1
 80043ae:	4611      	mov	r1, r2
 80043b0:	2200      	movs	r2, #0
 80043b2:	4d05      	ldr	r5, [pc, #20]	; (80043c8 <_lseek_r+0x20>)
 80043b4:	602a      	str	r2, [r5, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	f7fd fa00 	bl	80017bc <_lseek>
 80043bc:	1c43      	adds	r3, r0, #1
 80043be:	d102      	bne.n	80043c6 <_lseek_r+0x1e>
 80043c0:	682b      	ldr	r3, [r5, #0]
 80043c2:	b103      	cbz	r3, 80043c6 <_lseek_r+0x1e>
 80043c4:	6023      	str	r3, [r4, #0]
 80043c6:	bd38      	pop	{r3, r4, r5, pc}
 80043c8:	2000043c 	.word	0x2000043c

080043cc <_read_r>:
 80043cc:	b538      	push	{r3, r4, r5, lr}
 80043ce:	4604      	mov	r4, r0
 80043d0:	4608      	mov	r0, r1
 80043d2:	4611      	mov	r1, r2
 80043d4:	2200      	movs	r2, #0
 80043d6:	4d05      	ldr	r5, [pc, #20]	; (80043ec <_read_r+0x20>)
 80043d8:	602a      	str	r2, [r5, #0]
 80043da:	461a      	mov	r2, r3
 80043dc:	f7fd f991 	bl	8001702 <_read>
 80043e0:	1c43      	adds	r3, r0, #1
 80043e2:	d102      	bne.n	80043ea <_read_r+0x1e>
 80043e4:	682b      	ldr	r3, [r5, #0]
 80043e6:	b103      	cbz	r3, 80043ea <_read_r+0x1e>
 80043e8:	6023      	str	r3, [r4, #0]
 80043ea:	bd38      	pop	{r3, r4, r5, pc}
 80043ec:	2000043c 	.word	0x2000043c

080043f0 <_write_r>:
 80043f0:	b538      	push	{r3, r4, r5, lr}
 80043f2:	4604      	mov	r4, r0
 80043f4:	4608      	mov	r0, r1
 80043f6:	4611      	mov	r1, r2
 80043f8:	2200      	movs	r2, #0
 80043fa:	4d05      	ldr	r5, [pc, #20]	; (8004410 <_write_r+0x20>)
 80043fc:	602a      	str	r2, [r5, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	f7fd f99c 	bl	800173c <_write>
 8004404:	1c43      	adds	r3, r0, #1
 8004406:	d102      	bne.n	800440e <_write_r+0x1e>
 8004408:	682b      	ldr	r3, [r5, #0]
 800440a:	b103      	cbz	r3, 800440e <_write_r+0x1e>
 800440c:	6023      	str	r3, [r4, #0]
 800440e:	bd38      	pop	{r3, r4, r5, pc}
 8004410:	2000043c 	.word	0x2000043c

08004414 <__errno>:
 8004414:	4b01      	ldr	r3, [pc, #4]	; (800441c <__errno+0x8>)
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	20000064 	.word	0x20000064

08004420 <__libc_init_array>:
 8004420:	b570      	push	{r4, r5, r6, lr}
 8004422:	2600      	movs	r6, #0
 8004424:	4d0c      	ldr	r5, [pc, #48]	; (8004458 <__libc_init_array+0x38>)
 8004426:	4c0d      	ldr	r4, [pc, #52]	; (800445c <__libc_init_array+0x3c>)
 8004428:	1b64      	subs	r4, r4, r5
 800442a:	10a4      	asrs	r4, r4, #2
 800442c:	42a6      	cmp	r6, r4
 800442e:	d109      	bne.n	8004444 <__libc_init_array+0x24>
 8004430:	f002 fd22 	bl	8006e78 <_init>
 8004434:	2600      	movs	r6, #0
 8004436:	4d0a      	ldr	r5, [pc, #40]	; (8004460 <__libc_init_array+0x40>)
 8004438:	4c0a      	ldr	r4, [pc, #40]	; (8004464 <__libc_init_array+0x44>)
 800443a:	1b64      	subs	r4, r4, r5
 800443c:	10a4      	asrs	r4, r4, #2
 800443e:	42a6      	cmp	r6, r4
 8004440:	d105      	bne.n	800444e <__libc_init_array+0x2e>
 8004442:	bd70      	pop	{r4, r5, r6, pc}
 8004444:	f855 3b04 	ldr.w	r3, [r5], #4
 8004448:	4798      	blx	r3
 800444a:	3601      	adds	r6, #1
 800444c:	e7ee      	b.n	800442c <__libc_init_array+0xc>
 800444e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004452:	4798      	blx	r3
 8004454:	3601      	adds	r6, #1
 8004456:	e7f2      	b.n	800443e <__libc_init_array+0x1e>
 8004458:	0800729c 	.word	0x0800729c
 800445c:	0800729c 	.word	0x0800729c
 8004460:	0800729c 	.word	0x0800729c
 8004464:	080072a0 	.word	0x080072a0

08004468 <__retarget_lock_acquire_recursive>:
 8004468:	4770      	bx	lr

0800446a <__retarget_lock_release_recursive>:
 800446a:	4770      	bx	lr

0800446c <memchr>:
 800446c:	4603      	mov	r3, r0
 800446e:	b510      	push	{r4, lr}
 8004470:	b2c9      	uxtb	r1, r1
 8004472:	4402      	add	r2, r0
 8004474:	4293      	cmp	r3, r2
 8004476:	4618      	mov	r0, r3
 8004478:	d101      	bne.n	800447e <memchr+0x12>
 800447a:	2000      	movs	r0, #0
 800447c:	e003      	b.n	8004486 <memchr+0x1a>
 800447e:	7804      	ldrb	r4, [r0, #0]
 8004480:	3301      	adds	r3, #1
 8004482:	428c      	cmp	r4, r1
 8004484:	d1f6      	bne.n	8004474 <memchr+0x8>
 8004486:	bd10      	pop	{r4, pc}

08004488 <quorem>:
 8004488:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448c:	6903      	ldr	r3, [r0, #16]
 800448e:	690c      	ldr	r4, [r1, #16]
 8004490:	4607      	mov	r7, r0
 8004492:	42a3      	cmp	r3, r4
 8004494:	db7f      	blt.n	8004596 <quorem+0x10e>
 8004496:	3c01      	subs	r4, #1
 8004498:	f100 0514 	add.w	r5, r0, #20
 800449c:	f101 0814 	add.w	r8, r1, #20
 80044a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80044a4:	9301      	str	r3, [sp, #4]
 80044a6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80044aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80044ae:	3301      	adds	r3, #1
 80044b0:	429a      	cmp	r2, r3
 80044b2:	fbb2 f6f3 	udiv	r6, r2, r3
 80044b6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80044ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80044be:	d331      	bcc.n	8004524 <quorem+0x9c>
 80044c0:	f04f 0e00 	mov.w	lr, #0
 80044c4:	4640      	mov	r0, r8
 80044c6:	46ac      	mov	ip, r5
 80044c8:	46f2      	mov	sl, lr
 80044ca:	f850 2b04 	ldr.w	r2, [r0], #4
 80044ce:	b293      	uxth	r3, r2
 80044d0:	fb06 e303 	mla	r3, r6, r3, lr
 80044d4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80044d8:	0c1a      	lsrs	r2, r3, #16
 80044da:	b29b      	uxth	r3, r3
 80044dc:	fb06 220e 	mla	r2, r6, lr, r2
 80044e0:	ebaa 0303 	sub.w	r3, sl, r3
 80044e4:	f8dc a000 	ldr.w	sl, [ip]
 80044e8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80044ec:	fa1f fa8a 	uxth.w	sl, sl
 80044f0:	4453      	add	r3, sl
 80044f2:	f8dc a000 	ldr.w	sl, [ip]
 80044f6:	b292      	uxth	r2, r2
 80044f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80044fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004500:	b29b      	uxth	r3, r3
 8004502:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004506:	4581      	cmp	r9, r0
 8004508:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800450c:	f84c 3b04 	str.w	r3, [ip], #4
 8004510:	d2db      	bcs.n	80044ca <quorem+0x42>
 8004512:	f855 300b 	ldr.w	r3, [r5, fp]
 8004516:	b92b      	cbnz	r3, 8004524 <quorem+0x9c>
 8004518:	9b01      	ldr	r3, [sp, #4]
 800451a:	3b04      	subs	r3, #4
 800451c:	429d      	cmp	r5, r3
 800451e:	461a      	mov	r2, r3
 8004520:	d32d      	bcc.n	800457e <quorem+0xf6>
 8004522:	613c      	str	r4, [r7, #16]
 8004524:	4638      	mov	r0, r7
 8004526:	f001 f995 	bl	8005854 <__mcmp>
 800452a:	2800      	cmp	r0, #0
 800452c:	db23      	blt.n	8004576 <quorem+0xee>
 800452e:	4629      	mov	r1, r5
 8004530:	2000      	movs	r0, #0
 8004532:	3601      	adds	r6, #1
 8004534:	f858 2b04 	ldr.w	r2, [r8], #4
 8004538:	f8d1 c000 	ldr.w	ip, [r1]
 800453c:	b293      	uxth	r3, r2
 800453e:	1ac3      	subs	r3, r0, r3
 8004540:	0c12      	lsrs	r2, r2, #16
 8004542:	fa1f f08c 	uxth.w	r0, ip
 8004546:	4403      	add	r3, r0
 8004548:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800454c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004550:	b29b      	uxth	r3, r3
 8004552:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004556:	45c1      	cmp	r9, r8
 8004558:	ea4f 4022 	mov.w	r0, r2, asr #16
 800455c:	f841 3b04 	str.w	r3, [r1], #4
 8004560:	d2e8      	bcs.n	8004534 <quorem+0xac>
 8004562:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004566:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800456a:	b922      	cbnz	r2, 8004576 <quorem+0xee>
 800456c:	3b04      	subs	r3, #4
 800456e:	429d      	cmp	r5, r3
 8004570:	461a      	mov	r2, r3
 8004572:	d30a      	bcc.n	800458a <quorem+0x102>
 8004574:	613c      	str	r4, [r7, #16]
 8004576:	4630      	mov	r0, r6
 8004578:	b003      	add	sp, #12
 800457a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800457e:	6812      	ldr	r2, [r2, #0]
 8004580:	3b04      	subs	r3, #4
 8004582:	2a00      	cmp	r2, #0
 8004584:	d1cd      	bne.n	8004522 <quorem+0x9a>
 8004586:	3c01      	subs	r4, #1
 8004588:	e7c8      	b.n	800451c <quorem+0x94>
 800458a:	6812      	ldr	r2, [r2, #0]
 800458c:	3b04      	subs	r3, #4
 800458e:	2a00      	cmp	r2, #0
 8004590:	d1f0      	bne.n	8004574 <quorem+0xec>
 8004592:	3c01      	subs	r4, #1
 8004594:	e7eb      	b.n	800456e <quorem+0xe6>
 8004596:	2000      	movs	r0, #0
 8004598:	e7ee      	b.n	8004578 <quorem+0xf0>
 800459a:	0000      	movs	r0, r0
 800459c:	0000      	movs	r0, r0
	...

080045a0 <_dtoa_r>:
 80045a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a4:	4616      	mov	r6, r2
 80045a6:	461f      	mov	r7, r3
 80045a8:	69c4      	ldr	r4, [r0, #28]
 80045aa:	b099      	sub	sp, #100	; 0x64
 80045ac:	4605      	mov	r5, r0
 80045ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80045b2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80045b6:	b974      	cbnz	r4, 80045d6 <_dtoa_r+0x36>
 80045b8:	2010      	movs	r0, #16
 80045ba:	f000 fe1d 	bl	80051f8 <malloc>
 80045be:	4602      	mov	r2, r0
 80045c0:	61e8      	str	r0, [r5, #28]
 80045c2:	b920      	cbnz	r0, 80045ce <_dtoa_r+0x2e>
 80045c4:	21ef      	movs	r1, #239	; 0xef
 80045c6:	4bac      	ldr	r3, [pc, #688]	; (8004878 <_dtoa_r+0x2d8>)
 80045c8:	48ac      	ldr	r0, [pc, #688]	; (800487c <_dtoa_r+0x2dc>)
 80045ca:	f001 fc7b 	bl	8005ec4 <__assert_func>
 80045ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80045d2:	6004      	str	r4, [r0, #0]
 80045d4:	60c4      	str	r4, [r0, #12]
 80045d6:	69eb      	ldr	r3, [r5, #28]
 80045d8:	6819      	ldr	r1, [r3, #0]
 80045da:	b151      	cbz	r1, 80045f2 <_dtoa_r+0x52>
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	2301      	movs	r3, #1
 80045e0:	4093      	lsls	r3, r2
 80045e2:	604a      	str	r2, [r1, #4]
 80045e4:	608b      	str	r3, [r1, #8]
 80045e6:	4628      	mov	r0, r5
 80045e8:	f000 fefa 	bl	80053e0 <_Bfree>
 80045ec:	2200      	movs	r2, #0
 80045ee:	69eb      	ldr	r3, [r5, #28]
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	1e3b      	subs	r3, r7, #0
 80045f4:	bfaf      	iteee	ge
 80045f6:	2300      	movge	r3, #0
 80045f8:	2201      	movlt	r2, #1
 80045fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80045fe:	9305      	strlt	r3, [sp, #20]
 8004600:	bfa8      	it	ge
 8004602:	f8c8 3000 	strge.w	r3, [r8]
 8004606:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800460a:	4b9d      	ldr	r3, [pc, #628]	; (8004880 <_dtoa_r+0x2e0>)
 800460c:	bfb8      	it	lt
 800460e:	f8c8 2000 	strlt.w	r2, [r8]
 8004612:	ea33 0309 	bics.w	r3, r3, r9
 8004616:	d119      	bne.n	800464c <_dtoa_r+0xac>
 8004618:	f242 730f 	movw	r3, #9999	; 0x270f
 800461c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004624:	4333      	orrs	r3, r6
 8004626:	f000 8589 	beq.w	800513c <_dtoa_r+0xb9c>
 800462a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800462c:	b953      	cbnz	r3, 8004644 <_dtoa_r+0xa4>
 800462e:	4b95      	ldr	r3, [pc, #596]	; (8004884 <_dtoa_r+0x2e4>)
 8004630:	e023      	b.n	800467a <_dtoa_r+0xda>
 8004632:	4b95      	ldr	r3, [pc, #596]	; (8004888 <_dtoa_r+0x2e8>)
 8004634:	9303      	str	r3, [sp, #12]
 8004636:	3308      	adds	r3, #8
 8004638:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	9803      	ldr	r0, [sp, #12]
 800463e:	b019      	add	sp, #100	; 0x64
 8004640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004644:	4b8f      	ldr	r3, [pc, #572]	; (8004884 <_dtoa_r+0x2e4>)
 8004646:	9303      	str	r3, [sp, #12]
 8004648:	3303      	adds	r3, #3
 800464a:	e7f5      	b.n	8004638 <_dtoa_r+0x98>
 800464c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004650:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004654:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004658:	2200      	movs	r2, #0
 800465a:	2300      	movs	r3, #0
 800465c:	f7fc f9a4 	bl	80009a8 <__aeabi_dcmpeq>
 8004660:	4680      	mov	r8, r0
 8004662:	b160      	cbz	r0, 800467e <_dtoa_r+0xde>
 8004664:	2301      	movs	r3, #1
 8004666:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 8562 	beq.w	8005136 <_dtoa_r+0xb96>
 8004672:	4b86      	ldr	r3, [pc, #536]	; (800488c <_dtoa_r+0x2ec>)
 8004674:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	3b01      	subs	r3, #1
 800467a:	9303      	str	r3, [sp, #12]
 800467c:	e7de      	b.n	800463c <_dtoa_r+0x9c>
 800467e:	ab16      	add	r3, sp, #88	; 0x58
 8004680:	9301      	str	r3, [sp, #4]
 8004682:	ab17      	add	r3, sp, #92	; 0x5c
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	4628      	mov	r0, r5
 8004688:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800468c:	f001 f98a 	bl	80059a4 <__d2b>
 8004690:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004694:	4682      	mov	sl, r0
 8004696:	2c00      	cmp	r4, #0
 8004698:	d07e      	beq.n	8004798 <_dtoa_r+0x1f8>
 800469a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800469e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046a0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80046a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046a8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80046ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80046b0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80046b4:	4619      	mov	r1, r3
 80046b6:	2200      	movs	r2, #0
 80046b8:	4b75      	ldr	r3, [pc, #468]	; (8004890 <_dtoa_r+0x2f0>)
 80046ba:	f7fb fd55 	bl	8000168 <__aeabi_dsub>
 80046be:	a368      	add	r3, pc, #416	; (adr r3, 8004860 <_dtoa_r+0x2c0>)
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	f7fb ff08 	bl	80004d8 <__aeabi_dmul>
 80046c8:	a367      	add	r3, pc, #412	; (adr r3, 8004868 <_dtoa_r+0x2c8>)
 80046ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ce:	f7fb fd4d 	bl	800016c <__adddf3>
 80046d2:	4606      	mov	r6, r0
 80046d4:	4620      	mov	r0, r4
 80046d6:	460f      	mov	r7, r1
 80046d8:	f7fb fe94 	bl	8000404 <__aeabi_i2d>
 80046dc:	a364      	add	r3, pc, #400	; (adr r3, 8004870 <_dtoa_r+0x2d0>)
 80046de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e2:	f7fb fef9 	bl	80004d8 <__aeabi_dmul>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	4630      	mov	r0, r6
 80046ec:	4639      	mov	r1, r7
 80046ee:	f7fb fd3d 	bl	800016c <__adddf3>
 80046f2:	4606      	mov	r6, r0
 80046f4:	460f      	mov	r7, r1
 80046f6:	f7fc f99f 	bl	8000a38 <__aeabi_d2iz>
 80046fa:	2200      	movs	r2, #0
 80046fc:	4683      	mov	fp, r0
 80046fe:	2300      	movs	r3, #0
 8004700:	4630      	mov	r0, r6
 8004702:	4639      	mov	r1, r7
 8004704:	f7fc f95a 	bl	80009bc <__aeabi_dcmplt>
 8004708:	b148      	cbz	r0, 800471e <_dtoa_r+0x17e>
 800470a:	4658      	mov	r0, fp
 800470c:	f7fb fe7a 	bl	8000404 <__aeabi_i2d>
 8004710:	4632      	mov	r2, r6
 8004712:	463b      	mov	r3, r7
 8004714:	f7fc f948 	bl	80009a8 <__aeabi_dcmpeq>
 8004718:	b908      	cbnz	r0, 800471e <_dtoa_r+0x17e>
 800471a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800471e:	f1bb 0f16 	cmp.w	fp, #22
 8004722:	d857      	bhi.n	80047d4 <_dtoa_r+0x234>
 8004724:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004728:	4b5a      	ldr	r3, [pc, #360]	; (8004894 <_dtoa_r+0x2f4>)
 800472a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800472e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004732:	f7fc f943 	bl	80009bc <__aeabi_dcmplt>
 8004736:	2800      	cmp	r0, #0
 8004738:	d04e      	beq.n	80047d8 <_dtoa_r+0x238>
 800473a:	2300      	movs	r3, #0
 800473c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004740:	930f      	str	r3, [sp, #60]	; 0x3c
 8004742:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004744:	1b1b      	subs	r3, r3, r4
 8004746:	1e5a      	subs	r2, r3, #1
 8004748:	bf46      	itte	mi
 800474a:	f1c3 0901 	rsbmi	r9, r3, #1
 800474e:	2300      	movmi	r3, #0
 8004750:	f04f 0900 	movpl.w	r9, #0
 8004754:	9209      	str	r2, [sp, #36]	; 0x24
 8004756:	bf48      	it	mi
 8004758:	9309      	strmi	r3, [sp, #36]	; 0x24
 800475a:	f1bb 0f00 	cmp.w	fp, #0
 800475e:	db3d      	blt.n	80047dc <_dtoa_r+0x23c>
 8004760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004762:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8004766:	445b      	add	r3, fp
 8004768:	9309      	str	r3, [sp, #36]	; 0x24
 800476a:	2300      	movs	r3, #0
 800476c:	930a      	str	r3, [sp, #40]	; 0x28
 800476e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004770:	2b09      	cmp	r3, #9
 8004772:	d867      	bhi.n	8004844 <_dtoa_r+0x2a4>
 8004774:	2b05      	cmp	r3, #5
 8004776:	bfc4      	itt	gt
 8004778:	3b04      	subgt	r3, #4
 800477a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800477c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800477e:	bfc8      	it	gt
 8004780:	2400      	movgt	r4, #0
 8004782:	f1a3 0302 	sub.w	r3, r3, #2
 8004786:	bfd8      	it	le
 8004788:	2401      	movle	r4, #1
 800478a:	2b03      	cmp	r3, #3
 800478c:	f200 8086 	bhi.w	800489c <_dtoa_r+0x2fc>
 8004790:	e8df f003 	tbb	[pc, r3]
 8004794:	5637392c 	.word	0x5637392c
 8004798:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800479c:	441c      	add	r4, r3
 800479e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80047a2:	2b20      	cmp	r3, #32
 80047a4:	bfc1      	itttt	gt
 80047a6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80047aa:	fa09 f903 	lslgt.w	r9, r9, r3
 80047ae:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80047b2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80047b6:	bfd6      	itet	le
 80047b8:	f1c3 0320 	rsble	r3, r3, #32
 80047bc:	ea49 0003 	orrgt.w	r0, r9, r3
 80047c0:	fa06 f003 	lslle.w	r0, r6, r3
 80047c4:	f7fb fe0e 	bl	80003e4 <__aeabi_ui2d>
 80047c8:	2201      	movs	r2, #1
 80047ca:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80047ce:	3c01      	subs	r4, #1
 80047d0:	9213      	str	r2, [sp, #76]	; 0x4c
 80047d2:	e76f      	b.n	80046b4 <_dtoa_r+0x114>
 80047d4:	2301      	movs	r3, #1
 80047d6:	e7b3      	b.n	8004740 <_dtoa_r+0x1a0>
 80047d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80047da:	e7b2      	b.n	8004742 <_dtoa_r+0x1a2>
 80047dc:	f1cb 0300 	rsb	r3, fp, #0
 80047e0:	930a      	str	r3, [sp, #40]	; 0x28
 80047e2:	2300      	movs	r3, #0
 80047e4:	eba9 090b 	sub.w	r9, r9, fp
 80047e8:	930e      	str	r3, [sp, #56]	; 0x38
 80047ea:	e7c0      	b.n	800476e <_dtoa_r+0x1ce>
 80047ec:	2300      	movs	r3, #0
 80047ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80047f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	dc55      	bgt.n	80048a2 <_dtoa_r+0x302>
 80047f6:	2301      	movs	r3, #1
 80047f8:	461a      	mov	r2, r3
 80047fa:	9306      	str	r3, [sp, #24]
 80047fc:	9308      	str	r3, [sp, #32]
 80047fe:	9223      	str	r2, [sp, #140]	; 0x8c
 8004800:	e00b      	b.n	800481a <_dtoa_r+0x27a>
 8004802:	2301      	movs	r3, #1
 8004804:	e7f3      	b.n	80047ee <_dtoa_r+0x24e>
 8004806:	2300      	movs	r3, #0
 8004808:	930b      	str	r3, [sp, #44]	; 0x2c
 800480a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800480c:	445b      	add	r3, fp
 800480e:	9306      	str	r3, [sp, #24]
 8004810:	3301      	adds	r3, #1
 8004812:	2b01      	cmp	r3, #1
 8004814:	9308      	str	r3, [sp, #32]
 8004816:	bfb8      	it	lt
 8004818:	2301      	movlt	r3, #1
 800481a:	2100      	movs	r1, #0
 800481c:	2204      	movs	r2, #4
 800481e:	69e8      	ldr	r0, [r5, #28]
 8004820:	f102 0614 	add.w	r6, r2, #20
 8004824:	429e      	cmp	r6, r3
 8004826:	d940      	bls.n	80048aa <_dtoa_r+0x30a>
 8004828:	6041      	str	r1, [r0, #4]
 800482a:	4628      	mov	r0, r5
 800482c:	f000 fd98 	bl	8005360 <_Balloc>
 8004830:	9003      	str	r0, [sp, #12]
 8004832:	2800      	cmp	r0, #0
 8004834:	d13c      	bne.n	80048b0 <_dtoa_r+0x310>
 8004836:	4602      	mov	r2, r0
 8004838:	f240 11af 	movw	r1, #431	; 0x1af
 800483c:	4b16      	ldr	r3, [pc, #88]	; (8004898 <_dtoa_r+0x2f8>)
 800483e:	e6c3      	b.n	80045c8 <_dtoa_r+0x28>
 8004840:	2301      	movs	r3, #1
 8004842:	e7e1      	b.n	8004808 <_dtoa_r+0x268>
 8004844:	2401      	movs	r4, #1
 8004846:	2300      	movs	r3, #0
 8004848:	940b      	str	r4, [sp, #44]	; 0x2c
 800484a:	9322      	str	r3, [sp, #136]	; 0x88
 800484c:	f04f 33ff 	mov.w	r3, #4294967295
 8004850:	2200      	movs	r2, #0
 8004852:	9306      	str	r3, [sp, #24]
 8004854:	9308      	str	r3, [sp, #32]
 8004856:	2312      	movs	r3, #18
 8004858:	e7d1      	b.n	80047fe <_dtoa_r+0x25e>
 800485a:	bf00      	nop
 800485c:	f3af 8000 	nop.w
 8004860:	636f4361 	.word	0x636f4361
 8004864:	3fd287a7 	.word	0x3fd287a7
 8004868:	8b60c8b3 	.word	0x8b60c8b3
 800486c:	3fc68a28 	.word	0x3fc68a28
 8004870:	509f79fb 	.word	0x509f79fb
 8004874:	3fd34413 	.word	0x3fd34413
 8004878:	08006f57 	.word	0x08006f57
 800487c:	08006f6e 	.word	0x08006f6e
 8004880:	7ff00000 	.word	0x7ff00000
 8004884:	08006f53 	.word	0x08006f53
 8004888:	08006f4a 	.word	0x08006f4a
 800488c:	08006f27 	.word	0x08006f27
 8004890:	3ff80000 	.word	0x3ff80000
 8004894:	08007058 	.word	0x08007058
 8004898:	08006fc6 	.word	0x08006fc6
 800489c:	2301      	movs	r3, #1
 800489e:	930b      	str	r3, [sp, #44]	; 0x2c
 80048a0:	e7d4      	b.n	800484c <_dtoa_r+0x2ac>
 80048a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80048a4:	9306      	str	r3, [sp, #24]
 80048a6:	9308      	str	r3, [sp, #32]
 80048a8:	e7b7      	b.n	800481a <_dtoa_r+0x27a>
 80048aa:	3101      	adds	r1, #1
 80048ac:	0052      	lsls	r2, r2, #1
 80048ae:	e7b7      	b.n	8004820 <_dtoa_r+0x280>
 80048b0:	69eb      	ldr	r3, [r5, #28]
 80048b2:	9a03      	ldr	r2, [sp, #12]
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	9b08      	ldr	r3, [sp, #32]
 80048b8:	2b0e      	cmp	r3, #14
 80048ba:	f200 80a8 	bhi.w	8004a0e <_dtoa_r+0x46e>
 80048be:	2c00      	cmp	r4, #0
 80048c0:	f000 80a5 	beq.w	8004a0e <_dtoa_r+0x46e>
 80048c4:	f1bb 0f00 	cmp.w	fp, #0
 80048c8:	dd34      	ble.n	8004934 <_dtoa_r+0x394>
 80048ca:	4b9a      	ldr	r3, [pc, #616]	; (8004b34 <_dtoa_r+0x594>)
 80048cc:	f00b 020f 	and.w	r2, fp, #15
 80048d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80048d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048dc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80048e0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80048e4:	d016      	beq.n	8004914 <_dtoa_r+0x374>
 80048e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80048ea:	4b93      	ldr	r3, [pc, #588]	; (8004b38 <_dtoa_r+0x598>)
 80048ec:	2703      	movs	r7, #3
 80048ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80048f2:	f7fb ff1b 	bl	800072c <__aeabi_ddiv>
 80048f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048fa:	f004 040f 	and.w	r4, r4, #15
 80048fe:	4e8e      	ldr	r6, [pc, #568]	; (8004b38 <_dtoa_r+0x598>)
 8004900:	b954      	cbnz	r4, 8004918 <_dtoa_r+0x378>
 8004902:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004906:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800490a:	f7fb ff0f 	bl	800072c <__aeabi_ddiv>
 800490e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004912:	e029      	b.n	8004968 <_dtoa_r+0x3c8>
 8004914:	2702      	movs	r7, #2
 8004916:	e7f2      	b.n	80048fe <_dtoa_r+0x35e>
 8004918:	07e1      	lsls	r1, r4, #31
 800491a:	d508      	bpl.n	800492e <_dtoa_r+0x38e>
 800491c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004920:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004924:	f7fb fdd8 	bl	80004d8 <__aeabi_dmul>
 8004928:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800492c:	3701      	adds	r7, #1
 800492e:	1064      	asrs	r4, r4, #1
 8004930:	3608      	adds	r6, #8
 8004932:	e7e5      	b.n	8004900 <_dtoa_r+0x360>
 8004934:	f000 80a5 	beq.w	8004a82 <_dtoa_r+0x4e2>
 8004938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800493c:	f1cb 0400 	rsb	r4, fp, #0
 8004940:	4b7c      	ldr	r3, [pc, #496]	; (8004b34 <_dtoa_r+0x594>)
 8004942:	f004 020f 	and.w	r2, r4, #15
 8004946:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494e:	f7fb fdc3 	bl	80004d8 <__aeabi_dmul>
 8004952:	2702      	movs	r7, #2
 8004954:	2300      	movs	r3, #0
 8004956:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800495a:	4e77      	ldr	r6, [pc, #476]	; (8004b38 <_dtoa_r+0x598>)
 800495c:	1124      	asrs	r4, r4, #4
 800495e:	2c00      	cmp	r4, #0
 8004960:	f040 8084 	bne.w	8004a6c <_dtoa_r+0x4cc>
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1d2      	bne.n	800490e <_dtoa_r+0x36e>
 8004968:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800496c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 8087 	beq.w	8004a86 <_dtoa_r+0x4e6>
 8004978:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800497c:	2200      	movs	r2, #0
 800497e:	4b6f      	ldr	r3, [pc, #444]	; (8004b3c <_dtoa_r+0x59c>)
 8004980:	f7fc f81c 	bl	80009bc <__aeabi_dcmplt>
 8004984:	2800      	cmp	r0, #0
 8004986:	d07e      	beq.n	8004a86 <_dtoa_r+0x4e6>
 8004988:	9b08      	ldr	r3, [sp, #32]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d07b      	beq.n	8004a86 <_dtoa_r+0x4e6>
 800498e:	9b06      	ldr	r3, [sp, #24]
 8004990:	2b00      	cmp	r3, #0
 8004992:	dd38      	ble.n	8004a06 <_dtoa_r+0x466>
 8004994:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004998:	2200      	movs	r2, #0
 800499a:	4b69      	ldr	r3, [pc, #420]	; (8004b40 <_dtoa_r+0x5a0>)
 800499c:	f7fb fd9c 	bl	80004d8 <__aeabi_dmul>
 80049a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049a4:	9c06      	ldr	r4, [sp, #24]
 80049a6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80049aa:	3701      	adds	r7, #1
 80049ac:	4638      	mov	r0, r7
 80049ae:	f7fb fd29 	bl	8000404 <__aeabi_i2d>
 80049b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049b6:	f7fb fd8f 	bl	80004d8 <__aeabi_dmul>
 80049ba:	2200      	movs	r2, #0
 80049bc:	4b61      	ldr	r3, [pc, #388]	; (8004b44 <_dtoa_r+0x5a4>)
 80049be:	f7fb fbd5 	bl	800016c <__adddf3>
 80049c2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80049c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80049ca:	9611      	str	r6, [sp, #68]	; 0x44
 80049cc:	2c00      	cmp	r4, #0
 80049ce:	d15d      	bne.n	8004a8c <_dtoa_r+0x4ec>
 80049d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049d4:	2200      	movs	r2, #0
 80049d6:	4b5c      	ldr	r3, [pc, #368]	; (8004b48 <_dtoa_r+0x5a8>)
 80049d8:	f7fb fbc6 	bl	8000168 <__aeabi_dsub>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80049e4:	4633      	mov	r3, r6
 80049e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80049e8:	f7fc f806 	bl	80009f8 <__aeabi_dcmpgt>
 80049ec:	2800      	cmp	r0, #0
 80049ee:	f040 8295 	bne.w	8004f1c <_dtoa_r+0x97c>
 80049f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80049f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80049fc:	f7fb ffde 	bl	80009bc <__aeabi_dcmplt>
 8004a00:	2800      	cmp	r0, #0
 8004a02:	f040 8289 	bne.w	8004f18 <_dtoa_r+0x978>
 8004a06:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004a0a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004a0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f2c0 8151 	blt.w	8004cb8 <_dtoa_r+0x718>
 8004a16:	f1bb 0f0e 	cmp.w	fp, #14
 8004a1a:	f300 814d 	bgt.w	8004cb8 <_dtoa_r+0x718>
 8004a1e:	4b45      	ldr	r3, [pc, #276]	; (8004b34 <_dtoa_r+0x594>)
 8004a20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004a24:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a28:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004a2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f280 80da 	bge.w	8004be8 <_dtoa_r+0x648>
 8004a34:	9b08      	ldr	r3, [sp, #32]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f300 80d6 	bgt.w	8004be8 <_dtoa_r+0x648>
 8004a3c:	f040 826b 	bne.w	8004f16 <_dtoa_r+0x976>
 8004a40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a44:	2200      	movs	r2, #0
 8004a46:	4b40      	ldr	r3, [pc, #256]	; (8004b48 <_dtoa_r+0x5a8>)
 8004a48:	f7fb fd46 	bl	80004d8 <__aeabi_dmul>
 8004a4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a50:	f7fb ffc8 	bl	80009e4 <__aeabi_dcmpge>
 8004a54:	9c08      	ldr	r4, [sp, #32]
 8004a56:	4626      	mov	r6, r4
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	f040 8241 	bne.w	8004ee0 <_dtoa_r+0x940>
 8004a5e:	2331      	movs	r3, #49	; 0x31
 8004a60:	9f03      	ldr	r7, [sp, #12]
 8004a62:	f10b 0b01 	add.w	fp, fp, #1
 8004a66:	f807 3b01 	strb.w	r3, [r7], #1
 8004a6a:	e23d      	b.n	8004ee8 <_dtoa_r+0x948>
 8004a6c:	07e2      	lsls	r2, r4, #31
 8004a6e:	d505      	bpl.n	8004a7c <_dtoa_r+0x4dc>
 8004a70:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004a74:	f7fb fd30 	bl	80004d8 <__aeabi_dmul>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	3701      	adds	r7, #1
 8004a7c:	1064      	asrs	r4, r4, #1
 8004a7e:	3608      	adds	r6, #8
 8004a80:	e76d      	b.n	800495e <_dtoa_r+0x3be>
 8004a82:	2702      	movs	r7, #2
 8004a84:	e770      	b.n	8004968 <_dtoa_r+0x3c8>
 8004a86:	46d8      	mov	r8, fp
 8004a88:	9c08      	ldr	r4, [sp, #32]
 8004a8a:	e78f      	b.n	80049ac <_dtoa_r+0x40c>
 8004a8c:	9903      	ldr	r1, [sp, #12]
 8004a8e:	4b29      	ldr	r3, [pc, #164]	; (8004b34 <_dtoa_r+0x594>)
 8004a90:	4421      	add	r1, r4
 8004a92:	9112      	str	r1, [sp, #72]	; 0x48
 8004a94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a96:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004a9a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004a9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004aa2:	2900      	cmp	r1, #0
 8004aa4:	d054      	beq.n	8004b50 <_dtoa_r+0x5b0>
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	4928      	ldr	r1, [pc, #160]	; (8004b4c <_dtoa_r+0x5ac>)
 8004aaa:	f7fb fe3f 	bl	800072c <__aeabi_ddiv>
 8004aae:	463b      	mov	r3, r7
 8004ab0:	4632      	mov	r2, r6
 8004ab2:	f7fb fb59 	bl	8000168 <__aeabi_dsub>
 8004ab6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004aba:	9f03      	ldr	r7, [sp, #12]
 8004abc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ac0:	f7fb ffba 	bl	8000a38 <__aeabi_d2iz>
 8004ac4:	4604      	mov	r4, r0
 8004ac6:	f7fb fc9d 	bl	8000404 <__aeabi_i2d>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ad2:	f7fb fb49 	bl	8000168 <__aeabi_dsub>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	3430      	adds	r4, #48	; 0x30
 8004adc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ae0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ae4:	f807 4b01 	strb.w	r4, [r7], #1
 8004ae8:	f7fb ff68 	bl	80009bc <__aeabi_dcmplt>
 8004aec:	2800      	cmp	r0, #0
 8004aee:	d173      	bne.n	8004bd8 <_dtoa_r+0x638>
 8004af0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004af4:	2000      	movs	r0, #0
 8004af6:	4911      	ldr	r1, [pc, #68]	; (8004b3c <_dtoa_r+0x59c>)
 8004af8:	f7fb fb36 	bl	8000168 <__aeabi_dsub>
 8004afc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004b00:	f7fb ff5c 	bl	80009bc <__aeabi_dcmplt>
 8004b04:	2800      	cmp	r0, #0
 8004b06:	f040 80b6 	bne.w	8004c76 <_dtoa_r+0x6d6>
 8004b0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004b0c:	429f      	cmp	r7, r3
 8004b0e:	f43f af7a 	beq.w	8004a06 <_dtoa_r+0x466>
 8004b12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b16:	2200      	movs	r2, #0
 8004b18:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <_dtoa_r+0x5a0>)
 8004b1a:	f7fb fcdd 	bl	80004d8 <__aeabi_dmul>
 8004b1e:	2200      	movs	r2, #0
 8004b20:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004b24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b28:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <_dtoa_r+0x5a0>)
 8004b2a:	f7fb fcd5 	bl	80004d8 <__aeabi_dmul>
 8004b2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b32:	e7c3      	b.n	8004abc <_dtoa_r+0x51c>
 8004b34:	08007058 	.word	0x08007058
 8004b38:	08007030 	.word	0x08007030
 8004b3c:	3ff00000 	.word	0x3ff00000
 8004b40:	40240000 	.word	0x40240000
 8004b44:	401c0000 	.word	0x401c0000
 8004b48:	40140000 	.word	0x40140000
 8004b4c:	3fe00000 	.word	0x3fe00000
 8004b50:	4630      	mov	r0, r6
 8004b52:	4639      	mov	r1, r7
 8004b54:	f7fb fcc0 	bl	80004d8 <__aeabi_dmul>
 8004b58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004b5a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004b5e:	9c03      	ldr	r4, [sp, #12]
 8004b60:	9314      	str	r3, [sp, #80]	; 0x50
 8004b62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b66:	f7fb ff67 	bl	8000a38 <__aeabi_d2iz>
 8004b6a:	9015      	str	r0, [sp, #84]	; 0x54
 8004b6c:	f7fb fc4a 	bl	8000404 <__aeabi_i2d>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b78:	f7fb faf6 	bl	8000168 <__aeabi_dsub>
 8004b7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b7e:	4606      	mov	r6, r0
 8004b80:	3330      	adds	r3, #48	; 0x30
 8004b82:	f804 3b01 	strb.w	r3, [r4], #1
 8004b86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004b88:	460f      	mov	r7, r1
 8004b8a:	429c      	cmp	r4, r3
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	d124      	bne.n	8004bdc <_dtoa_r+0x63c>
 8004b92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b96:	4baf      	ldr	r3, [pc, #700]	; (8004e54 <_dtoa_r+0x8b4>)
 8004b98:	f7fb fae8 	bl	800016c <__adddf3>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	4639      	mov	r1, r7
 8004ba4:	f7fb ff28 	bl	80009f8 <__aeabi_dcmpgt>
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	d163      	bne.n	8004c74 <_dtoa_r+0x6d4>
 8004bac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	49a8      	ldr	r1, [pc, #672]	; (8004e54 <_dtoa_r+0x8b4>)
 8004bb4:	f7fb fad8 	bl	8000168 <__aeabi_dsub>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	4639      	mov	r1, r7
 8004bc0:	f7fb fefc 	bl	80009bc <__aeabi_dcmplt>
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	f43f af1e 	beq.w	8004a06 <_dtoa_r+0x466>
 8004bca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004bcc:	1e7b      	subs	r3, r7, #1
 8004bce:	9314      	str	r3, [sp, #80]	; 0x50
 8004bd0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004bd4:	2b30      	cmp	r3, #48	; 0x30
 8004bd6:	d0f8      	beq.n	8004bca <_dtoa_r+0x62a>
 8004bd8:	46c3      	mov	fp, r8
 8004bda:	e03b      	b.n	8004c54 <_dtoa_r+0x6b4>
 8004bdc:	4b9e      	ldr	r3, [pc, #632]	; (8004e58 <_dtoa_r+0x8b8>)
 8004bde:	f7fb fc7b 	bl	80004d8 <__aeabi_dmul>
 8004be2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004be6:	e7bc      	b.n	8004b62 <_dtoa_r+0x5c2>
 8004be8:	9f03      	ldr	r7, [sp, #12]
 8004bea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004bee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004bf2:	4640      	mov	r0, r8
 8004bf4:	4649      	mov	r1, r9
 8004bf6:	f7fb fd99 	bl	800072c <__aeabi_ddiv>
 8004bfa:	f7fb ff1d 	bl	8000a38 <__aeabi_d2iz>
 8004bfe:	4604      	mov	r4, r0
 8004c00:	f7fb fc00 	bl	8000404 <__aeabi_i2d>
 8004c04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c08:	f7fb fc66 	bl	80004d8 <__aeabi_dmul>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4640      	mov	r0, r8
 8004c12:	4649      	mov	r1, r9
 8004c14:	f7fb faa8 	bl	8000168 <__aeabi_dsub>
 8004c18:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004c1c:	f807 6b01 	strb.w	r6, [r7], #1
 8004c20:	9e03      	ldr	r6, [sp, #12]
 8004c22:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004c26:	1bbe      	subs	r6, r7, r6
 8004c28:	45b4      	cmp	ip, r6
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	d136      	bne.n	8004c9e <_dtoa_r+0x6fe>
 8004c30:	f7fb fa9c 	bl	800016c <__adddf3>
 8004c34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c38:	4680      	mov	r8, r0
 8004c3a:	4689      	mov	r9, r1
 8004c3c:	f7fb fedc 	bl	80009f8 <__aeabi_dcmpgt>
 8004c40:	bb58      	cbnz	r0, 8004c9a <_dtoa_r+0x6fa>
 8004c42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c46:	4640      	mov	r0, r8
 8004c48:	4649      	mov	r1, r9
 8004c4a:	f7fb fead 	bl	80009a8 <__aeabi_dcmpeq>
 8004c4e:	b108      	cbz	r0, 8004c54 <_dtoa_r+0x6b4>
 8004c50:	07e3      	lsls	r3, r4, #31
 8004c52:	d422      	bmi.n	8004c9a <_dtoa_r+0x6fa>
 8004c54:	4651      	mov	r1, sl
 8004c56:	4628      	mov	r0, r5
 8004c58:	f000 fbc2 	bl	80053e0 <_Bfree>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004c60:	703b      	strb	r3, [r7, #0]
 8004c62:	f10b 0301 	add.w	r3, fp, #1
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f43f ace6 	beq.w	800463c <_dtoa_r+0x9c>
 8004c70:	601f      	str	r7, [r3, #0]
 8004c72:	e4e3      	b.n	800463c <_dtoa_r+0x9c>
 8004c74:	4627      	mov	r7, r4
 8004c76:	463b      	mov	r3, r7
 8004c78:	461f      	mov	r7, r3
 8004c7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c7e:	2a39      	cmp	r2, #57	; 0x39
 8004c80:	d107      	bne.n	8004c92 <_dtoa_r+0x6f2>
 8004c82:	9a03      	ldr	r2, [sp, #12]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d1f7      	bne.n	8004c78 <_dtoa_r+0x6d8>
 8004c88:	2230      	movs	r2, #48	; 0x30
 8004c8a:	9903      	ldr	r1, [sp, #12]
 8004c8c:	f108 0801 	add.w	r8, r8, #1
 8004c90:	700a      	strb	r2, [r1, #0]
 8004c92:	781a      	ldrb	r2, [r3, #0]
 8004c94:	3201      	adds	r2, #1
 8004c96:	701a      	strb	r2, [r3, #0]
 8004c98:	e79e      	b.n	8004bd8 <_dtoa_r+0x638>
 8004c9a:	46d8      	mov	r8, fp
 8004c9c:	e7eb      	b.n	8004c76 <_dtoa_r+0x6d6>
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	4b6d      	ldr	r3, [pc, #436]	; (8004e58 <_dtoa_r+0x8b8>)
 8004ca2:	f7fb fc19 	bl	80004d8 <__aeabi_dmul>
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2300      	movs	r3, #0
 8004caa:	4680      	mov	r8, r0
 8004cac:	4689      	mov	r9, r1
 8004cae:	f7fb fe7b 	bl	80009a8 <__aeabi_dcmpeq>
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	d09b      	beq.n	8004bee <_dtoa_r+0x64e>
 8004cb6:	e7cd      	b.n	8004c54 <_dtoa_r+0x6b4>
 8004cb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004cba:	2a00      	cmp	r2, #0
 8004cbc:	f000 80c4 	beq.w	8004e48 <_dtoa_r+0x8a8>
 8004cc0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004cc2:	2a01      	cmp	r2, #1
 8004cc4:	f300 80a8 	bgt.w	8004e18 <_dtoa_r+0x878>
 8004cc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004cca:	2a00      	cmp	r2, #0
 8004ccc:	f000 80a0 	beq.w	8004e10 <_dtoa_r+0x870>
 8004cd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004cd4:	464f      	mov	r7, r9
 8004cd6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004cd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cda:	2101      	movs	r1, #1
 8004cdc:	441a      	add	r2, r3
 8004cde:	4628      	mov	r0, r5
 8004ce0:	4499      	add	r9, r3
 8004ce2:	9209      	str	r2, [sp, #36]	; 0x24
 8004ce4:	f000 fc32 	bl	800554c <__i2b>
 8004ce8:	4606      	mov	r6, r0
 8004cea:	b15f      	cbz	r7, 8004d04 <_dtoa_r+0x764>
 8004cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	dd08      	ble.n	8004d04 <_dtoa_r+0x764>
 8004cf2:	42bb      	cmp	r3, r7
 8004cf4:	bfa8      	it	ge
 8004cf6:	463b      	movge	r3, r7
 8004cf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cfa:	eba9 0903 	sub.w	r9, r9, r3
 8004cfe:	1aff      	subs	r7, r7, r3
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	9309      	str	r3, [sp, #36]	; 0x24
 8004d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d06:	b1f3      	cbz	r3, 8004d46 <_dtoa_r+0x7a6>
 8004d08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 80a0 	beq.w	8004e50 <_dtoa_r+0x8b0>
 8004d10:	2c00      	cmp	r4, #0
 8004d12:	dd10      	ble.n	8004d36 <_dtoa_r+0x796>
 8004d14:	4631      	mov	r1, r6
 8004d16:	4622      	mov	r2, r4
 8004d18:	4628      	mov	r0, r5
 8004d1a:	f000 fcd5 	bl	80056c8 <__pow5mult>
 8004d1e:	4652      	mov	r2, sl
 8004d20:	4601      	mov	r1, r0
 8004d22:	4606      	mov	r6, r0
 8004d24:	4628      	mov	r0, r5
 8004d26:	f000 fc27 	bl	8005578 <__multiply>
 8004d2a:	4680      	mov	r8, r0
 8004d2c:	4651      	mov	r1, sl
 8004d2e:	4628      	mov	r0, r5
 8004d30:	f000 fb56 	bl	80053e0 <_Bfree>
 8004d34:	46c2      	mov	sl, r8
 8004d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d38:	1b1a      	subs	r2, r3, r4
 8004d3a:	d004      	beq.n	8004d46 <_dtoa_r+0x7a6>
 8004d3c:	4651      	mov	r1, sl
 8004d3e:	4628      	mov	r0, r5
 8004d40:	f000 fcc2 	bl	80056c8 <__pow5mult>
 8004d44:	4682      	mov	sl, r0
 8004d46:	2101      	movs	r1, #1
 8004d48:	4628      	mov	r0, r5
 8004d4a:	f000 fbff 	bl	800554c <__i2b>
 8004d4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d50:	4604      	mov	r4, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f340 8082 	ble.w	8004e5c <_dtoa_r+0x8bc>
 8004d58:	461a      	mov	r2, r3
 8004d5a:	4601      	mov	r1, r0
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	f000 fcb3 	bl	80056c8 <__pow5mult>
 8004d62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d64:	4604      	mov	r4, r0
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	dd7b      	ble.n	8004e62 <_dtoa_r+0x8c2>
 8004d6a:	f04f 0800 	mov.w	r8, #0
 8004d6e:	6923      	ldr	r3, [r4, #16]
 8004d70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004d74:	6918      	ldr	r0, [r3, #16]
 8004d76:	f000 fb9b 	bl	80054b0 <__hi0bits>
 8004d7a:	f1c0 0020 	rsb	r0, r0, #32
 8004d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d80:	4418      	add	r0, r3
 8004d82:	f010 001f 	ands.w	r0, r0, #31
 8004d86:	f000 8092 	beq.w	8004eae <_dtoa_r+0x90e>
 8004d8a:	f1c0 0320 	rsb	r3, r0, #32
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	f340 8085 	ble.w	8004e9e <_dtoa_r+0x8fe>
 8004d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d96:	f1c0 001c 	rsb	r0, r0, #28
 8004d9a:	4403      	add	r3, r0
 8004d9c:	4481      	add	r9, r0
 8004d9e:	4407      	add	r7, r0
 8004da0:	9309      	str	r3, [sp, #36]	; 0x24
 8004da2:	f1b9 0f00 	cmp.w	r9, #0
 8004da6:	dd05      	ble.n	8004db4 <_dtoa_r+0x814>
 8004da8:	4651      	mov	r1, sl
 8004daa:	464a      	mov	r2, r9
 8004dac:	4628      	mov	r0, r5
 8004dae:	f000 fce5 	bl	800577c <__lshift>
 8004db2:	4682      	mov	sl, r0
 8004db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	dd05      	ble.n	8004dc6 <_dtoa_r+0x826>
 8004dba:	4621      	mov	r1, r4
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	f000 fcdc 	bl	800577c <__lshift>
 8004dc4:	4604      	mov	r4, r0
 8004dc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d072      	beq.n	8004eb2 <_dtoa_r+0x912>
 8004dcc:	4621      	mov	r1, r4
 8004dce:	4650      	mov	r0, sl
 8004dd0:	f000 fd40 	bl	8005854 <__mcmp>
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	da6c      	bge.n	8004eb2 <_dtoa_r+0x912>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	4651      	mov	r1, sl
 8004ddc:	220a      	movs	r2, #10
 8004dde:	4628      	mov	r0, r5
 8004de0:	f000 fb20 	bl	8005424 <__multadd>
 8004de4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004de6:	4682      	mov	sl, r0
 8004de8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 81ac 	beq.w	800514a <_dtoa_r+0xbaa>
 8004df2:	2300      	movs	r3, #0
 8004df4:	4631      	mov	r1, r6
 8004df6:	220a      	movs	r2, #10
 8004df8:	4628      	mov	r0, r5
 8004dfa:	f000 fb13 	bl	8005424 <__multadd>
 8004dfe:	9b06      	ldr	r3, [sp, #24]
 8004e00:	4606      	mov	r6, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f300 8093 	bgt.w	8004f2e <_dtoa_r+0x98e>
 8004e08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	dc59      	bgt.n	8004ec2 <_dtoa_r+0x922>
 8004e0e:	e08e      	b.n	8004f2e <_dtoa_r+0x98e>
 8004e10:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004e12:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004e16:	e75d      	b.n	8004cd4 <_dtoa_r+0x734>
 8004e18:	9b08      	ldr	r3, [sp, #32]
 8004e1a:	1e5c      	subs	r4, r3, #1
 8004e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e1e:	42a3      	cmp	r3, r4
 8004e20:	bfbf      	itttt	lt
 8004e22:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004e24:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004e26:	1ae3      	sublt	r3, r4, r3
 8004e28:	18d2      	addlt	r2, r2, r3
 8004e2a:	bfa8      	it	ge
 8004e2c:	1b1c      	subge	r4, r3, r4
 8004e2e:	9b08      	ldr	r3, [sp, #32]
 8004e30:	bfbe      	ittt	lt
 8004e32:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004e34:	920e      	strlt	r2, [sp, #56]	; 0x38
 8004e36:	2400      	movlt	r4, #0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	bfb5      	itete	lt
 8004e3c:	eba9 0703 	sublt.w	r7, r9, r3
 8004e40:	464f      	movge	r7, r9
 8004e42:	2300      	movlt	r3, #0
 8004e44:	9b08      	ldrge	r3, [sp, #32]
 8004e46:	e747      	b.n	8004cd8 <_dtoa_r+0x738>
 8004e48:	464f      	mov	r7, r9
 8004e4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004e4c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004e4e:	e74c      	b.n	8004cea <_dtoa_r+0x74a>
 8004e50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e52:	e773      	b.n	8004d3c <_dtoa_r+0x79c>
 8004e54:	3fe00000 	.word	0x3fe00000
 8004e58:	40240000 	.word	0x40240000
 8004e5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	dc18      	bgt.n	8004e94 <_dtoa_r+0x8f4>
 8004e62:	9b04      	ldr	r3, [sp, #16]
 8004e64:	b9b3      	cbnz	r3, 8004e94 <_dtoa_r+0x8f4>
 8004e66:	9b05      	ldr	r3, [sp, #20]
 8004e68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e6c:	b993      	cbnz	r3, 8004e94 <_dtoa_r+0x8f4>
 8004e6e:	9b05      	ldr	r3, [sp, #20]
 8004e70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e74:	0d1b      	lsrs	r3, r3, #20
 8004e76:	051b      	lsls	r3, r3, #20
 8004e78:	b17b      	cbz	r3, 8004e9a <_dtoa_r+0x8fa>
 8004e7a:	f04f 0801 	mov.w	r8, #1
 8004e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e80:	f109 0901 	add.w	r9, r9, #1
 8004e84:	3301      	adds	r3, #1
 8004e86:	9309      	str	r3, [sp, #36]	; 0x24
 8004e88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f47f af6f 	bne.w	8004d6e <_dtoa_r+0x7ce>
 8004e90:	2001      	movs	r0, #1
 8004e92:	e774      	b.n	8004d7e <_dtoa_r+0x7de>
 8004e94:	f04f 0800 	mov.w	r8, #0
 8004e98:	e7f6      	b.n	8004e88 <_dtoa_r+0x8e8>
 8004e9a:	4698      	mov	r8, r3
 8004e9c:	e7f4      	b.n	8004e88 <_dtoa_r+0x8e8>
 8004e9e:	d080      	beq.n	8004da2 <_dtoa_r+0x802>
 8004ea0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ea2:	331c      	adds	r3, #28
 8004ea4:	441a      	add	r2, r3
 8004ea6:	4499      	add	r9, r3
 8004ea8:	441f      	add	r7, r3
 8004eaa:	9209      	str	r2, [sp, #36]	; 0x24
 8004eac:	e779      	b.n	8004da2 <_dtoa_r+0x802>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	e7f6      	b.n	8004ea0 <_dtoa_r+0x900>
 8004eb2:	9b08      	ldr	r3, [sp, #32]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	dc34      	bgt.n	8004f22 <_dtoa_r+0x982>
 8004eb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	dd31      	ble.n	8004f22 <_dtoa_r+0x982>
 8004ebe:	9b08      	ldr	r3, [sp, #32]
 8004ec0:	9306      	str	r3, [sp, #24]
 8004ec2:	9b06      	ldr	r3, [sp, #24]
 8004ec4:	b963      	cbnz	r3, 8004ee0 <_dtoa_r+0x940>
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	2205      	movs	r2, #5
 8004eca:	4628      	mov	r0, r5
 8004ecc:	f000 faaa 	bl	8005424 <__multadd>
 8004ed0:	4601      	mov	r1, r0
 8004ed2:	4604      	mov	r4, r0
 8004ed4:	4650      	mov	r0, sl
 8004ed6:	f000 fcbd 	bl	8005854 <__mcmp>
 8004eda:	2800      	cmp	r0, #0
 8004edc:	f73f adbf 	bgt.w	8004a5e <_dtoa_r+0x4be>
 8004ee0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ee2:	9f03      	ldr	r7, [sp, #12]
 8004ee4:	ea6f 0b03 	mvn.w	fp, r3
 8004ee8:	f04f 0800 	mov.w	r8, #0
 8004eec:	4621      	mov	r1, r4
 8004eee:	4628      	mov	r0, r5
 8004ef0:	f000 fa76 	bl	80053e0 <_Bfree>
 8004ef4:	2e00      	cmp	r6, #0
 8004ef6:	f43f aead 	beq.w	8004c54 <_dtoa_r+0x6b4>
 8004efa:	f1b8 0f00 	cmp.w	r8, #0
 8004efe:	d005      	beq.n	8004f0c <_dtoa_r+0x96c>
 8004f00:	45b0      	cmp	r8, r6
 8004f02:	d003      	beq.n	8004f0c <_dtoa_r+0x96c>
 8004f04:	4641      	mov	r1, r8
 8004f06:	4628      	mov	r0, r5
 8004f08:	f000 fa6a 	bl	80053e0 <_Bfree>
 8004f0c:	4631      	mov	r1, r6
 8004f0e:	4628      	mov	r0, r5
 8004f10:	f000 fa66 	bl	80053e0 <_Bfree>
 8004f14:	e69e      	b.n	8004c54 <_dtoa_r+0x6b4>
 8004f16:	2400      	movs	r4, #0
 8004f18:	4626      	mov	r6, r4
 8004f1a:	e7e1      	b.n	8004ee0 <_dtoa_r+0x940>
 8004f1c:	46c3      	mov	fp, r8
 8004f1e:	4626      	mov	r6, r4
 8004f20:	e59d      	b.n	8004a5e <_dtoa_r+0x4be>
 8004f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 80c8 	beq.w	80050ba <_dtoa_r+0xb1a>
 8004f2a:	9b08      	ldr	r3, [sp, #32]
 8004f2c:	9306      	str	r3, [sp, #24]
 8004f2e:	2f00      	cmp	r7, #0
 8004f30:	dd05      	ble.n	8004f3e <_dtoa_r+0x99e>
 8004f32:	4631      	mov	r1, r6
 8004f34:	463a      	mov	r2, r7
 8004f36:	4628      	mov	r0, r5
 8004f38:	f000 fc20 	bl	800577c <__lshift>
 8004f3c:	4606      	mov	r6, r0
 8004f3e:	f1b8 0f00 	cmp.w	r8, #0
 8004f42:	d05b      	beq.n	8004ffc <_dtoa_r+0xa5c>
 8004f44:	4628      	mov	r0, r5
 8004f46:	6871      	ldr	r1, [r6, #4]
 8004f48:	f000 fa0a 	bl	8005360 <_Balloc>
 8004f4c:	4607      	mov	r7, r0
 8004f4e:	b928      	cbnz	r0, 8004f5c <_dtoa_r+0x9bc>
 8004f50:	4602      	mov	r2, r0
 8004f52:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004f56:	4b81      	ldr	r3, [pc, #516]	; (800515c <_dtoa_r+0xbbc>)
 8004f58:	f7ff bb36 	b.w	80045c8 <_dtoa_r+0x28>
 8004f5c:	6932      	ldr	r2, [r6, #16]
 8004f5e:	f106 010c 	add.w	r1, r6, #12
 8004f62:	3202      	adds	r2, #2
 8004f64:	0092      	lsls	r2, r2, #2
 8004f66:	300c      	adds	r0, #12
 8004f68:	f000 ff9e 	bl	8005ea8 <memcpy>
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	4639      	mov	r1, r7
 8004f70:	4628      	mov	r0, r5
 8004f72:	f000 fc03 	bl	800577c <__lshift>
 8004f76:	46b0      	mov	r8, r6
 8004f78:	4606      	mov	r6, r0
 8004f7a:	9b03      	ldr	r3, [sp, #12]
 8004f7c:	9a03      	ldr	r2, [sp, #12]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	9308      	str	r3, [sp, #32]
 8004f82:	9b06      	ldr	r3, [sp, #24]
 8004f84:	4413      	add	r3, r2
 8004f86:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f88:	9b04      	ldr	r3, [sp, #16]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	930a      	str	r3, [sp, #40]	; 0x28
 8004f90:	9b08      	ldr	r3, [sp, #32]
 8004f92:	4621      	mov	r1, r4
 8004f94:	3b01      	subs	r3, #1
 8004f96:	4650      	mov	r0, sl
 8004f98:	9304      	str	r3, [sp, #16]
 8004f9a:	f7ff fa75 	bl	8004488 <quorem>
 8004f9e:	4641      	mov	r1, r8
 8004fa0:	9006      	str	r0, [sp, #24]
 8004fa2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004fa6:	4650      	mov	r0, sl
 8004fa8:	f000 fc54 	bl	8005854 <__mcmp>
 8004fac:	4632      	mov	r2, r6
 8004fae:	9009      	str	r0, [sp, #36]	; 0x24
 8004fb0:	4621      	mov	r1, r4
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	f000 fc6a 	bl	800588c <__mdiff>
 8004fb8:	68c2      	ldr	r2, [r0, #12]
 8004fba:	4607      	mov	r7, r0
 8004fbc:	bb02      	cbnz	r2, 8005000 <_dtoa_r+0xa60>
 8004fbe:	4601      	mov	r1, r0
 8004fc0:	4650      	mov	r0, sl
 8004fc2:	f000 fc47 	bl	8005854 <__mcmp>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	4639      	mov	r1, r7
 8004fca:	4628      	mov	r0, r5
 8004fcc:	920c      	str	r2, [sp, #48]	; 0x30
 8004fce:	f000 fa07 	bl	80053e0 <_Bfree>
 8004fd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fd6:	9f08      	ldr	r7, [sp, #32]
 8004fd8:	ea43 0102 	orr.w	r1, r3, r2
 8004fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fde:	4319      	orrs	r1, r3
 8004fe0:	d110      	bne.n	8005004 <_dtoa_r+0xa64>
 8004fe2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004fe6:	d029      	beq.n	800503c <_dtoa_r+0xa9c>
 8004fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	dd02      	ble.n	8004ff4 <_dtoa_r+0xa54>
 8004fee:	9b06      	ldr	r3, [sp, #24]
 8004ff0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004ff4:	9b04      	ldr	r3, [sp, #16]
 8004ff6:	f883 9000 	strb.w	r9, [r3]
 8004ffa:	e777      	b.n	8004eec <_dtoa_r+0x94c>
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	e7ba      	b.n	8004f76 <_dtoa_r+0x9d6>
 8005000:	2201      	movs	r2, #1
 8005002:	e7e1      	b.n	8004fc8 <_dtoa_r+0xa28>
 8005004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005006:	2b00      	cmp	r3, #0
 8005008:	db04      	blt.n	8005014 <_dtoa_r+0xa74>
 800500a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800500c:	430b      	orrs	r3, r1
 800500e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005010:	430b      	orrs	r3, r1
 8005012:	d120      	bne.n	8005056 <_dtoa_r+0xab6>
 8005014:	2a00      	cmp	r2, #0
 8005016:	dded      	ble.n	8004ff4 <_dtoa_r+0xa54>
 8005018:	4651      	mov	r1, sl
 800501a:	2201      	movs	r2, #1
 800501c:	4628      	mov	r0, r5
 800501e:	f000 fbad 	bl	800577c <__lshift>
 8005022:	4621      	mov	r1, r4
 8005024:	4682      	mov	sl, r0
 8005026:	f000 fc15 	bl	8005854 <__mcmp>
 800502a:	2800      	cmp	r0, #0
 800502c:	dc03      	bgt.n	8005036 <_dtoa_r+0xa96>
 800502e:	d1e1      	bne.n	8004ff4 <_dtoa_r+0xa54>
 8005030:	f019 0f01 	tst.w	r9, #1
 8005034:	d0de      	beq.n	8004ff4 <_dtoa_r+0xa54>
 8005036:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800503a:	d1d8      	bne.n	8004fee <_dtoa_r+0xa4e>
 800503c:	2339      	movs	r3, #57	; 0x39
 800503e:	9a04      	ldr	r2, [sp, #16]
 8005040:	7013      	strb	r3, [r2, #0]
 8005042:	463b      	mov	r3, r7
 8005044:	461f      	mov	r7, r3
 8005046:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800504a:	3b01      	subs	r3, #1
 800504c:	2a39      	cmp	r2, #57	; 0x39
 800504e:	d06b      	beq.n	8005128 <_dtoa_r+0xb88>
 8005050:	3201      	adds	r2, #1
 8005052:	701a      	strb	r2, [r3, #0]
 8005054:	e74a      	b.n	8004eec <_dtoa_r+0x94c>
 8005056:	2a00      	cmp	r2, #0
 8005058:	dd07      	ble.n	800506a <_dtoa_r+0xaca>
 800505a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800505e:	d0ed      	beq.n	800503c <_dtoa_r+0xa9c>
 8005060:	9a04      	ldr	r2, [sp, #16]
 8005062:	f109 0301 	add.w	r3, r9, #1
 8005066:	7013      	strb	r3, [r2, #0]
 8005068:	e740      	b.n	8004eec <_dtoa_r+0x94c>
 800506a:	9b08      	ldr	r3, [sp, #32]
 800506c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800506e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005072:	4293      	cmp	r3, r2
 8005074:	d042      	beq.n	80050fc <_dtoa_r+0xb5c>
 8005076:	4651      	mov	r1, sl
 8005078:	2300      	movs	r3, #0
 800507a:	220a      	movs	r2, #10
 800507c:	4628      	mov	r0, r5
 800507e:	f000 f9d1 	bl	8005424 <__multadd>
 8005082:	45b0      	cmp	r8, r6
 8005084:	4682      	mov	sl, r0
 8005086:	f04f 0300 	mov.w	r3, #0
 800508a:	f04f 020a 	mov.w	r2, #10
 800508e:	4641      	mov	r1, r8
 8005090:	4628      	mov	r0, r5
 8005092:	d107      	bne.n	80050a4 <_dtoa_r+0xb04>
 8005094:	f000 f9c6 	bl	8005424 <__multadd>
 8005098:	4680      	mov	r8, r0
 800509a:	4606      	mov	r6, r0
 800509c:	9b08      	ldr	r3, [sp, #32]
 800509e:	3301      	adds	r3, #1
 80050a0:	9308      	str	r3, [sp, #32]
 80050a2:	e775      	b.n	8004f90 <_dtoa_r+0x9f0>
 80050a4:	f000 f9be 	bl	8005424 <__multadd>
 80050a8:	4631      	mov	r1, r6
 80050aa:	4680      	mov	r8, r0
 80050ac:	2300      	movs	r3, #0
 80050ae:	220a      	movs	r2, #10
 80050b0:	4628      	mov	r0, r5
 80050b2:	f000 f9b7 	bl	8005424 <__multadd>
 80050b6:	4606      	mov	r6, r0
 80050b8:	e7f0      	b.n	800509c <_dtoa_r+0xafc>
 80050ba:	9b08      	ldr	r3, [sp, #32]
 80050bc:	9306      	str	r3, [sp, #24]
 80050be:	9f03      	ldr	r7, [sp, #12]
 80050c0:	4621      	mov	r1, r4
 80050c2:	4650      	mov	r0, sl
 80050c4:	f7ff f9e0 	bl	8004488 <quorem>
 80050c8:	9b03      	ldr	r3, [sp, #12]
 80050ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80050ce:	f807 9b01 	strb.w	r9, [r7], #1
 80050d2:	1afa      	subs	r2, r7, r3
 80050d4:	9b06      	ldr	r3, [sp, #24]
 80050d6:	4293      	cmp	r3, r2
 80050d8:	dd07      	ble.n	80050ea <_dtoa_r+0xb4a>
 80050da:	4651      	mov	r1, sl
 80050dc:	2300      	movs	r3, #0
 80050de:	220a      	movs	r2, #10
 80050e0:	4628      	mov	r0, r5
 80050e2:	f000 f99f 	bl	8005424 <__multadd>
 80050e6:	4682      	mov	sl, r0
 80050e8:	e7ea      	b.n	80050c0 <_dtoa_r+0xb20>
 80050ea:	9b06      	ldr	r3, [sp, #24]
 80050ec:	f04f 0800 	mov.w	r8, #0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	bfcc      	ite	gt
 80050f4:	461f      	movgt	r7, r3
 80050f6:	2701      	movle	r7, #1
 80050f8:	9b03      	ldr	r3, [sp, #12]
 80050fa:	441f      	add	r7, r3
 80050fc:	4651      	mov	r1, sl
 80050fe:	2201      	movs	r2, #1
 8005100:	4628      	mov	r0, r5
 8005102:	f000 fb3b 	bl	800577c <__lshift>
 8005106:	4621      	mov	r1, r4
 8005108:	4682      	mov	sl, r0
 800510a:	f000 fba3 	bl	8005854 <__mcmp>
 800510e:	2800      	cmp	r0, #0
 8005110:	dc97      	bgt.n	8005042 <_dtoa_r+0xaa2>
 8005112:	d102      	bne.n	800511a <_dtoa_r+0xb7a>
 8005114:	f019 0f01 	tst.w	r9, #1
 8005118:	d193      	bne.n	8005042 <_dtoa_r+0xaa2>
 800511a:	463b      	mov	r3, r7
 800511c:	461f      	mov	r7, r3
 800511e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005122:	2a30      	cmp	r2, #48	; 0x30
 8005124:	d0fa      	beq.n	800511c <_dtoa_r+0xb7c>
 8005126:	e6e1      	b.n	8004eec <_dtoa_r+0x94c>
 8005128:	9a03      	ldr	r2, [sp, #12]
 800512a:	429a      	cmp	r2, r3
 800512c:	d18a      	bne.n	8005044 <_dtoa_r+0xaa4>
 800512e:	2331      	movs	r3, #49	; 0x31
 8005130:	f10b 0b01 	add.w	fp, fp, #1
 8005134:	e797      	b.n	8005066 <_dtoa_r+0xac6>
 8005136:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <_dtoa_r+0xbc0>)
 8005138:	f7ff ba9f 	b.w	800467a <_dtoa_r+0xda>
 800513c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800513e:	2b00      	cmp	r3, #0
 8005140:	f47f aa77 	bne.w	8004632 <_dtoa_r+0x92>
 8005144:	4b07      	ldr	r3, [pc, #28]	; (8005164 <_dtoa_r+0xbc4>)
 8005146:	f7ff ba98 	b.w	800467a <_dtoa_r+0xda>
 800514a:	9b06      	ldr	r3, [sp, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	dcb6      	bgt.n	80050be <_dtoa_r+0xb1e>
 8005150:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005152:	2b02      	cmp	r3, #2
 8005154:	f73f aeb5 	bgt.w	8004ec2 <_dtoa_r+0x922>
 8005158:	e7b1      	b.n	80050be <_dtoa_r+0xb1e>
 800515a:	bf00      	nop
 800515c:	08006fc6 	.word	0x08006fc6
 8005160:	08006f26 	.word	0x08006f26
 8005164:	08006f4a 	.word	0x08006f4a

08005168 <_free_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	4605      	mov	r5, r0
 800516c:	2900      	cmp	r1, #0
 800516e:	d040      	beq.n	80051f2 <_free_r+0x8a>
 8005170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005174:	1f0c      	subs	r4, r1, #4
 8005176:	2b00      	cmp	r3, #0
 8005178:	bfb8      	it	lt
 800517a:	18e4      	addlt	r4, r4, r3
 800517c:	f000 f8e4 	bl	8005348 <__malloc_lock>
 8005180:	4a1c      	ldr	r2, [pc, #112]	; (80051f4 <_free_r+0x8c>)
 8005182:	6813      	ldr	r3, [r2, #0]
 8005184:	b933      	cbnz	r3, 8005194 <_free_r+0x2c>
 8005186:	6063      	str	r3, [r4, #4]
 8005188:	6014      	str	r4, [r2, #0]
 800518a:	4628      	mov	r0, r5
 800518c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005190:	f000 b8e0 	b.w	8005354 <__malloc_unlock>
 8005194:	42a3      	cmp	r3, r4
 8005196:	d908      	bls.n	80051aa <_free_r+0x42>
 8005198:	6820      	ldr	r0, [r4, #0]
 800519a:	1821      	adds	r1, r4, r0
 800519c:	428b      	cmp	r3, r1
 800519e:	bf01      	itttt	eq
 80051a0:	6819      	ldreq	r1, [r3, #0]
 80051a2:	685b      	ldreq	r3, [r3, #4]
 80051a4:	1809      	addeq	r1, r1, r0
 80051a6:	6021      	streq	r1, [r4, #0]
 80051a8:	e7ed      	b.n	8005186 <_free_r+0x1e>
 80051aa:	461a      	mov	r2, r3
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	b10b      	cbz	r3, 80051b4 <_free_r+0x4c>
 80051b0:	42a3      	cmp	r3, r4
 80051b2:	d9fa      	bls.n	80051aa <_free_r+0x42>
 80051b4:	6811      	ldr	r1, [r2, #0]
 80051b6:	1850      	adds	r0, r2, r1
 80051b8:	42a0      	cmp	r0, r4
 80051ba:	d10b      	bne.n	80051d4 <_free_r+0x6c>
 80051bc:	6820      	ldr	r0, [r4, #0]
 80051be:	4401      	add	r1, r0
 80051c0:	1850      	adds	r0, r2, r1
 80051c2:	4283      	cmp	r3, r0
 80051c4:	6011      	str	r1, [r2, #0]
 80051c6:	d1e0      	bne.n	800518a <_free_r+0x22>
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	4408      	add	r0, r1
 80051ce:	6010      	str	r0, [r2, #0]
 80051d0:	6053      	str	r3, [r2, #4]
 80051d2:	e7da      	b.n	800518a <_free_r+0x22>
 80051d4:	d902      	bls.n	80051dc <_free_r+0x74>
 80051d6:	230c      	movs	r3, #12
 80051d8:	602b      	str	r3, [r5, #0]
 80051da:	e7d6      	b.n	800518a <_free_r+0x22>
 80051dc:	6820      	ldr	r0, [r4, #0]
 80051de:	1821      	adds	r1, r4, r0
 80051e0:	428b      	cmp	r3, r1
 80051e2:	bf01      	itttt	eq
 80051e4:	6819      	ldreq	r1, [r3, #0]
 80051e6:	685b      	ldreq	r3, [r3, #4]
 80051e8:	1809      	addeq	r1, r1, r0
 80051ea:	6021      	streq	r1, [r4, #0]
 80051ec:	6063      	str	r3, [r4, #4]
 80051ee:	6054      	str	r4, [r2, #4]
 80051f0:	e7cb      	b.n	800518a <_free_r+0x22>
 80051f2:	bd38      	pop	{r3, r4, r5, pc}
 80051f4:	20000444 	.word	0x20000444

080051f8 <malloc>:
 80051f8:	4b02      	ldr	r3, [pc, #8]	; (8005204 <malloc+0xc>)
 80051fa:	4601      	mov	r1, r0
 80051fc:	6818      	ldr	r0, [r3, #0]
 80051fe:	f000 b823 	b.w	8005248 <_malloc_r>
 8005202:	bf00      	nop
 8005204:	20000064 	.word	0x20000064

08005208 <sbrk_aligned>:
 8005208:	b570      	push	{r4, r5, r6, lr}
 800520a:	4e0e      	ldr	r6, [pc, #56]	; (8005244 <sbrk_aligned+0x3c>)
 800520c:	460c      	mov	r4, r1
 800520e:	6831      	ldr	r1, [r6, #0]
 8005210:	4605      	mov	r5, r0
 8005212:	b911      	cbnz	r1, 800521a <sbrk_aligned+0x12>
 8005214:	f000 fe38 	bl	8005e88 <_sbrk_r>
 8005218:	6030      	str	r0, [r6, #0]
 800521a:	4621      	mov	r1, r4
 800521c:	4628      	mov	r0, r5
 800521e:	f000 fe33 	bl	8005e88 <_sbrk_r>
 8005222:	1c43      	adds	r3, r0, #1
 8005224:	d00a      	beq.n	800523c <sbrk_aligned+0x34>
 8005226:	1cc4      	adds	r4, r0, #3
 8005228:	f024 0403 	bic.w	r4, r4, #3
 800522c:	42a0      	cmp	r0, r4
 800522e:	d007      	beq.n	8005240 <sbrk_aligned+0x38>
 8005230:	1a21      	subs	r1, r4, r0
 8005232:	4628      	mov	r0, r5
 8005234:	f000 fe28 	bl	8005e88 <_sbrk_r>
 8005238:	3001      	adds	r0, #1
 800523a:	d101      	bne.n	8005240 <sbrk_aligned+0x38>
 800523c:	f04f 34ff 	mov.w	r4, #4294967295
 8005240:	4620      	mov	r0, r4
 8005242:	bd70      	pop	{r4, r5, r6, pc}
 8005244:	20000448 	.word	0x20000448

08005248 <_malloc_r>:
 8005248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800524c:	1ccd      	adds	r5, r1, #3
 800524e:	f025 0503 	bic.w	r5, r5, #3
 8005252:	3508      	adds	r5, #8
 8005254:	2d0c      	cmp	r5, #12
 8005256:	bf38      	it	cc
 8005258:	250c      	movcc	r5, #12
 800525a:	2d00      	cmp	r5, #0
 800525c:	4607      	mov	r7, r0
 800525e:	db01      	blt.n	8005264 <_malloc_r+0x1c>
 8005260:	42a9      	cmp	r1, r5
 8005262:	d905      	bls.n	8005270 <_malloc_r+0x28>
 8005264:	230c      	movs	r3, #12
 8005266:	2600      	movs	r6, #0
 8005268:	603b      	str	r3, [r7, #0]
 800526a:	4630      	mov	r0, r6
 800526c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005270:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005344 <_malloc_r+0xfc>
 8005274:	f000 f868 	bl	8005348 <__malloc_lock>
 8005278:	f8d8 3000 	ldr.w	r3, [r8]
 800527c:	461c      	mov	r4, r3
 800527e:	bb5c      	cbnz	r4, 80052d8 <_malloc_r+0x90>
 8005280:	4629      	mov	r1, r5
 8005282:	4638      	mov	r0, r7
 8005284:	f7ff ffc0 	bl	8005208 <sbrk_aligned>
 8005288:	1c43      	adds	r3, r0, #1
 800528a:	4604      	mov	r4, r0
 800528c:	d155      	bne.n	800533a <_malloc_r+0xf2>
 800528e:	f8d8 4000 	ldr.w	r4, [r8]
 8005292:	4626      	mov	r6, r4
 8005294:	2e00      	cmp	r6, #0
 8005296:	d145      	bne.n	8005324 <_malloc_r+0xdc>
 8005298:	2c00      	cmp	r4, #0
 800529a:	d048      	beq.n	800532e <_malloc_r+0xe6>
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	4631      	mov	r1, r6
 80052a0:	4638      	mov	r0, r7
 80052a2:	eb04 0903 	add.w	r9, r4, r3
 80052a6:	f000 fdef 	bl	8005e88 <_sbrk_r>
 80052aa:	4581      	cmp	r9, r0
 80052ac:	d13f      	bne.n	800532e <_malloc_r+0xe6>
 80052ae:	6821      	ldr	r1, [r4, #0]
 80052b0:	4638      	mov	r0, r7
 80052b2:	1a6d      	subs	r5, r5, r1
 80052b4:	4629      	mov	r1, r5
 80052b6:	f7ff ffa7 	bl	8005208 <sbrk_aligned>
 80052ba:	3001      	adds	r0, #1
 80052bc:	d037      	beq.n	800532e <_malloc_r+0xe6>
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	442b      	add	r3, r5
 80052c2:	6023      	str	r3, [r4, #0]
 80052c4:	f8d8 3000 	ldr.w	r3, [r8]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d038      	beq.n	800533e <_malloc_r+0xf6>
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	42a2      	cmp	r2, r4
 80052d0:	d12b      	bne.n	800532a <_malloc_r+0xe2>
 80052d2:	2200      	movs	r2, #0
 80052d4:	605a      	str	r2, [r3, #4]
 80052d6:	e00f      	b.n	80052f8 <_malloc_r+0xb0>
 80052d8:	6822      	ldr	r2, [r4, #0]
 80052da:	1b52      	subs	r2, r2, r5
 80052dc:	d41f      	bmi.n	800531e <_malloc_r+0xd6>
 80052de:	2a0b      	cmp	r2, #11
 80052e0:	d917      	bls.n	8005312 <_malloc_r+0xca>
 80052e2:	1961      	adds	r1, r4, r5
 80052e4:	42a3      	cmp	r3, r4
 80052e6:	6025      	str	r5, [r4, #0]
 80052e8:	bf18      	it	ne
 80052ea:	6059      	strne	r1, [r3, #4]
 80052ec:	6863      	ldr	r3, [r4, #4]
 80052ee:	bf08      	it	eq
 80052f0:	f8c8 1000 	streq.w	r1, [r8]
 80052f4:	5162      	str	r2, [r4, r5]
 80052f6:	604b      	str	r3, [r1, #4]
 80052f8:	4638      	mov	r0, r7
 80052fa:	f104 060b 	add.w	r6, r4, #11
 80052fe:	f000 f829 	bl	8005354 <__malloc_unlock>
 8005302:	f026 0607 	bic.w	r6, r6, #7
 8005306:	1d23      	adds	r3, r4, #4
 8005308:	1af2      	subs	r2, r6, r3
 800530a:	d0ae      	beq.n	800526a <_malloc_r+0x22>
 800530c:	1b9b      	subs	r3, r3, r6
 800530e:	50a3      	str	r3, [r4, r2]
 8005310:	e7ab      	b.n	800526a <_malloc_r+0x22>
 8005312:	42a3      	cmp	r3, r4
 8005314:	6862      	ldr	r2, [r4, #4]
 8005316:	d1dd      	bne.n	80052d4 <_malloc_r+0x8c>
 8005318:	f8c8 2000 	str.w	r2, [r8]
 800531c:	e7ec      	b.n	80052f8 <_malloc_r+0xb0>
 800531e:	4623      	mov	r3, r4
 8005320:	6864      	ldr	r4, [r4, #4]
 8005322:	e7ac      	b.n	800527e <_malloc_r+0x36>
 8005324:	4634      	mov	r4, r6
 8005326:	6876      	ldr	r6, [r6, #4]
 8005328:	e7b4      	b.n	8005294 <_malloc_r+0x4c>
 800532a:	4613      	mov	r3, r2
 800532c:	e7cc      	b.n	80052c8 <_malloc_r+0x80>
 800532e:	230c      	movs	r3, #12
 8005330:	4638      	mov	r0, r7
 8005332:	603b      	str	r3, [r7, #0]
 8005334:	f000 f80e 	bl	8005354 <__malloc_unlock>
 8005338:	e797      	b.n	800526a <_malloc_r+0x22>
 800533a:	6025      	str	r5, [r4, #0]
 800533c:	e7dc      	b.n	80052f8 <_malloc_r+0xb0>
 800533e:	605b      	str	r3, [r3, #4]
 8005340:	deff      	udf	#255	; 0xff
 8005342:	bf00      	nop
 8005344:	20000444 	.word	0x20000444

08005348 <__malloc_lock>:
 8005348:	4801      	ldr	r0, [pc, #4]	; (8005350 <__malloc_lock+0x8>)
 800534a:	f7ff b88d 	b.w	8004468 <__retarget_lock_acquire_recursive>
 800534e:	bf00      	nop
 8005350:	20000440 	.word	0x20000440

08005354 <__malloc_unlock>:
 8005354:	4801      	ldr	r0, [pc, #4]	; (800535c <__malloc_unlock+0x8>)
 8005356:	f7ff b888 	b.w	800446a <__retarget_lock_release_recursive>
 800535a:	bf00      	nop
 800535c:	20000440 	.word	0x20000440

08005360 <_Balloc>:
 8005360:	b570      	push	{r4, r5, r6, lr}
 8005362:	69c6      	ldr	r6, [r0, #28]
 8005364:	4604      	mov	r4, r0
 8005366:	460d      	mov	r5, r1
 8005368:	b976      	cbnz	r6, 8005388 <_Balloc+0x28>
 800536a:	2010      	movs	r0, #16
 800536c:	f7ff ff44 	bl	80051f8 <malloc>
 8005370:	4602      	mov	r2, r0
 8005372:	61e0      	str	r0, [r4, #28]
 8005374:	b920      	cbnz	r0, 8005380 <_Balloc+0x20>
 8005376:	216b      	movs	r1, #107	; 0x6b
 8005378:	4b17      	ldr	r3, [pc, #92]	; (80053d8 <_Balloc+0x78>)
 800537a:	4818      	ldr	r0, [pc, #96]	; (80053dc <_Balloc+0x7c>)
 800537c:	f000 fda2 	bl	8005ec4 <__assert_func>
 8005380:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005384:	6006      	str	r6, [r0, #0]
 8005386:	60c6      	str	r6, [r0, #12]
 8005388:	69e6      	ldr	r6, [r4, #28]
 800538a:	68f3      	ldr	r3, [r6, #12]
 800538c:	b183      	cbz	r3, 80053b0 <_Balloc+0x50>
 800538e:	69e3      	ldr	r3, [r4, #28]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005396:	b9b8      	cbnz	r0, 80053c8 <_Balloc+0x68>
 8005398:	2101      	movs	r1, #1
 800539a:	fa01 f605 	lsl.w	r6, r1, r5
 800539e:	1d72      	adds	r2, r6, #5
 80053a0:	4620      	mov	r0, r4
 80053a2:	0092      	lsls	r2, r2, #2
 80053a4:	f000 fdac 	bl	8005f00 <_calloc_r>
 80053a8:	b160      	cbz	r0, 80053c4 <_Balloc+0x64>
 80053aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80053ae:	e00e      	b.n	80053ce <_Balloc+0x6e>
 80053b0:	2221      	movs	r2, #33	; 0x21
 80053b2:	2104      	movs	r1, #4
 80053b4:	4620      	mov	r0, r4
 80053b6:	f000 fda3 	bl	8005f00 <_calloc_r>
 80053ba:	69e3      	ldr	r3, [r4, #28]
 80053bc:	60f0      	str	r0, [r6, #12]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e4      	bne.n	800538e <_Balloc+0x2e>
 80053c4:	2000      	movs	r0, #0
 80053c6:	bd70      	pop	{r4, r5, r6, pc}
 80053c8:	6802      	ldr	r2, [r0, #0]
 80053ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80053ce:	2300      	movs	r3, #0
 80053d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80053d4:	e7f7      	b.n	80053c6 <_Balloc+0x66>
 80053d6:	bf00      	nop
 80053d8:	08006f57 	.word	0x08006f57
 80053dc:	08006fd7 	.word	0x08006fd7

080053e0 <_Bfree>:
 80053e0:	b570      	push	{r4, r5, r6, lr}
 80053e2:	69c6      	ldr	r6, [r0, #28]
 80053e4:	4605      	mov	r5, r0
 80053e6:	460c      	mov	r4, r1
 80053e8:	b976      	cbnz	r6, 8005408 <_Bfree+0x28>
 80053ea:	2010      	movs	r0, #16
 80053ec:	f7ff ff04 	bl	80051f8 <malloc>
 80053f0:	4602      	mov	r2, r0
 80053f2:	61e8      	str	r0, [r5, #28]
 80053f4:	b920      	cbnz	r0, 8005400 <_Bfree+0x20>
 80053f6:	218f      	movs	r1, #143	; 0x8f
 80053f8:	4b08      	ldr	r3, [pc, #32]	; (800541c <_Bfree+0x3c>)
 80053fa:	4809      	ldr	r0, [pc, #36]	; (8005420 <_Bfree+0x40>)
 80053fc:	f000 fd62 	bl	8005ec4 <__assert_func>
 8005400:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005404:	6006      	str	r6, [r0, #0]
 8005406:	60c6      	str	r6, [r0, #12]
 8005408:	b13c      	cbz	r4, 800541a <_Bfree+0x3a>
 800540a:	69eb      	ldr	r3, [r5, #28]
 800540c:	6862      	ldr	r2, [r4, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005414:	6021      	str	r1, [r4, #0]
 8005416:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800541a:	bd70      	pop	{r4, r5, r6, pc}
 800541c:	08006f57 	.word	0x08006f57
 8005420:	08006fd7 	.word	0x08006fd7

08005424 <__multadd>:
 8005424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005428:	4607      	mov	r7, r0
 800542a:	460c      	mov	r4, r1
 800542c:	461e      	mov	r6, r3
 800542e:	2000      	movs	r0, #0
 8005430:	690d      	ldr	r5, [r1, #16]
 8005432:	f101 0c14 	add.w	ip, r1, #20
 8005436:	f8dc 3000 	ldr.w	r3, [ip]
 800543a:	3001      	adds	r0, #1
 800543c:	b299      	uxth	r1, r3
 800543e:	fb02 6101 	mla	r1, r2, r1, r6
 8005442:	0c1e      	lsrs	r6, r3, #16
 8005444:	0c0b      	lsrs	r3, r1, #16
 8005446:	fb02 3306 	mla	r3, r2, r6, r3
 800544a:	b289      	uxth	r1, r1
 800544c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005450:	4285      	cmp	r5, r0
 8005452:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005456:	f84c 1b04 	str.w	r1, [ip], #4
 800545a:	dcec      	bgt.n	8005436 <__multadd+0x12>
 800545c:	b30e      	cbz	r6, 80054a2 <__multadd+0x7e>
 800545e:	68a3      	ldr	r3, [r4, #8]
 8005460:	42ab      	cmp	r3, r5
 8005462:	dc19      	bgt.n	8005498 <__multadd+0x74>
 8005464:	6861      	ldr	r1, [r4, #4]
 8005466:	4638      	mov	r0, r7
 8005468:	3101      	adds	r1, #1
 800546a:	f7ff ff79 	bl	8005360 <_Balloc>
 800546e:	4680      	mov	r8, r0
 8005470:	b928      	cbnz	r0, 800547e <__multadd+0x5a>
 8005472:	4602      	mov	r2, r0
 8005474:	21ba      	movs	r1, #186	; 0xba
 8005476:	4b0c      	ldr	r3, [pc, #48]	; (80054a8 <__multadd+0x84>)
 8005478:	480c      	ldr	r0, [pc, #48]	; (80054ac <__multadd+0x88>)
 800547a:	f000 fd23 	bl	8005ec4 <__assert_func>
 800547e:	6922      	ldr	r2, [r4, #16]
 8005480:	f104 010c 	add.w	r1, r4, #12
 8005484:	3202      	adds	r2, #2
 8005486:	0092      	lsls	r2, r2, #2
 8005488:	300c      	adds	r0, #12
 800548a:	f000 fd0d 	bl	8005ea8 <memcpy>
 800548e:	4621      	mov	r1, r4
 8005490:	4638      	mov	r0, r7
 8005492:	f7ff ffa5 	bl	80053e0 <_Bfree>
 8005496:	4644      	mov	r4, r8
 8005498:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800549c:	3501      	adds	r5, #1
 800549e:	615e      	str	r6, [r3, #20]
 80054a0:	6125      	str	r5, [r4, #16]
 80054a2:	4620      	mov	r0, r4
 80054a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054a8:	08006fc6 	.word	0x08006fc6
 80054ac:	08006fd7 	.word	0x08006fd7

080054b0 <__hi0bits>:
 80054b0:	0c02      	lsrs	r2, r0, #16
 80054b2:	0412      	lsls	r2, r2, #16
 80054b4:	4603      	mov	r3, r0
 80054b6:	b9ca      	cbnz	r2, 80054ec <__hi0bits+0x3c>
 80054b8:	0403      	lsls	r3, r0, #16
 80054ba:	2010      	movs	r0, #16
 80054bc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80054c0:	bf04      	itt	eq
 80054c2:	021b      	lsleq	r3, r3, #8
 80054c4:	3008      	addeq	r0, #8
 80054c6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80054ca:	bf04      	itt	eq
 80054cc:	011b      	lsleq	r3, r3, #4
 80054ce:	3004      	addeq	r0, #4
 80054d0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80054d4:	bf04      	itt	eq
 80054d6:	009b      	lsleq	r3, r3, #2
 80054d8:	3002      	addeq	r0, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	db05      	blt.n	80054ea <__hi0bits+0x3a>
 80054de:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80054e2:	f100 0001 	add.w	r0, r0, #1
 80054e6:	bf08      	it	eq
 80054e8:	2020      	moveq	r0, #32
 80054ea:	4770      	bx	lr
 80054ec:	2000      	movs	r0, #0
 80054ee:	e7e5      	b.n	80054bc <__hi0bits+0xc>

080054f0 <__lo0bits>:
 80054f0:	6803      	ldr	r3, [r0, #0]
 80054f2:	4602      	mov	r2, r0
 80054f4:	f013 0007 	ands.w	r0, r3, #7
 80054f8:	d00b      	beq.n	8005512 <__lo0bits+0x22>
 80054fa:	07d9      	lsls	r1, r3, #31
 80054fc:	d421      	bmi.n	8005542 <__lo0bits+0x52>
 80054fe:	0798      	lsls	r0, r3, #30
 8005500:	bf49      	itett	mi
 8005502:	085b      	lsrmi	r3, r3, #1
 8005504:	089b      	lsrpl	r3, r3, #2
 8005506:	2001      	movmi	r0, #1
 8005508:	6013      	strmi	r3, [r2, #0]
 800550a:	bf5c      	itt	pl
 800550c:	2002      	movpl	r0, #2
 800550e:	6013      	strpl	r3, [r2, #0]
 8005510:	4770      	bx	lr
 8005512:	b299      	uxth	r1, r3
 8005514:	b909      	cbnz	r1, 800551a <__lo0bits+0x2a>
 8005516:	2010      	movs	r0, #16
 8005518:	0c1b      	lsrs	r3, r3, #16
 800551a:	b2d9      	uxtb	r1, r3
 800551c:	b909      	cbnz	r1, 8005522 <__lo0bits+0x32>
 800551e:	3008      	adds	r0, #8
 8005520:	0a1b      	lsrs	r3, r3, #8
 8005522:	0719      	lsls	r1, r3, #28
 8005524:	bf04      	itt	eq
 8005526:	091b      	lsreq	r3, r3, #4
 8005528:	3004      	addeq	r0, #4
 800552a:	0799      	lsls	r1, r3, #30
 800552c:	bf04      	itt	eq
 800552e:	089b      	lsreq	r3, r3, #2
 8005530:	3002      	addeq	r0, #2
 8005532:	07d9      	lsls	r1, r3, #31
 8005534:	d403      	bmi.n	800553e <__lo0bits+0x4e>
 8005536:	085b      	lsrs	r3, r3, #1
 8005538:	f100 0001 	add.w	r0, r0, #1
 800553c:	d003      	beq.n	8005546 <__lo0bits+0x56>
 800553e:	6013      	str	r3, [r2, #0]
 8005540:	4770      	bx	lr
 8005542:	2000      	movs	r0, #0
 8005544:	4770      	bx	lr
 8005546:	2020      	movs	r0, #32
 8005548:	4770      	bx	lr
	...

0800554c <__i2b>:
 800554c:	b510      	push	{r4, lr}
 800554e:	460c      	mov	r4, r1
 8005550:	2101      	movs	r1, #1
 8005552:	f7ff ff05 	bl	8005360 <_Balloc>
 8005556:	4602      	mov	r2, r0
 8005558:	b928      	cbnz	r0, 8005566 <__i2b+0x1a>
 800555a:	f240 1145 	movw	r1, #325	; 0x145
 800555e:	4b04      	ldr	r3, [pc, #16]	; (8005570 <__i2b+0x24>)
 8005560:	4804      	ldr	r0, [pc, #16]	; (8005574 <__i2b+0x28>)
 8005562:	f000 fcaf 	bl	8005ec4 <__assert_func>
 8005566:	2301      	movs	r3, #1
 8005568:	6144      	str	r4, [r0, #20]
 800556a:	6103      	str	r3, [r0, #16]
 800556c:	bd10      	pop	{r4, pc}
 800556e:	bf00      	nop
 8005570:	08006fc6 	.word	0x08006fc6
 8005574:	08006fd7 	.word	0x08006fd7

08005578 <__multiply>:
 8005578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800557c:	4691      	mov	r9, r2
 800557e:	690a      	ldr	r2, [r1, #16]
 8005580:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005584:	460c      	mov	r4, r1
 8005586:	429a      	cmp	r2, r3
 8005588:	bfbe      	ittt	lt
 800558a:	460b      	movlt	r3, r1
 800558c:	464c      	movlt	r4, r9
 800558e:	4699      	movlt	r9, r3
 8005590:	6927      	ldr	r7, [r4, #16]
 8005592:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005596:	68a3      	ldr	r3, [r4, #8]
 8005598:	6861      	ldr	r1, [r4, #4]
 800559a:	eb07 060a 	add.w	r6, r7, sl
 800559e:	42b3      	cmp	r3, r6
 80055a0:	b085      	sub	sp, #20
 80055a2:	bfb8      	it	lt
 80055a4:	3101      	addlt	r1, #1
 80055a6:	f7ff fedb 	bl	8005360 <_Balloc>
 80055aa:	b930      	cbnz	r0, 80055ba <__multiply+0x42>
 80055ac:	4602      	mov	r2, r0
 80055ae:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80055b2:	4b43      	ldr	r3, [pc, #268]	; (80056c0 <__multiply+0x148>)
 80055b4:	4843      	ldr	r0, [pc, #268]	; (80056c4 <__multiply+0x14c>)
 80055b6:	f000 fc85 	bl	8005ec4 <__assert_func>
 80055ba:	f100 0514 	add.w	r5, r0, #20
 80055be:	462b      	mov	r3, r5
 80055c0:	2200      	movs	r2, #0
 80055c2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80055c6:	4543      	cmp	r3, r8
 80055c8:	d321      	bcc.n	800560e <__multiply+0x96>
 80055ca:	f104 0314 	add.w	r3, r4, #20
 80055ce:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80055d2:	f109 0314 	add.w	r3, r9, #20
 80055d6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80055da:	9202      	str	r2, [sp, #8]
 80055dc:	1b3a      	subs	r2, r7, r4
 80055de:	3a15      	subs	r2, #21
 80055e0:	f022 0203 	bic.w	r2, r2, #3
 80055e4:	3204      	adds	r2, #4
 80055e6:	f104 0115 	add.w	r1, r4, #21
 80055ea:	428f      	cmp	r7, r1
 80055ec:	bf38      	it	cc
 80055ee:	2204      	movcc	r2, #4
 80055f0:	9201      	str	r2, [sp, #4]
 80055f2:	9a02      	ldr	r2, [sp, #8]
 80055f4:	9303      	str	r3, [sp, #12]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d80c      	bhi.n	8005614 <__multiply+0x9c>
 80055fa:	2e00      	cmp	r6, #0
 80055fc:	dd03      	ble.n	8005606 <__multiply+0x8e>
 80055fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005602:	2b00      	cmp	r3, #0
 8005604:	d05a      	beq.n	80056bc <__multiply+0x144>
 8005606:	6106      	str	r6, [r0, #16]
 8005608:	b005      	add	sp, #20
 800560a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800560e:	f843 2b04 	str.w	r2, [r3], #4
 8005612:	e7d8      	b.n	80055c6 <__multiply+0x4e>
 8005614:	f8b3 a000 	ldrh.w	sl, [r3]
 8005618:	f1ba 0f00 	cmp.w	sl, #0
 800561c:	d023      	beq.n	8005666 <__multiply+0xee>
 800561e:	46a9      	mov	r9, r5
 8005620:	f04f 0c00 	mov.w	ip, #0
 8005624:	f104 0e14 	add.w	lr, r4, #20
 8005628:	f85e 2b04 	ldr.w	r2, [lr], #4
 800562c:	f8d9 1000 	ldr.w	r1, [r9]
 8005630:	fa1f fb82 	uxth.w	fp, r2
 8005634:	b289      	uxth	r1, r1
 8005636:	fb0a 110b 	mla	r1, sl, fp, r1
 800563a:	4461      	add	r1, ip
 800563c:	f8d9 c000 	ldr.w	ip, [r9]
 8005640:	0c12      	lsrs	r2, r2, #16
 8005642:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005646:	fb0a c202 	mla	r2, sl, r2, ip
 800564a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800564e:	b289      	uxth	r1, r1
 8005650:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005654:	4577      	cmp	r7, lr
 8005656:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800565a:	f849 1b04 	str.w	r1, [r9], #4
 800565e:	d8e3      	bhi.n	8005628 <__multiply+0xb0>
 8005660:	9a01      	ldr	r2, [sp, #4]
 8005662:	f845 c002 	str.w	ip, [r5, r2]
 8005666:	9a03      	ldr	r2, [sp, #12]
 8005668:	3304      	adds	r3, #4
 800566a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800566e:	f1b9 0f00 	cmp.w	r9, #0
 8005672:	d021      	beq.n	80056b8 <__multiply+0x140>
 8005674:	46ae      	mov	lr, r5
 8005676:	f04f 0a00 	mov.w	sl, #0
 800567a:	6829      	ldr	r1, [r5, #0]
 800567c:	f104 0c14 	add.w	ip, r4, #20
 8005680:	f8bc b000 	ldrh.w	fp, [ip]
 8005684:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005688:	b289      	uxth	r1, r1
 800568a:	fb09 220b 	mla	r2, r9, fp, r2
 800568e:	4452      	add	r2, sl
 8005690:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005694:	f84e 1b04 	str.w	r1, [lr], #4
 8005698:	f85c 1b04 	ldr.w	r1, [ip], #4
 800569c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80056a0:	f8be 1000 	ldrh.w	r1, [lr]
 80056a4:	4567      	cmp	r7, ip
 80056a6:	fb09 110a 	mla	r1, r9, sl, r1
 80056aa:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80056ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80056b2:	d8e5      	bhi.n	8005680 <__multiply+0x108>
 80056b4:	9a01      	ldr	r2, [sp, #4]
 80056b6:	50a9      	str	r1, [r5, r2]
 80056b8:	3504      	adds	r5, #4
 80056ba:	e79a      	b.n	80055f2 <__multiply+0x7a>
 80056bc:	3e01      	subs	r6, #1
 80056be:	e79c      	b.n	80055fa <__multiply+0x82>
 80056c0:	08006fc6 	.word	0x08006fc6
 80056c4:	08006fd7 	.word	0x08006fd7

080056c8 <__pow5mult>:
 80056c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056cc:	4615      	mov	r5, r2
 80056ce:	f012 0203 	ands.w	r2, r2, #3
 80056d2:	4606      	mov	r6, r0
 80056d4:	460f      	mov	r7, r1
 80056d6:	d007      	beq.n	80056e8 <__pow5mult+0x20>
 80056d8:	4c25      	ldr	r4, [pc, #148]	; (8005770 <__pow5mult+0xa8>)
 80056da:	3a01      	subs	r2, #1
 80056dc:	2300      	movs	r3, #0
 80056de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80056e2:	f7ff fe9f 	bl	8005424 <__multadd>
 80056e6:	4607      	mov	r7, r0
 80056e8:	10ad      	asrs	r5, r5, #2
 80056ea:	d03d      	beq.n	8005768 <__pow5mult+0xa0>
 80056ec:	69f4      	ldr	r4, [r6, #28]
 80056ee:	b97c      	cbnz	r4, 8005710 <__pow5mult+0x48>
 80056f0:	2010      	movs	r0, #16
 80056f2:	f7ff fd81 	bl	80051f8 <malloc>
 80056f6:	4602      	mov	r2, r0
 80056f8:	61f0      	str	r0, [r6, #28]
 80056fa:	b928      	cbnz	r0, 8005708 <__pow5mult+0x40>
 80056fc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005700:	4b1c      	ldr	r3, [pc, #112]	; (8005774 <__pow5mult+0xac>)
 8005702:	481d      	ldr	r0, [pc, #116]	; (8005778 <__pow5mult+0xb0>)
 8005704:	f000 fbde 	bl	8005ec4 <__assert_func>
 8005708:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800570c:	6004      	str	r4, [r0, #0]
 800570e:	60c4      	str	r4, [r0, #12]
 8005710:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005714:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005718:	b94c      	cbnz	r4, 800572e <__pow5mult+0x66>
 800571a:	f240 2171 	movw	r1, #625	; 0x271
 800571e:	4630      	mov	r0, r6
 8005720:	f7ff ff14 	bl	800554c <__i2b>
 8005724:	2300      	movs	r3, #0
 8005726:	4604      	mov	r4, r0
 8005728:	f8c8 0008 	str.w	r0, [r8, #8]
 800572c:	6003      	str	r3, [r0, #0]
 800572e:	f04f 0900 	mov.w	r9, #0
 8005732:	07eb      	lsls	r3, r5, #31
 8005734:	d50a      	bpl.n	800574c <__pow5mult+0x84>
 8005736:	4639      	mov	r1, r7
 8005738:	4622      	mov	r2, r4
 800573a:	4630      	mov	r0, r6
 800573c:	f7ff ff1c 	bl	8005578 <__multiply>
 8005740:	4680      	mov	r8, r0
 8005742:	4639      	mov	r1, r7
 8005744:	4630      	mov	r0, r6
 8005746:	f7ff fe4b 	bl	80053e0 <_Bfree>
 800574a:	4647      	mov	r7, r8
 800574c:	106d      	asrs	r5, r5, #1
 800574e:	d00b      	beq.n	8005768 <__pow5mult+0xa0>
 8005750:	6820      	ldr	r0, [r4, #0]
 8005752:	b938      	cbnz	r0, 8005764 <__pow5mult+0x9c>
 8005754:	4622      	mov	r2, r4
 8005756:	4621      	mov	r1, r4
 8005758:	4630      	mov	r0, r6
 800575a:	f7ff ff0d 	bl	8005578 <__multiply>
 800575e:	6020      	str	r0, [r4, #0]
 8005760:	f8c0 9000 	str.w	r9, [r0]
 8005764:	4604      	mov	r4, r0
 8005766:	e7e4      	b.n	8005732 <__pow5mult+0x6a>
 8005768:	4638      	mov	r0, r7
 800576a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800576e:	bf00      	nop
 8005770:	08007120 	.word	0x08007120
 8005774:	08006f57 	.word	0x08006f57
 8005778:	08006fd7 	.word	0x08006fd7

0800577c <__lshift>:
 800577c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005780:	460c      	mov	r4, r1
 8005782:	4607      	mov	r7, r0
 8005784:	4691      	mov	r9, r2
 8005786:	6923      	ldr	r3, [r4, #16]
 8005788:	6849      	ldr	r1, [r1, #4]
 800578a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800578e:	68a3      	ldr	r3, [r4, #8]
 8005790:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005794:	f108 0601 	add.w	r6, r8, #1
 8005798:	42b3      	cmp	r3, r6
 800579a:	db0b      	blt.n	80057b4 <__lshift+0x38>
 800579c:	4638      	mov	r0, r7
 800579e:	f7ff fddf 	bl	8005360 <_Balloc>
 80057a2:	4605      	mov	r5, r0
 80057a4:	b948      	cbnz	r0, 80057ba <__lshift+0x3e>
 80057a6:	4602      	mov	r2, r0
 80057a8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80057ac:	4b27      	ldr	r3, [pc, #156]	; (800584c <__lshift+0xd0>)
 80057ae:	4828      	ldr	r0, [pc, #160]	; (8005850 <__lshift+0xd4>)
 80057b0:	f000 fb88 	bl	8005ec4 <__assert_func>
 80057b4:	3101      	adds	r1, #1
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	e7ee      	b.n	8005798 <__lshift+0x1c>
 80057ba:	2300      	movs	r3, #0
 80057bc:	f100 0114 	add.w	r1, r0, #20
 80057c0:	f100 0210 	add.w	r2, r0, #16
 80057c4:	4618      	mov	r0, r3
 80057c6:	4553      	cmp	r3, sl
 80057c8:	db33      	blt.n	8005832 <__lshift+0xb6>
 80057ca:	6920      	ldr	r0, [r4, #16]
 80057cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80057d0:	f104 0314 	add.w	r3, r4, #20
 80057d4:	f019 091f 	ands.w	r9, r9, #31
 80057d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80057dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80057e0:	d02b      	beq.n	800583a <__lshift+0xbe>
 80057e2:	468a      	mov	sl, r1
 80057e4:	2200      	movs	r2, #0
 80057e6:	f1c9 0e20 	rsb	lr, r9, #32
 80057ea:	6818      	ldr	r0, [r3, #0]
 80057ec:	fa00 f009 	lsl.w	r0, r0, r9
 80057f0:	4310      	orrs	r0, r2
 80057f2:	f84a 0b04 	str.w	r0, [sl], #4
 80057f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80057fa:	459c      	cmp	ip, r3
 80057fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8005800:	d8f3      	bhi.n	80057ea <__lshift+0x6e>
 8005802:	ebac 0304 	sub.w	r3, ip, r4
 8005806:	3b15      	subs	r3, #21
 8005808:	f023 0303 	bic.w	r3, r3, #3
 800580c:	3304      	adds	r3, #4
 800580e:	f104 0015 	add.w	r0, r4, #21
 8005812:	4584      	cmp	ip, r0
 8005814:	bf38      	it	cc
 8005816:	2304      	movcc	r3, #4
 8005818:	50ca      	str	r2, [r1, r3]
 800581a:	b10a      	cbz	r2, 8005820 <__lshift+0xa4>
 800581c:	f108 0602 	add.w	r6, r8, #2
 8005820:	3e01      	subs	r6, #1
 8005822:	4638      	mov	r0, r7
 8005824:	4621      	mov	r1, r4
 8005826:	612e      	str	r6, [r5, #16]
 8005828:	f7ff fdda 	bl	80053e0 <_Bfree>
 800582c:	4628      	mov	r0, r5
 800582e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005832:	f842 0f04 	str.w	r0, [r2, #4]!
 8005836:	3301      	adds	r3, #1
 8005838:	e7c5      	b.n	80057c6 <__lshift+0x4a>
 800583a:	3904      	subs	r1, #4
 800583c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005840:	459c      	cmp	ip, r3
 8005842:	f841 2f04 	str.w	r2, [r1, #4]!
 8005846:	d8f9      	bhi.n	800583c <__lshift+0xc0>
 8005848:	e7ea      	b.n	8005820 <__lshift+0xa4>
 800584a:	bf00      	nop
 800584c:	08006fc6 	.word	0x08006fc6
 8005850:	08006fd7 	.word	0x08006fd7

08005854 <__mcmp>:
 8005854:	4603      	mov	r3, r0
 8005856:	690a      	ldr	r2, [r1, #16]
 8005858:	6900      	ldr	r0, [r0, #16]
 800585a:	b530      	push	{r4, r5, lr}
 800585c:	1a80      	subs	r0, r0, r2
 800585e:	d10d      	bne.n	800587c <__mcmp+0x28>
 8005860:	3314      	adds	r3, #20
 8005862:	3114      	adds	r1, #20
 8005864:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005868:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800586c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005870:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005874:	4295      	cmp	r5, r2
 8005876:	d002      	beq.n	800587e <__mcmp+0x2a>
 8005878:	d304      	bcc.n	8005884 <__mcmp+0x30>
 800587a:	2001      	movs	r0, #1
 800587c:	bd30      	pop	{r4, r5, pc}
 800587e:	42a3      	cmp	r3, r4
 8005880:	d3f4      	bcc.n	800586c <__mcmp+0x18>
 8005882:	e7fb      	b.n	800587c <__mcmp+0x28>
 8005884:	f04f 30ff 	mov.w	r0, #4294967295
 8005888:	e7f8      	b.n	800587c <__mcmp+0x28>
	...

0800588c <__mdiff>:
 800588c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005890:	460d      	mov	r5, r1
 8005892:	4607      	mov	r7, r0
 8005894:	4611      	mov	r1, r2
 8005896:	4628      	mov	r0, r5
 8005898:	4614      	mov	r4, r2
 800589a:	f7ff ffdb 	bl	8005854 <__mcmp>
 800589e:	1e06      	subs	r6, r0, #0
 80058a0:	d111      	bne.n	80058c6 <__mdiff+0x3a>
 80058a2:	4631      	mov	r1, r6
 80058a4:	4638      	mov	r0, r7
 80058a6:	f7ff fd5b 	bl	8005360 <_Balloc>
 80058aa:	4602      	mov	r2, r0
 80058ac:	b928      	cbnz	r0, 80058ba <__mdiff+0x2e>
 80058ae:	f240 2137 	movw	r1, #567	; 0x237
 80058b2:	4b3a      	ldr	r3, [pc, #232]	; (800599c <__mdiff+0x110>)
 80058b4:	483a      	ldr	r0, [pc, #232]	; (80059a0 <__mdiff+0x114>)
 80058b6:	f000 fb05 	bl	8005ec4 <__assert_func>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80058c0:	4610      	mov	r0, r2
 80058c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c6:	bfa4      	itt	ge
 80058c8:	4623      	movge	r3, r4
 80058ca:	462c      	movge	r4, r5
 80058cc:	4638      	mov	r0, r7
 80058ce:	6861      	ldr	r1, [r4, #4]
 80058d0:	bfa6      	itte	ge
 80058d2:	461d      	movge	r5, r3
 80058d4:	2600      	movge	r6, #0
 80058d6:	2601      	movlt	r6, #1
 80058d8:	f7ff fd42 	bl	8005360 <_Balloc>
 80058dc:	4602      	mov	r2, r0
 80058de:	b918      	cbnz	r0, 80058e8 <__mdiff+0x5c>
 80058e0:	f240 2145 	movw	r1, #581	; 0x245
 80058e4:	4b2d      	ldr	r3, [pc, #180]	; (800599c <__mdiff+0x110>)
 80058e6:	e7e5      	b.n	80058b4 <__mdiff+0x28>
 80058e8:	f102 0814 	add.w	r8, r2, #20
 80058ec:	46c2      	mov	sl, r8
 80058ee:	f04f 0c00 	mov.w	ip, #0
 80058f2:	6927      	ldr	r7, [r4, #16]
 80058f4:	60c6      	str	r6, [r0, #12]
 80058f6:	692e      	ldr	r6, [r5, #16]
 80058f8:	f104 0014 	add.w	r0, r4, #20
 80058fc:	f105 0914 	add.w	r9, r5, #20
 8005900:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005904:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005908:	3410      	adds	r4, #16
 800590a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800590e:	f859 3b04 	ldr.w	r3, [r9], #4
 8005912:	fa1f f18b 	uxth.w	r1, fp
 8005916:	4461      	add	r1, ip
 8005918:	fa1f fc83 	uxth.w	ip, r3
 800591c:	0c1b      	lsrs	r3, r3, #16
 800591e:	eba1 010c 	sub.w	r1, r1, ip
 8005922:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005926:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800592a:	b289      	uxth	r1, r1
 800592c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005930:	454e      	cmp	r6, r9
 8005932:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005936:	f84a 1b04 	str.w	r1, [sl], #4
 800593a:	d8e6      	bhi.n	800590a <__mdiff+0x7e>
 800593c:	1b73      	subs	r3, r6, r5
 800593e:	3b15      	subs	r3, #21
 8005940:	f023 0303 	bic.w	r3, r3, #3
 8005944:	3515      	adds	r5, #21
 8005946:	3304      	adds	r3, #4
 8005948:	42ae      	cmp	r6, r5
 800594a:	bf38      	it	cc
 800594c:	2304      	movcc	r3, #4
 800594e:	4418      	add	r0, r3
 8005950:	4443      	add	r3, r8
 8005952:	461e      	mov	r6, r3
 8005954:	4605      	mov	r5, r0
 8005956:	4575      	cmp	r5, lr
 8005958:	d30e      	bcc.n	8005978 <__mdiff+0xec>
 800595a:	f10e 0103 	add.w	r1, lr, #3
 800595e:	1a09      	subs	r1, r1, r0
 8005960:	f021 0103 	bic.w	r1, r1, #3
 8005964:	3803      	subs	r0, #3
 8005966:	4586      	cmp	lr, r0
 8005968:	bf38      	it	cc
 800596a:	2100      	movcc	r1, #0
 800596c:	440b      	add	r3, r1
 800596e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005972:	b189      	cbz	r1, 8005998 <__mdiff+0x10c>
 8005974:	6117      	str	r7, [r2, #16]
 8005976:	e7a3      	b.n	80058c0 <__mdiff+0x34>
 8005978:	f855 8b04 	ldr.w	r8, [r5], #4
 800597c:	fa1f f188 	uxth.w	r1, r8
 8005980:	4461      	add	r1, ip
 8005982:	140c      	asrs	r4, r1, #16
 8005984:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005988:	b289      	uxth	r1, r1
 800598a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800598e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005992:	f846 1b04 	str.w	r1, [r6], #4
 8005996:	e7de      	b.n	8005956 <__mdiff+0xca>
 8005998:	3f01      	subs	r7, #1
 800599a:	e7e8      	b.n	800596e <__mdiff+0xe2>
 800599c:	08006fc6 	.word	0x08006fc6
 80059a0:	08006fd7 	.word	0x08006fd7

080059a4 <__d2b>:
 80059a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059a6:	2101      	movs	r1, #1
 80059a8:	4617      	mov	r7, r2
 80059aa:	461c      	mov	r4, r3
 80059ac:	9e08      	ldr	r6, [sp, #32]
 80059ae:	f7ff fcd7 	bl	8005360 <_Balloc>
 80059b2:	4605      	mov	r5, r0
 80059b4:	b930      	cbnz	r0, 80059c4 <__d2b+0x20>
 80059b6:	4602      	mov	r2, r0
 80059b8:	f240 310f 	movw	r1, #783	; 0x30f
 80059bc:	4b22      	ldr	r3, [pc, #136]	; (8005a48 <__d2b+0xa4>)
 80059be:	4823      	ldr	r0, [pc, #140]	; (8005a4c <__d2b+0xa8>)
 80059c0:	f000 fa80 	bl	8005ec4 <__assert_func>
 80059c4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80059c8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80059cc:	bb24      	cbnz	r4, 8005a18 <__d2b+0x74>
 80059ce:	2f00      	cmp	r7, #0
 80059d0:	9301      	str	r3, [sp, #4]
 80059d2:	d026      	beq.n	8005a22 <__d2b+0x7e>
 80059d4:	4668      	mov	r0, sp
 80059d6:	9700      	str	r7, [sp, #0]
 80059d8:	f7ff fd8a 	bl	80054f0 <__lo0bits>
 80059dc:	e9dd 1200 	ldrd	r1, r2, [sp]
 80059e0:	b1e8      	cbz	r0, 8005a1e <__d2b+0x7a>
 80059e2:	f1c0 0320 	rsb	r3, r0, #32
 80059e6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ea:	430b      	orrs	r3, r1
 80059ec:	40c2      	lsrs	r2, r0
 80059ee:	616b      	str	r3, [r5, #20]
 80059f0:	9201      	str	r2, [sp, #4]
 80059f2:	9b01      	ldr	r3, [sp, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	bf14      	ite	ne
 80059f8:	2102      	movne	r1, #2
 80059fa:	2101      	moveq	r1, #1
 80059fc:	61ab      	str	r3, [r5, #24]
 80059fe:	6129      	str	r1, [r5, #16]
 8005a00:	b1bc      	cbz	r4, 8005a32 <__d2b+0x8e>
 8005a02:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005a06:	4404      	add	r4, r0
 8005a08:	6034      	str	r4, [r6, #0]
 8005a0a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a10:	6018      	str	r0, [r3, #0]
 8005a12:	4628      	mov	r0, r5
 8005a14:	b003      	add	sp, #12
 8005a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a1c:	e7d7      	b.n	80059ce <__d2b+0x2a>
 8005a1e:	6169      	str	r1, [r5, #20]
 8005a20:	e7e7      	b.n	80059f2 <__d2b+0x4e>
 8005a22:	a801      	add	r0, sp, #4
 8005a24:	f7ff fd64 	bl	80054f0 <__lo0bits>
 8005a28:	9b01      	ldr	r3, [sp, #4]
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	616b      	str	r3, [r5, #20]
 8005a2e:	3020      	adds	r0, #32
 8005a30:	e7e5      	b.n	80059fe <__d2b+0x5a>
 8005a32:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005a36:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8005a3a:	6030      	str	r0, [r6, #0]
 8005a3c:	6918      	ldr	r0, [r3, #16]
 8005a3e:	f7ff fd37 	bl	80054b0 <__hi0bits>
 8005a42:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005a46:	e7e2      	b.n	8005a0e <__d2b+0x6a>
 8005a48:	08006fc6 	.word	0x08006fc6
 8005a4c:	08006fd7 	.word	0x08006fd7

08005a50 <__ssputs_r>:
 8005a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a54:	461f      	mov	r7, r3
 8005a56:	688e      	ldr	r6, [r1, #8]
 8005a58:	4682      	mov	sl, r0
 8005a5a:	42be      	cmp	r6, r7
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	4690      	mov	r8, r2
 8005a60:	680b      	ldr	r3, [r1, #0]
 8005a62:	d82c      	bhi.n	8005abe <__ssputs_r+0x6e>
 8005a64:	898a      	ldrh	r2, [r1, #12]
 8005a66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a6a:	d026      	beq.n	8005aba <__ssputs_r+0x6a>
 8005a6c:	6965      	ldr	r5, [r4, #20]
 8005a6e:	6909      	ldr	r1, [r1, #16]
 8005a70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a74:	eba3 0901 	sub.w	r9, r3, r1
 8005a78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a7c:	1c7b      	adds	r3, r7, #1
 8005a7e:	444b      	add	r3, r9
 8005a80:	106d      	asrs	r5, r5, #1
 8005a82:	429d      	cmp	r5, r3
 8005a84:	bf38      	it	cc
 8005a86:	461d      	movcc	r5, r3
 8005a88:	0553      	lsls	r3, r2, #21
 8005a8a:	d527      	bpl.n	8005adc <__ssputs_r+0x8c>
 8005a8c:	4629      	mov	r1, r5
 8005a8e:	f7ff fbdb 	bl	8005248 <_malloc_r>
 8005a92:	4606      	mov	r6, r0
 8005a94:	b360      	cbz	r0, 8005af0 <__ssputs_r+0xa0>
 8005a96:	464a      	mov	r2, r9
 8005a98:	6921      	ldr	r1, [r4, #16]
 8005a9a:	f000 fa05 	bl	8005ea8 <memcpy>
 8005a9e:	89a3      	ldrh	r3, [r4, #12]
 8005aa0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa8:	81a3      	strh	r3, [r4, #12]
 8005aaa:	6126      	str	r6, [r4, #16]
 8005aac:	444e      	add	r6, r9
 8005aae:	6026      	str	r6, [r4, #0]
 8005ab0:	463e      	mov	r6, r7
 8005ab2:	6165      	str	r5, [r4, #20]
 8005ab4:	eba5 0509 	sub.w	r5, r5, r9
 8005ab8:	60a5      	str	r5, [r4, #8]
 8005aba:	42be      	cmp	r6, r7
 8005abc:	d900      	bls.n	8005ac0 <__ssputs_r+0x70>
 8005abe:	463e      	mov	r6, r7
 8005ac0:	4632      	mov	r2, r6
 8005ac2:	4641      	mov	r1, r8
 8005ac4:	6820      	ldr	r0, [r4, #0]
 8005ac6:	f000 f9c5 	bl	8005e54 <memmove>
 8005aca:	2000      	movs	r0, #0
 8005acc:	68a3      	ldr	r3, [r4, #8]
 8005ace:	1b9b      	subs	r3, r3, r6
 8005ad0:	60a3      	str	r3, [r4, #8]
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	4433      	add	r3, r6
 8005ad6:	6023      	str	r3, [r4, #0]
 8005ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005adc:	462a      	mov	r2, r5
 8005ade:	f000 fa35 	bl	8005f4c <_realloc_r>
 8005ae2:	4606      	mov	r6, r0
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d1e0      	bne.n	8005aaa <__ssputs_r+0x5a>
 8005ae8:	4650      	mov	r0, sl
 8005aea:	6921      	ldr	r1, [r4, #16]
 8005aec:	f7ff fb3c 	bl	8005168 <_free_r>
 8005af0:	230c      	movs	r3, #12
 8005af2:	f8ca 3000 	str.w	r3, [sl]
 8005af6:	89a3      	ldrh	r3, [r4, #12]
 8005af8:	f04f 30ff 	mov.w	r0, #4294967295
 8005afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b00:	81a3      	strh	r3, [r4, #12]
 8005b02:	e7e9      	b.n	8005ad8 <__ssputs_r+0x88>

08005b04 <_svfiprintf_r>:
 8005b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b08:	4698      	mov	r8, r3
 8005b0a:	898b      	ldrh	r3, [r1, #12]
 8005b0c:	4607      	mov	r7, r0
 8005b0e:	061b      	lsls	r3, r3, #24
 8005b10:	460d      	mov	r5, r1
 8005b12:	4614      	mov	r4, r2
 8005b14:	b09d      	sub	sp, #116	; 0x74
 8005b16:	d50e      	bpl.n	8005b36 <_svfiprintf_r+0x32>
 8005b18:	690b      	ldr	r3, [r1, #16]
 8005b1a:	b963      	cbnz	r3, 8005b36 <_svfiprintf_r+0x32>
 8005b1c:	2140      	movs	r1, #64	; 0x40
 8005b1e:	f7ff fb93 	bl	8005248 <_malloc_r>
 8005b22:	6028      	str	r0, [r5, #0]
 8005b24:	6128      	str	r0, [r5, #16]
 8005b26:	b920      	cbnz	r0, 8005b32 <_svfiprintf_r+0x2e>
 8005b28:	230c      	movs	r3, #12
 8005b2a:	603b      	str	r3, [r7, #0]
 8005b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b30:	e0d0      	b.n	8005cd4 <_svfiprintf_r+0x1d0>
 8005b32:	2340      	movs	r3, #64	; 0x40
 8005b34:	616b      	str	r3, [r5, #20]
 8005b36:	2300      	movs	r3, #0
 8005b38:	9309      	str	r3, [sp, #36]	; 0x24
 8005b3a:	2320      	movs	r3, #32
 8005b3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b40:	2330      	movs	r3, #48	; 0x30
 8005b42:	f04f 0901 	mov.w	r9, #1
 8005b46:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b4a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005cec <_svfiprintf_r+0x1e8>
 8005b4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b52:	4623      	mov	r3, r4
 8005b54:	469a      	mov	sl, r3
 8005b56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b5a:	b10a      	cbz	r2, 8005b60 <_svfiprintf_r+0x5c>
 8005b5c:	2a25      	cmp	r2, #37	; 0x25
 8005b5e:	d1f9      	bne.n	8005b54 <_svfiprintf_r+0x50>
 8005b60:	ebba 0b04 	subs.w	fp, sl, r4
 8005b64:	d00b      	beq.n	8005b7e <_svfiprintf_r+0x7a>
 8005b66:	465b      	mov	r3, fp
 8005b68:	4622      	mov	r2, r4
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	4638      	mov	r0, r7
 8005b6e:	f7ff ff6f 	bl	8005a50 <__ssputs_r>
 8005b72:	3001      	adds	r0, #1
 8005b74:	f000 80a9 	beq.w	8005cca <_svfiprintf_r+0x1c6>
 8005b78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b7a:	445a      	add	r2, fp
 8005b7c:	9209      	str	r2, [sp, #36]	; 0x24
 8005b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 80a1 	beq.w	8005cca <_svfiprintf_r+0x1c6>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b92:	f10a 0a01 	add.w	sl, sl, #1
 8005b96:	9304      	str	r3, [sp, #16]
 8005b98:	9307      	str	r3, [sp, #28]
 8005b9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b9e:	931a      	str	r3, [sp, #104]	; 0x68
 8005ba0:	4654      	mov	r4, sl
 8005ba2:	2205      	movs	r2, #5
 8005ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ba8:	4850      	ldr	r0, [pc, #320]	; (8005cec <_svfiprintf_r+0x1e8>)
 8005baa:	f7fe fc5f 	bl	800446c <memchr>
 8005bae:	9a04      	ldr	r2, [sp, #16]
 8005bb0:	b9d8      	cbnz	r0, 8005bea <_svfiprintf_r+0xe6>
 8005bb2:	06d0      	lsls	r0, r2, #27
 8005bb4:	bf44      	itt	mi
 8005bb6:	2320      	movmi	r3, #32
 8005bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bbc:	0711      	lsls	r1, r2, #28
 8005bbe:	bf44      	itt	mi
 8005bc0:	232b      	movmi	r3, #43	; 0x2b
 8005bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8005bca:	2b2a      	cmp	r3, #42	; 0x2a
 8005bcc:	d015      	beq.n	8005bfa <_svfiprintf_r+0xf6>
 8005bce:	4654      	mov	r4, sl
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	f04f 0c0a 	mov.w	ip, #10
 8005bd6:	9a07      	ldr	r2, [sp, #28]
 8005bd8:	4621      	mov	r1, r4
 8005bda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bde:	3b30      	subs	r3, #48	; 0x30
 8005be0:	2b09      	cmp	r3, #9
 8005be2:	d94d      	bls.n	8005c80 <_svfiprintf_r+0x17c>
 8005be4:	b1b0      	cbz	r0, 8005c14 <_svfiprintf_r+0x110>
 8005be6:	9207      	str	r2, [sp, #28]
 8005be8:	e014      	b.n	8005c14 <_svfiprintf_r+0x110>
 8005bea:	eba0 0308 	sub.w	r3, r0, r8
 8005bee:	fa09 f303 	lsl.w	r3, r9, r3
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	46a2      	mov	sl, r4
 8005bf6:	9304      	str	r3, [sp, #16]
 8005bf8:	e7d2      	b.n	8005ba0 <_svfiprintf_r+0x9c>
 8005bfa:	9b03      	ldr	r3, [sp, #12]
 8005bfc:	1d19      	adds	r1, r3, #4
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	9103      	str	r1, [sp, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	bfbb      	ittet	lt
 8005c06:	425b      	neglt	r3, r3
 8005c08:	f042 0202 	orrlt.w	r2, r2, #2
 8005c0c:	9307      	strge	r3, [sp, #28]
 8005c0e:	9307      	strlt	r3, [sp, #28]
 8005c10:	bfb8      	it	lt
 8005c12:	9204      	strlt	r2, [sp, #16]
 8005c14:	7823      	ldrb	r3, [r4, #0]
 8005c16:	2b2e      	cmp	r3, #46	; 0x2e
 8005c18:	d10c      	bne.n	8005c34 <_svfiprintf_r+0x130>
 8005c1a:	7863      	ldrb	r3, [r4, #1]
 8005c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c1e:	d134      	bne.n	8005c8a <_svfiprintf_r+0x186>
 8005c20:	9b03      	ldr	r3, [sp, #12]
 8005c22:	3402      	adds	r4, #2
 8005c24:	1d1a      	adds	r2, r3, #4
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	9203      	str	r2, [sp, #12]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	bfb8      	it	lt
 8005c2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c32:	9305      	str	r3, [sp, #20]
 8005c34:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005cf0 <_svfiprintf_r+0x1ec>
 8005c38:	2203      	movs	r2, #3
 8005c3a:	4650      	mov	r0, sl
 8005c3c:	7821      	ldrb	r1, [r4, #0]
 8005c3e:	f7fe fc15 	bl	800446c <memchr>
 8005c42:	b138      	cbz	r0, 8005c54 <_svfiprintf_r+0x150>
 8005c44:	2240      	movs	r2, #64	; 0x40
 8005c46:	9b04      	ldr	r3, [sp, #16]
 8005c48:	eba0 000a 	sub.w	r0, r0, sl
 8005c4c:	4082      	lsls	r2, r0
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	3401      	adds	r4, #1
 8005c52:	9304      	str	r3, [sp, #16]
 8005c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c58:	2206      	movs	r2, #6
 8005c5a:	4826      	ldr	r0, [pc, #152]	; (8005cf4 <_svfiprintf_r+0x1f0>)
 8005c5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c60:	f7fe fc04 	bl	800446c <memchr>
 8005c64:	2800      	cmp	r0, #0
 8005c66:	d038      	beq.n	8005cda <_svfiprintf_r+0x1d6>
 8005c68:	4b23      	ldr	r3, [pc, #140]	; (8005cf8 <_svfiprintf_r+0x1f4>)
 8005c6a:	bb1b      	cbnz	r3, 8005cb4 <_svfiprintf_r+0x1b0>
 8005c6c:	9b03      	ldr	r3, [sp, #12]
 8005c6e:	3307      	adds	r3, #7
 8005c70:	f023 0307 	bic.w	r3, r3, #7
 8005c74:	3308      	adds	r3, #8
 8005c76:	9303      	str	r3, [sp, #12]
 8005c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c7a:	4433      	add	r3, r6
 8005c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c7e:	e768      	b.n	8005b52 <_svfiprintf_r+0x4e>
 8005c80:	460c      	mov	r4, r1
 8005c82:	2001      	movs	r0, #1
 8005c84:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c88:	e7a6      	b.n	8005bd8 <_svfiprintf_r+0xd4>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f04f 0c0a 	mov.w	ip, #10
 8005c90:	4619      	mov	r1, r3
 8005c92:	3401      	adds	r4, #1
 8005c94:	9305      	str	r3, [sp, #20]
 8005c96:	4620      	mov	r0, r4
 8005c98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c9c:	3a30      	subs	r2, #48	; 0x30
 8005c9e:	2a09      	cmp	r2, #9
 8005ca0:	d903      	bls.n	8005caa <_svfiprintf_r+0x1a6>
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0c6      	beq.n	8005c34 <_svfiprintf_r+0x130>
 8005ca6:	9105      	str	r1, [sp, #20]
 8005ca8:	e7c4      	b.n	8005c34 <_svfiprintf_r+0x130>
 8005caa:	4604      	mov	r4, r0
 8005cac:	2301      	movs	r3, #1
 8005cae:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cb2:	e7f0      	b.n	8005c96 <_svfiprintf_r+0x192>
 8005cb4:	ab03      	add	r3, sp, #12
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	462a      	mov	r2, r5
 8005cba:	4638      	mov	r0, r7
 8005cbc:	4b0f      	ldr	r3, [pc, #60]	; (8005cfc <_svfiprintf_r+0x1f8>)
 8005cbe:	a904      	add	r1, sp, #16
 8005cc0:	f7fd fe80 	bl	80039c4 <_printf_float>
 8005cc4:	1c42      	adds	r2, r0, #1
 8005cc6:	4606      	mov	r6, r0
 8005cc8:	d1d6      	bne.n	8005c78 <_svfiprintf_r+0x174>
 8005cca:	89ab      	ldrh	r3, [r5, #12]
 8005ccc:	065b      	lsls	r3, r3, #25
 8005cce:	f53f af2d 	bmi.w	8005b2c <_svfiprintf_r+0x28>
 8005cd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cd4:	b01d      	add	sp, #116	; 0x74
 8005cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cda:	ab03      	add	r3, sp, #12
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	462a      	mov	r2, r5
 8005ce0:	4638      	mov	r0, r7
 8005ce2:	4b06      	ldr	r3, [pc, #24]	; (8005cfc <_svfiprintf_r+0x1f8>)
 8005ce4:	a904      	add	r1, sp, #16
 8005ce6:	f7fe f90d 	bl	8003f04 <_printf_i>
 8005cea:	e7eb      	b.n	8005cc4 <_svfiprintf_r+0x1c0>
 8005cec:	0800712c 	.word	0x0800712c
 8005cf0:	08007132 	.word	0x08007132
 8005cf4:	08007136 	.word	0x08007136
 8005cf8:	080039c5 	.word	0x080039c5
 8005cfc:	08005a51 	.word	0x08005a51

08005d00 <__sflush_r>:
 8005d00:	898a      	ldrh	r2, [r1, #12]
 8005d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d04:	4605      	mov	r5, r0
 8005d06:	0710      	lsls	r0, r2, #28
 8005d08:	460c      	mov	r4, r1
 8005d0a:	d457      	bmi.n	8005dbc <__sflush_r+0xbc>
 8005d0c:	684b      	ldr	r3, [r1, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	dc04      	bgt.n	8005d1c <__sflush_r+0x1c>
 8005d12:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	dc01      	bgt.n	8005d1c <__sflush_r+0x1c>
 8005d18:	2000      	movs	r0, #0
 8005d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d1e:	2e00      	cmp	r6, #0
 8005d20:	d0fa      	beq.n	8005d18 <__sflush_r+0x18>
 8005d22:	2300      	movs	r3, #0
 8005d24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d28:	682f      	ldr	r7, [r5, #0]
 8005d2a:	6a21      	ldr	r1, [r4, #32]
 8005d2c:	602b      	str	r3, [r5, #0]
 8005d2e:	d032      	beq.n	8005d96 <__sflush_r+0x96>
 8005d30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d32:	89a3      	ldrh	r3, [r4, #12]
 8005d34:	075a      	lsls	r2, r3, #29
 8005d36:	d505      	bpl.n	8005d44 <__sflush_r+0x44>
 8005d38:	6863      	ldr	r3, [r4, #4]
 8005d3a:	1ac0      	subs	r0, r0, r3
 8005d3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d3e:	b10b      	cbz	r3, 8005d44 <__sflush_r+0x44>
 8005d40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d42:	1ac0      	subs	r0, r0, r3
 8005d44:	2300      	movs	r3, #0
 8005d46:	4602      	mov	r2, r0
 8005d48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	6a21      	ldr	r1, [r4, #32]
 8005d4e:	47b0      	blx	r6
 8005d50:	1c43      	adds	r3, r0, #1
 8005d52:	89a3      	ldrh	r3, [r4, #12]
 8005d54:	d106      	bne.n	8005d64 <__sflush_r+0x64>
 8005d56:	6829      	ldr	r1, [r5, #0]
 8005d58:	291d      	cmp	r1, #29
 8005d5a:	d82b      	bhi.n	8005db4 <__sflush_r+0xb4>
 8005d5c:	4a28      	ldr	r2, [pc, #160]	; (8005e00 <__sflush_r+0x100>)
 8005d5e:	410a      	asrs	r2, r1
 8005d60:	07d6      	lsls	r6, r2, #31
 8005d62:	d427      	bmi.n	8005db4 <__sflush_r+0xb4>
 8005d64:	2200      	movs	r2, #0
 8005d66:	6062      	str	r2, [r4, #4]
 8005d68:	6922      	ldr	r2, [r4, #16]
 8005d6a:	04d9      	lsls	r1, r3, #19
 8005d6c:	6022      	str	r2, [r4, #0]
 8005d6e:	d504      	bpl.n	8005d7a <__sflush_r+0x7a>
 8005d70:	1c42      	adds	r2, r0, #1
 8005d72:	d101      	bne.n	8005d78 <__sflush_r+0x78>
 8005d74:	682b      	ldr	r3, [r5, #0]
 8005d76:	b903      	cbnz	r3, 8005d7a <__sflush_r+0x7a>
 8005d78:	6560      	str	r0, [r4, #84]	; 0x54
 8005d7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d7c:	602f      	str	r7, [r5, #0]
 8005d7e:	2900      	cmp	r1, #0
 8005d80:	d0ca      	beq.n	8005d18 <__sflush_r+0x18>
 8005d82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d86:	4299      	cmp	r1, r3
 8005d88:	d002      	beq.n	8005d90 <__sflush_r+0x90>
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f7ff f9ec 	bl	8005168 <_free_r>
 8005d90:	2000      	movs	r0, #0
 8005d92:	6360      	str	r0, [r4, #52]	; 0x34
 8005d94:	e7c1      	b.n	8005d1a <__sflush_r+0x1a>
 8005d96:	2301      	movs	r3, #1
 8005d98:	4628      	mov	r0, r5
 8005d9a:	47b0      	blx	r6
 8005d9c:	1c41      	adds	r1, r0, #1
 8005d9e:	d1c8      	bne.n	8005d32 <__sflush_r+0x32>
 8005da0:	682b      	ldr	r3, [r5, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0c5      	beq.n	8005d32 <__sflush_r+0x32>
 8005da6:	2b1d      	cmp	r3, #29
 8005da8:	d001      	beq.n	8005dae <__sflush_r+0xae>
 8005daa:	2b16      	cmp	r3, #22
 8005dac:	d101      	bne.n	8005db2 <__sflush_r+0xb2>
 8005dae:	602f      	str	r7, [r5, #0]
 8005db0:	e7b2      	b.n	8005d18 <__sflush_r+0x18>
 8005db2:	89a3      	ldrh	r3, [r4, #12]
 8005db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005db8:	81a3      	strh	r3, [r4, #12]
 8005dba:	e7ae      	b.n	8005d1a <__sflush_r+0x1a>
 8005dbc:	690f      	ldr	r7, [r1, #16]
 8005dbe:	2f00      	cmp	r7, #0
 8005dc0:	d0aa      	beq.n	8005d18 <__sflush_r+0x18>
 8005dc2:	0793      	lsls	r3, r2, #30
 8005dc4:	bf18      	it	ne
 8005dc6:	2300      	movne	r3, #0
 8005dc8:	680e      	ldr	r6, [r1, #0]
 8005dca:	bf08      	it	eq
 8005dcc:	694b      	ldreq	r3, [r1, #20]
 8005dce:	1bf6      	subs	r6, r6, r7
 8005dd0:	600f      	str	r7, [r1, #0]
 8005dd2:	608b      	str	r3, [r1, #8]
 8005dd4:	2e00      	cmp	r6, #0
 8005dd6:	dd9f      	ble.n	8005d18 <__sflush_r+0x18>
 8005dd8:	4633      	mov	r3, r6
 8005dda:	463a      	mov	r2, r7
 8005ddc:	4628      	mov	r0, r5
 8005dde:	6a21      	ldr	r1, [r4, #32]
 8005de0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005de4:	47e0      	blx	ip
 8005de6:	2800      	cmp	r0, #0
 8005de8:	dc06      	bgt.n	8005df8 <__sflush_r+0xf8>
 8005dea:	89a3      	ldrh	r3, [r4, #12]
 8005dec:	f04f 30ff 	mov.w	r0, #4294967295
 8005df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005df4:	81a3      	strh	r3, [r4, #12]
 8005df6:	e790      	b.n	8005d1a <__sflush_r+0x1a>
 8005df8:	4407      	add	r7, r0
 8005dfa:	1a36      	subs	r6, r6, r0
 8005dfc:	e7ea      	b.n	8005dd4 <__sflush_r+0xd4>
 8005dfe:	bf00      	nop
 8005e00:	dfbffffe 	.word	0xdfbffffe

08005e04 <_fflush_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	690b      	ldr	r3, [r1, #16]
 8005e08:	4605      	mov	r5, r0
 8005e0a:	460c      	mov	r4, r1
 8005e0c:	b913      	cbnz	r3, 8005e14 <_fflush_r+0x10>
 8005e0e:	2500      	movs	r5, #0
 8005e10:	4628      	mov	r0, r5
 8005e12:	bd38      	pop	{r3, r4, r5, pc}
 8005e14:	b118      	cbz	r0, 8005e1e <_fflush_r+0x1a>
 8005e16:	6a03      	ldr	r3, [r0, #32]
 8005e18:	b90b      	cbnz	r3, 8005e1e <_fflush_r+0x1a>
 8005e1a:	f7fe fa0f 	bl	800423c <__sinit>
 8005e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d0f3      	beq.n	8005e0e <_fflush_r+0xa>
 8005e26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e28:	07d0      	lsls	r0, r2, #31
 8005e2a:	d404      	bmi.n	8005e36 <_fflush_r+0x32>
 8005e2c:	0599      	lsls	r1, r3, #22
 8005e2e:	d402      	bmi.n	8005e36 <_fflush_r+0x32>
 8005e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e32:	f7fe fb19 	bl	8004468 <__retarget_lock_acquire_recursive>
 8005e36:	4628      	mov	r0, r5
 8005e38:	4621      	mov	r1, r4
 8005e3a:	f7ff ff61 	bl	8005d00 <__sflush_r>
 8005e3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e40:	4605      	mov	r5, r0
 8005e42:	07da      	lsls	r2, r3, #31
 8005e44:	d4e4      	bmi.n	8005e10 <_fflush_r+0xc>
 8005e46:	89a3      	ldrh	r3, [r4, #12]
 8005e48:	059b      	lsls	r3, r3, #22
 8005e4a:	d4e1      	bmi.n	8005e10 <_fflush_r+0xc>
 8005e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e4e:	f7fe fb0c 	bl	800446a <__retarget_lock_release_recursive>
 8005e52:	e7dd      	b.n	8005e10 <_fflush_r+0xc>

08005e54 <memmove>:
 8005e54:	4288      	cmp	r0, r1
 8005e56:	b510      	push	{r4, lr}
 8005e58:	eb01 0402 	add.w	r4, r1, r2
 8005e5c:	d902      	bls.n	8005e64 <memmove+0x10>
 8005e5e:	4284      	cmp	r4, r0
 8005e60:	4623      	mov	r3, r4
 8005e62:	d807      	bhi.n	8005e74 <memmove+0x20>
 8005e64:	1e43      	subs	r3, r0, #1
 8005e66:	42a1      	cmp	r1, r4
 8005e68:	d008      	beq.n	8005e7c <memmove+0x28>
 8005e6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e72:	e7f8      	b.n	8005e66 <memmove+0x12>
 8005e74:	4601      	mov	r1, r0
 8005e76:	4402      	add	r2, r0
 8005e78:	428a      	cmp	r2, r1
 8005e7a:	d100      	bne.n	8005e7e <memmove+0x2a>
 8005e7c:	bd10      	pop	{r4, pc}
 8005e7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e86:	e7f7      	b.n	8005e78 <memmove+0x24>

08005e88 <_sbrk_r>:
 8005e88:	b538      	push	{r3, r4, r5, lr}
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	4d05      	ldr	r5, [pc, #20]	; (8005ea4 <_sbrk_r+0x1c>)
 8005e8e:	4604      	mov	r4, r0
 8005e90:	4608      	mov	r0, r1
 8005e92:	602b      	str	r3, [r5, #0]
 8005e94:	f7fb fc9e 	bl	80017d4 <_sbrk>
 8005e98:	1c43      	adds	r3, r0, #1
 8005e9a:	d102      	bne.n	8005ea2 <_sbrk_r+0x1a>
 8005e9c:	682b      	ldr	r3, [r5, #0]
 8005e9e:	b103      	cbz	r3, 8005ea2 <_sbrk_r+0x1a>
 8005ea0:	6023      	str	r3, [r4, #0]
 8005ea2:	bd38      	pop	{r3, r4, r5, pc}
 8005ea4:	2000043c 	.word	0x2000043c

08005ea8 <memcpy>:
 8005ea8:	440a      	add	r2, r1
 8005eaa:	4291      	cmp	r1, r2
 8005eac:	f100 33ff 	add.w	r3, r0, #4294967295
 8005eb0:	d100      	bne.n	8005eb4 <memcpy+0xc>
 8005eb2:	4770      	bx	lr
 8005eb4:	b510      	push	{r4, lr}
 8005eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eba:	4291      	cmp	r1, r2
 8005ebc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ec0:	d1f9      	bne.n	8005eb6 <memcpy+0xe>
 8005ec2:	bd10      	pop	{r4, pc}

08005ec4 <__assert_func>:
 8005ec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ec6:	4614      	mov	r4, r2
 8005ec8:	461a      	mov	r2, r3
 8005eca:	4b09      	ldr	r3, [pc, #36]	; (8005ef0 <__assert_func+0x2c>)
 8005ecc:	4605      	mov	r5, r0
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68d8      	ldr	r0, [r3, #12]
 8005ed2:	b14c      	cbz	r4, 8005ee8 <__assert_func+0x24>
 8005ed4:	4b07      	ldr	r3, [pc, #28]	; (8005ef4 <__assert_func+0x30>)
 8005ed6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005eda:	9100      	str	r1, [sp, #0]
 8005edc:	462b      	mov	r3, r5
 8005ede:	4906      	ldr	r1, [pc, #24]	; (8005ef8 <__assert_func+0x34>)
 8005ee0:	f000 f870 	bl	8005fc4 <fiprintf>
 8005ee4:	f000 f880 	bl	8005fe8 <abort>
 8005ee8:	4b04      	ldr	r3, [pc, #16]	; (8005efc <__assert_func+0x38>)
 8005eea:	461c      	mov	r4, r3
 8005eec:	e7f3      	b.n	8005ed6 <__assert_func+0x12>
 8005eee:	bf00      	nop
 8005ef0:	20000064 	.word	0x20000064
 8005ef4:	08007147 	.word	0x08007147
 8005ef8:	08007154 	.word	0x08007154
 8005efc:	08007182 	.word	0x08007182

08005f00 <_calloc_r>:
 8005f00:	b570      	push	{r4, r5, r6, lr}
 8005f02:	fba1 5402 	umull	r5, r4, r1, r2
 8005f06:	b934      	cbnz	r4, 8005f16 <_calloc_r+0x16>
 8005f08:	4629      	mov	r1, r5
 8005f0a:	f7ff f99d 	bl	8005248 <_malloc_r>
 8005f0e:	4606      	mov	r6, r0
 8005f10:	b928      	cbnz	r0, 8005f1e <_calloc_r+0x1e>
 8005f12:	4630      	mov	r0, r6
 8005f14:	bd70      	pop	{r4, r5, r6, pc}
 8005f16:	220c      	movs	r2, #12
 8005f18:	2600      	movs	r6, #0
 8005f1a:	6002      	str	r2, [r0, #0]
 8005f1c:	e7f9      	b.n	8005f12 <_calloc_r+0x12>
 8005f1e:	462a      	mov	r2, r5
 8005f20:	4621      	mov	r1, r4
 8005f22:	f7fe fa24 	bl	800436e <memset>
 8005f26:	e7f4      	b.n	8005f12 <_calloc_r+0x12>

08005f28 <__ascii_mbtowc>:
 8005f28:	b082      	sub	sp, #8
 8005f2a:	b901      	cbnz	r1, 8005f2e <__ascii_mbtowc+0x6>
 8005f2c:	a901      	add	r1, sp, #4
 8005f2e:	b142      	cbz	r2, 8005f42 <__ascii_mbtowc+0x1a>
 8005f30:	b14b      	cbz	r3, 8005f46 <__ascii_mbtowc+0x1e>
 8005f32:	7813      	ldrb	r3, [r2, #0]
 8005f34:	600b      	str	r3, [r1, #0]
 8005f36:	7812      	ldrb	r2, [r2, #0]
 8005f38:	1e10      	subs	r0, r2, #0
 8005f3a:	bf18      	it	ne
 8005f3c:	2001      	movne	r0, #1
 8005f3e:	b002      	add	sp, #8
 8005f40:	4770      	bx	lr
 8005f42:	4610      	mov	r0, r2
 8005f44:	e7fb      	b.n	8005f3e <__ascii_mbtowc+0x16>
 8005f46:	f06f 0001 	mvn.w	r0, #1
 8005f4a:	e7f8      	b.n	8005f3e <__ascii_mbtowc+0x16>

08005f4c <_realloc_r>:
 8005f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f50:	4680      	mov	r8, r0
 8005f52:	4614      	mov	r4, r2
 8005f54:	460e      	mov	r6, r1
 8005f56:	b921      	cbnz	r1, 8005f62 <_realloc_r+0x16>
 8005f58:	4611      	mov	r1, r2
 8005f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f5e:	f7ff b973 	b.w	8005248 <_malloc_r>
 8005f62:	b92a      	cbnz	r2, 8005f70 <_realloc_r+0x24>
 8005f64:	f7ff f900 	bl	8005168 <_free_r>
 8005f68:	4625      	mov	r5, r4
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f70:	f000 f841 	bl	8005ff6 <_malloc_usable_size_r>
 8005f74:	4284      	cmp	r4, r0
 8005f76:	4607      	mov	r7, r0
 8005f78:	d802      	bhi.n	8005f80 <_realloc_r+0x34>
 8005f7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f7e:	d812      	bhi.n	8005fa6 <_realloc_r+0x5a>
 8005f80:	4621      	mov	r1, r4
 8005f82:	4640      	mov	r0, r8
 8005f84:	f7ff f960 	bl	8005248 <_malloc_r>
 8005f88:	4605      	mov	r5, r0
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	d0ed      	beq.n	8005f6a <_realloc_r+0x1e>
 8005f8e:	42bc      	cmp	r4, r7
 8005f90:	4622      	mov	r2, r4
 8005f92:	4631      	mov	r1, r6
 8005f94:	bf28      	it	cs
 8005f96:	463a      	movcs	r2, r7
 8005f98:	f7ff ff86 	bl	8005ea8 <memcpy>
 8005f9c:	4631      	mov	r1, r6
 8005f9e:	4640      	mov	r0, r8
 8005fa0:	f7ff f8e2 	bl	8005168 <_free_r>
 8005fa4:	e7e1      	b.n	8005f6a <_realloc_r+0x1e>
 8005fa6:	4635      	mov	r5, r6
 8005fa8:	e7df      	b.n	8005f6a <_realloc_r+0x1e>

08005faa <__ascii_wctomb>:
 8005faa:	4603      	mov	r3, r0
 8005fac:	4608      	mov	r0, r1
 8005fae:	b141      	cbz	r1, 8005fc2 <__ascii_wctomb+0x18>
 8005fb0:	2aff      	cmp	r2, #255	; 0xff
 8005fb2:	d904      	bls.n	8005fbe <__ascii_wctomb+0x14>
 8005fb4:	228a      	movs	r2, #138	; 0x8a
 8005fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8005fba:	601a      	str	r2, [r3, #0]
 8005fbc:	4770      	bx	lr
 8005fbe:	2001      	movs	r0, #1
 8005fc0:	700a      	strb	r2, [r1, #0]
 8005fc2:	4770      	bx	lr

08005fc4 <fiprintf>:
 8005fc4:	b40e      	push	{r1, r2, r3}
 8005fc6:	b503      	push	{r0, r1, lr}
 8005fc8:	4601      	mov	r1, r0
 8005fca:	ab03      	add	r3, sp, #12
 8005fcc:	4805      	ldr	r0, [pc, #20]	; (8005fe4 <fiprintf+0x20>)
 8005fce:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fd2:	6800      	ldr	r0, [r0, #0]
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	f000 f83d 	bl	8006054 <_vfiprintf_r>
 8005fda:	b002      	add	sp, #8
 8005fdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fe0:	b003      	add	sp, #12
 8005fe2:	4770      	bx	lr
 8005fe4:	20000064 	.word	0x20000064

08005fe8 <abort>:
 8005fe8:	2006      	movs	r0, #6
 8005fea:	b508      	push	{r3, lr}
 8005fec:	f000 fa0a 	bl	8006404 <raise>
 8005ff0:	2001      	movs	r0, #1
 8005ff2:	f7fb fb7c 	bl	80016ee <_exit>

08005ff6 <_malloc_usable_size_r>:
 8005ff6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ffa:	1f18      	subs	r0, r3, #4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	bfbc      	itt	lt
 8006000:	580b      	ldrlt	r3, [r1, r0]
 8006002:	18c0      	addlt	r0, r0, r3
 8006004:	4770      	bx	lr

08006006 <__sfputc_r>:
 8006006:	6893      	ldr	r3, [r2, #8]
 8006008:	b410      	push	{r4}
 800600a:	3b01      	subs	r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	6093      	str	r3, [r2, #8]
 8006010:	da07      	bge.n	8006022 <__sfputc_r+0x1c>
 8006012:	6994      	ldr	r4, [r2, #24]
 8006014:	42a3      	cmp	r3, r4
 8006016:	db01      	blt.n	800601c <__sfputc_r+0x16>
 8006018:	290a      	cmp	r1, #10
 800601a:	d102      	bne.n	8006022 <__sfputc_r+0x1c>
 800601c:	bc10      	pop	{r4}
 800601e:	f000 b933 	b.w	8006288 <__swbuf_r>
 8006022:	6813      	ldr	r3, [r2, #0]
 8006024:	1c58      	adds	r0, r3, #1
 8006026:	6010      	str	r0, [r2, #0]
 8006028:	7019      	strb	r1, [r3, #0]
 800602a:	4608      	mov	r0, r1
 800602c:	bc10      	pop	{r4}
 800602e:	4770      	bx	lr

08006030 <__sfputs_r>:
 8006030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006032:	4606      	mov	r6, r0
 8006034:	460f      	mov	r7, r1
 8006036:	4614      	mov	r4, r2
 8006038:	18d5      	adds	r5, r2, r3
 800603a:	42ac      	cmp	r4, r5
 800603c:	d101      	bne.n	8006042 <__sfputs_r+0x12>
 800603e:	2000      	movs	r0, #0
 8006040:	e007      	b.n	8006052 <__sfputs_r+0x22>
 8006042:	463a      	mov	r2, r7
 8006044:	4630      	mov	r0, r6
 8006046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800604a:	f7ff ffdc 	bl	8006006 <__sfputc_r>
 800604e:	1c43      	adds	r3, r0, #1
 8006050:	d1f3      	bne.n	800603a <__sfputs_r+0xa>
 8006052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006054 <_vfiprintf_r>:
 8006054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006058:	460d      	mov	r5, r1
 800605a:	4614      	mov	r4, r2
 800605c:	4698      	mov	r8, r3
 800605e:	4606      	mov	r6, r0
 8006060:	b09d      	sub	sp, #116	; 0x74
 8006062:	b118      	cbz	r0, 800606c <_vfiprintf_r+0x18>
 8006064:	6a03      	ldr	r3, [r0, #32]
 8006066:	b90b      	cbnz	r3, 800606c <_vfiprintf_r+0x18>
 8006068:	f7fe f8e8 	bl	800423c <__sinit>
 800606c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800606e:	07d9      	lsls	r1, r3, #31
 8006070:	d405      	bmi.n	800607e <_vfiprintf_r+0x2a>
 8006072:	89ab      	ldrh	r3, [r5, #12]
 8006074:	059a      	lsls	r2, r3, #22
 8006076:	d402      	bmi.n	800607e <_vfiprintf_r+0x2a>
 8006078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800607a:	f7fe f9f5 	bl	8004468 <__retarget_lock_acquire_recursive>
 800607e:	89ab      	ldrh	r3, [r5, #12]
 8006080:	071b      	lsls	r3, r3, #28
 8006082:	d501      	bpl.n	8006088 <_vfiprintf_r+0x34>
 8006084:	692b      	ldr	r3, [r5, #16]
 8006086:	b99b      	cbnz	r3, 80060b0 <_vfiprintf_r+0x5c>
 8006088:	4629      	mov	r1, r5
 800608a:	4630      	mov	r0, r6
 800608c:	f000 f93a 	bl	8006304 <__swsetup_r>
 8006090:	b170      	cbz	r0, 80060b0 <_vfiprintf_r+0x5c>
 8006092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006094:	07dc      	lsls	r4, r3, #31
 8006096:	d504      	bpl.n	80060a2 <_vfiprintf_r+0x4e>
 8006098:	f04f 30ff 	mov.w	r0, #4294967295
 800609c:	b01d      	add	sp, #116	; 0x74
 800609e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a2:	89ab      	ldrh	r3, [r5, #12]
 80060a4:	0598      	lsls	r0, r3, #22
 80060a6:	d4f7      	bmi.n	8006098 <_vfiprintf_r+0x44>
 80060a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060aa:	f7fe f9de 	bl	800446a <__retarget_lock_release_recursive>
 80060ae:	e7f3      	b.n	8006098 <_vfiprintf_r+0x44>
 80060b0:	2300      	movs	r3, #0
 80060b2:	9309      	str	r3, [sp, #36]	; 0x24
 80060b4:	2320      	movs	r3, #32
 80060b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060ba:	2330      	movs	r3, #48	; 0x30
 80060bc:	f04f 0901 	mov.w	r9, #1
 80060c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80060c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006274 <_vfiprintf_r+0x220>
 80060c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060cc:	4623      	mov	r3, r4
 80060ce:	469a      	mov	sl, r3
 80060d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060d4:	b10a      	cbz	r2, 80060da <_vfiprintf_r+0x86>
 80060d6:	2a25      	cmp	r2, #37	; 0x25
 80060d8:	d1f9      	bne.n	80060ce <_vfiprintf_r+0x7a>
 80060da:	ebba 0b04 	subs.w	fp, sl, r4
 80060de:	d00b      	beq.n	80060f8 <_vfiprintf_r+0xa4>
 80060e0:	465b      	mov	r3, fp
 80060e2:	4622      	mov	r2, r4
 80060e4:	4629      	mov	r1, r5
 80060e6:	4630      	mov	r0, r6
 80060e8:	f7ff ffa2 	bl	8006030 <__sfputs_r>
 80060ec:	3001      	adds	r0, #1
 80060ee:	f000 80a9 	beq.w	8006244 <_vfiprintf_r+0x1f0>
 80060f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060f4:	445a      	add	r2, fp
 80060f6:	9209      	str	r2, [sp, #36]	; 0x24
 80060f8:	f89a 3000 	ldrb.w	r3, [sl]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 80a1 	beq.w	8006244 <_vfiprintf_r+0x1f0>
 8006102:	2300      	movs	r3, #0
 8006104:	f04f 32ff 	mov.w	r2, #4294967295
 8006108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800610c:	f10a 0a01 	add.w	sl, sl, #1
 8006110:	9304      	str	r3, [sp, #16]
 8006112:	9307      	str	r3, [sp, #28]
 8006114:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006118:	931a      	str	r3, [sp, #104]	; 0x68
 800611a:	4654      	mov	r4, sl
 800611c:	2205      	movs	r2, #5
 800611e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006122:	4854      	ldr	r0, [pc, #336]	; (8006274 <_vfiprintf_r+0x220>)
 8006124:	f7fe f9a2 	bl	800446c <memchr>
 8006128:	9a04      	ldr	r2, [sp, #16]
 800612a:	b9d8      	cbnz	r0, 8006164 <_vfiprintf_r+0x110>
 800612c:	06d1      	lsls	r1, r2, #27
 800612e:	bf44      	itt	mi
 8006130:	2320      	movmi	r3, #32
 8006132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006136:	0713      	lsls	r3, r2, #28
 8006138:	bf44      	itt	mi
 800613a:	232b      	movmi	r3, #43	; 0x2b
 800613c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006140:	f89a 3000 	ldrb.w	r3, [sl]
 8006144:	2b2a      	cmp	r3, #42	; 0x2a
 8006146:	d015      	beq.n	8006174 <_vfiprintf_r+0x120>
 8006148:	4654      	mov	r4, sl
 800614a:	2000      	movs	r0, #0
 800614c:	f04f 0c0a 	mov.w	ip, #10
 8006150:	9a07      	ldr	r2, [sp, #28]
 8006152:	4621      	mov	r1, r4
 8006154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006158:	3b30      	subs	r3, #48	; 0x30
 800615a:	2b09      	cmp	r3, #9
 800615c:	d94d      	bls.n	80061fa <_vfiprintf_r+0x1a6>
 800615e:	b1b0      	cbz	r0, 800618e <_vfiprintf_r+0x13a>
 8006160:	9207      	str	r2, [sp, #28]
 8006162:	e014      	b.n	800618e <_vfiprintf_r+0x13a>
 8006164:	eba0 0308 	sub.w	r3, r0, r8
 8006168:	fa09 f303 	lsl.w	r3, r9, r3
 800616c:	4313      	orrs	r3, r2
 800616e:	46a2      	mov	sl, r4
 8006170:	9304      	str	r3, [sp, #16]
 8006172:	e7d2      	b.n	800611a <_vfiprintf_r+0xc6>
 8006174:	9b03      	ldr	r3, [sp, #12]
 8006176:	1d19      	adds	r1, r3, #4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	9103      	str	r1, [sp, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	bfbb      	ittet	lt
 8006180:	425b      	neglt	r3, r3
 8006182:	f042 0202 	orrlt.w	r2, r2, #2
 8006186:	9307      	strge	r3, [sp, #28]
 8006188:	9307      	strlt	r3, [sp, #28]
 800618a:	bfb8      	it	lt
 800618c:	9204      	strlt	r2, [sp, #16]
 800618e:	7823      	ldrb	r3, [r4, #0]
 8006190:	2b2e      	cmp	r3, #46	; 0x2e
 8006192:	d10c      	bne.n	80061ae <_vfiprintf_r+0x15a>
 8006194:	7863      	ldrb	r3, [r4, #1]
 8006196:	2b2a      	cmp	r3, #42	; 0x2a
 8006198:	d134      	bne.n	8006204 <_vfiprintf_r+0x1b0>
 800619a:	9b03      	ldr	r3, [sp, #12]
 800619c:	3402      	adds	r4, #2
 800619e:	1d1a      	adds	r2, r3, #4
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	9203      	str	r2, [sp, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	bfb8      	it	lt
 80061a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80061ac:	9305      	str	r3, [sp, #20]
 80061ae:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006278 <_vfiprintf_r+0x224>
 80061b2:	2203      	movs	r2, #3
 80061b4:	4650      	mov	r0, sl
 80061b6:	7821      	ldrb	r1, [r4, #0]
 80061b8:	f7fe f958 	bl	800446c <memchr>
 80061bc:	b138      	cbz	r0, 80061ce <_vfiprintf_r+0x17a>
 80061be:	2240      	movs	r2, #64	; 0x40
 80061c0:	9b04      	ldr	r3, [sp, #16]
 80061c2:	eba0 000a 	sub.w	r0, r0, sl
 80061c6:	4082      	lsls	r2, r0
 80061c8:	4313      	orrs	r3, r2
 80061ca:	3401      	adds	r4, #1
 80061cc:	9304      	str	r3, [sp, #16]
 80061ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061d2:	2206      	movs	r2, #6
 80061d4:	4829      	ldr	r0, [pc, #164]	; (800627c <_vfiprintf_r+0x228>)
 80061d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061da:	f7fe f947 	bl	800446c <memchr>
 80061de:	2800      	cmp	r0, #0
 80061e0:	d03f      	beq.n	8006262 <_vfiprintf_r+0x20e>
 80061e2:	4b27      	ldr	r3, [pc, #156]	; (8006280 <_vfiprintf_r+0x22c>)
 80061e4:	bb1b      	cbnz	r3, 800622e <_vfiprintf_r+0x1da>
 80061e6:	9b03      	ldr	r3, [sp, #12]
 80061e8:	3307      	adds	r3, #7
 80061ea:	f023 0307 	bic.w	r3, r3, #7
 80061ee:	3308      	adds	r3, #8
 80061f0:	9303      	str	r3, [sp, #12]
 80061f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f4:	443b      	add	r3, r7
 80061f6:	9309      	str	r3, [sp, #36]	; 0x24
 80061f8:	e768      	b.n	80060cc <_vfiprintf_r+0x78>
 80061fa:	460c      	mov	r4, r1
 80061fc:	2001      	movs	r0, #1
 80061fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8006202:	e7a6      	b.n	8006152 <_vfiprintf_r+0xfe>
 8006204:	2300      	movs	r3, #0
 8006206:	f04f 0c0a 	mov.w	ip, #10
 800620a:	4619      	mov	r1, r3
 800620c:	3401      	adds	r4, #1
 800620e:	9305      	str	r3, [sp, #20]
 8006210:	4620      	mov	r0, r4
 8006212:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006216:	3a30      	subs	r2, #48	; 0x30
 8006218:	2a09      	cmp	r2, #9
 800621a:	d903      	bls.n	8006224 <_vfiprintf_r+0x1d0>
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0c6      	beq.n	80061ae <_vfiprintf_r+0x15a>
 8006220:	9105      	str	r1, [sp, #20]
 8006222:	e7c4      	b.n	80061ae <_vfiprintf_r+0x15a>
 8006224:	4604      	mov	r4, r0
 8006226:	2301      	movs	r3, #1
 8006228:	fb0c 2101 	mla	r1, ip, r1, r2
 800622c:	e7f0      	b.n	8006210 <_vfiprintf_r+0x1bc>
 800622e:	ab03      	add	r3, sp, #12
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	462a      	mov	r2, r5
 8006234:	4630      	mov	r0, r6
 8006236:	4b13      	ldr	r3, [pc, #76]	; (8006284 <_vfiprintf_r+0x230>)
 8006238:	a904      	add	r1, sp, #16
 800623a:	f7fd fbc3 	bl	80039c4 <_printf_float>
 800623e:	4607      	mov	r7, r0
 8006240:	1c78      	adds	r0, r7, #1
 8006242:	d1d6      	bne.n	80061f2 <_vfiprintf_r+0x19e>
 8006244:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006246:	07d9      	lsls	r1, r3, #31
 8006248:	d405      	bmi.n	8006256 <_vfiprintf_r+0x202>
 800624a:	89ab      	ldrh	r3, [r5, #12]
 800624c:	059a      	lsls	r2, r3, #22
 800624e:	d402      	bmi.n	8006256 <_vfiprintf_r+0x202>
 8006250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006252:	f7fe f90a 	bl	800446a <__retarget_lock_release_recursive>
 8006256:	89ab      	ldrh	r3, [r5, #12]
 8006258:	065b      	lsls	r3, r3, #25
 800625a:	f53f af1d 	bmi.w	8006098 <_vfiprintf_r+0x44>
 800625e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006260:	e71c      	b.n	800609c <_vfiprintf_r+0x48>
 8006262:	ab03      	add	r3, sp, #12
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	462a      	mov	r2, r5
 8006268:	4630      	mov	r0, r6
 800626a:	4b06      	ldr	r3, [pc, #24]	; (8006284 <_vfiprintf_r+0x230>)
 800626c:	a904      	add	r1, sp, #16
 800626e:	f7fd fe49 	bl	8003f04 <_printf_i>
 8006272:	e7e4      	b.n	800623e <_vfiprintf_r+0x1ea>
 8006274:	0800712c 	.word	0x0800712c
 8006278:	08007132 	.word	0x08007132
 800627c:	08007136 	.word	0x08007136
 8006280:	080039c5 	.word	0x080039c5
 8006284:	08006031 	.word	0x08006031

08006288 <__swbuf_r>:
 8006288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628a:	460e      	mov	r6, r1
 800628c:	4614      	mov	r4, r2
 800628e:	4605      	mov	r5, r0
 8006290:	b118      	cbz	r0, 800629a <__swbuf_r+0x12>
 8006292:	6a03      	ldr	r3, [r0, #32]
 8006294:	b90b      	cbnz	r3, 800629a <__swbuf_r+0x12>
 8006296:	f7fd ffd1 	bl	800423c <__sinit>
 800629a:	69a3      	ldr	r3, [r4, #24]
 800629c:	60a3      	str	r3, [r4, #8]
 800629e:	89a3      	ldrh	r3, [r4, #12]
 80062a0:	071a      	lsls	r2, r3, #28
 80062a2:	d525      	bpl.n	80062f0 <__swbuf_r+0x68>
 80062a4:	6923      	ldr	r3, [r4, #16]
 80062a6:	b31b      	cbz	r3, 80062f0 <__swbuf_r+0x68>
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	6922      	ldr	r2, [r4, #16]
 80062ac:	b2f6      	uxtb	r6, r6
 80062ae:	1a98      	subs	r0, r3, r2
 80062b0:	6963      	ldr	r3, [r4, #20]
 80062b2:	4637      	mov	r7, r6
 80062b4:	4283      	cmp	r3, r0
 80062b6:	dc04      	bgt.n	80062c2 <__swbuf_r+0x3a>
 80062b8:	4621      	mov	r1, r4
 80062ba:	4628      	mov	r0, r5
 80062bc:	f7ff fda2 	bl	8005e04 <_fflush_r>
 80062c0:	b9e0      	cbnz	r0, 80062fc <__swbuf_r+0x74>
 80062c2:	68a3      	ldr	r3, [r4, #8]
 80062c4:	3b01      	subs	r3, #1
 80062c6:	60a3      	str	r3, [r4, #8]
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	6022      	str	r2, [r4, #0]
 80062ce:	701e      	strb	r6, [r3, #0]
 80062d0:	6962      	ldr	r2, [r4, #20]
 80062d2:	1c43      	adds	r3, r0, #1
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d004      	beq.n	80062e2 <__swbuf_r+0x5a>
 80062d8:	89a3      	ldrh	r3, [r4, #12]
 80062da:	07db      	lsls	r3, r3, #31
 80062dc:	d506      	bpl.n	80062ec <__swbuf_r+0x64>
 80062de:	2e0a      	cmp	r6, #10
 80062e0:	d104      	bne.n	80062ec <__swbuf_r+0x64>
 80062e2:	4621      	mov	r1, r4
 80062e4:	4628      	mov	r0, r5
 80062e6:	f7ff fd8d 	bl	8005e04 <_fflush_r>
 80062ea:	b938      	cbnz	r0, 80062fc <__swbuf_r+0x74>
 80062ec:	4638      	mov	r0, r7
 80062ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062f0:	4621      	mov	r1, r4
 80062f2:	4628      	mov	r0, r5
 80062f4:	f000 f806 	bl	8006304 <__swsetup_r>
 80062f8:	2800      	cmp	r0, #0
 80062fa:	d0d5      	beq.n	80062a8 <__swbuf_r+0x20>
 80062fc:	f04f 37ff 	mov.w	r7, #4294967295
 8006300:	e7f4      	b.n	80062ec <__swbuf_r+0x64>
	...

08006304 <__swsetup_r>:
 8006304:	b538      	push	{r3, r4, r5, lr}
 8006306:	4b2a      	ldr	r3, [pc, #168]	; (80063b0 <__swsetup_r+0xac>)
 8006308:	4605      	mov	r5, r0
 800630a:	6818      	ldr	r0, [r3, #0]
 800630c:	460c      	mov	r4, r1
 800630e:	b118      	cbz	r0, 8006318 <__swsetup_r+0x14>
 8006310:	6a03      	ldr	r3, [r0, #32]
 8006312:	b90b      	cbnz	r3, 8006318 <__swsetup_r+0x14>
 8006314:	f7fd ff92 	bl	800423c <__sinit>
 8006318:	89a3      	ldrh	r3, [r4, #12]
 800631a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800631e:	0718      	lsls	r0, r3, #28
 8006320:	d422      	bmi.n	8006368 <__swsetup_r+0x64>
 8006322:	06d9      	lsls	r1, r3, #27
 8006324:	d407      	bmi.n	8006336 <__swsetup_r+0x32>
 8006326:	2309      	movs	r3, #9
 8006328:	602b      	str	r3, [r5, #0]
 800632a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800632e:	f04f 30ff 	mov.w	r0, #4294967295
 8006332:	81a3      	strh	r3, [r4, #12]
 8006334:	e034      	b.n	80063a0 <__swsetup_r+0x9c>
 8006336:	0758      	lsls	r0, r3, #29
 8006338:	d512      	bpl.n	8006360 <__swsetup_r+0x5c>
 800633a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800633c:	b141      	cbz	r1, 8006350 <__swsetup_r+0x4c>
 800633e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006342:	4299      	cmp	r1, r3
 8006344:	d002      	beq.n	800634c <__swsetup_r+0x48>
 8006346:	4628      	mov	r0, r5
 8006348:	f7fe ff0e 	bl	8005168 <_free_r>
 800634c:	2300      	movs	r3, #0
 800634e:	6363      	str	r3, [r4, #52]	; 0x34
 8006350:	89a3      	ldrh	r3, [r4, #12]
 8006352:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006356:	81a3      	strh	r3, [r4, #12]
 8006358:	2300      	movs	r3, #0
 800635a:	6063      	str	r3, [r4, #4]
 800635c:	6923      	ldr	r3, [r4, #16]
 800635e:	6023      	str	r3, [r4, #0]
 8006360:	89a3      	ldrh	r3, [r4, #12]
 8006362:	f043 0308 	orr.w	r3, r3, #8
 8006366:	81a3      	strh	r3, [r4, #12]
 8006368:	6923      	ldr	r3, [r4, #16]
 800636a:	b94b      	cbnz	r3, 8006380 <__swsetup_r+0x7c>
 800636c:	89a3      	ldrh	r3, [r4, #12]
 800636e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006376:	d003      	beq.n	8006380 <__swsetup_r+0x7c>
 8006378:	4621      	mov	r1, r4
 800637a:	4628      	mov	r0, r5
 800637c:	f000 f883 	bl	8006486 <__smakebuf_r>
 8006380:	89a0      	ldrh	r0, [r4, #12]
 8006382:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006386:	f010 0301 	ands.w	r3, r0, #1
 800638a:	d00a      	beq.n	80063a2 <__swsetup_r+0x9e>
 800638c:	2300      	movs	r3, #0
 800638e:	60a3      	str	r3, [r4, #8]
 8006390:	6963      	ldr	r3, [r4, #20]
 8006392:	425b      	negs	r3, r3
 8006394:	61a3      	str	r3, [r4, #24]
 8006396:	6923      	ldr	r3, [r4, #16]
 8006398:	b943      	cbnz	r3, 80063ac <__swsetup_r+0xa8>
 800639a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800639e:	d1c4      	bne.n	800632a <__swsetup_r+0x26>
 80063a0:	bd38      	pop	{r3, r4, r5, pc}
 80063a2:	0781      	lsls	r1, r0, #30
 80063a4:	bf58      	it	pl
 80063a6:	6963      	ldrpl	r3, [r4, #20]
 80063a8:	60a3      	str	r3, [r4, #8]
 80063aa:	e7f4      	b.n	8006396 <__swsetup_r+0x92>
 80063ac:	2000      	movs	r0, #0
 80063ae:	e7f7      	b.n	80063a0 <__swsetup_r+0x9c>
 80063b0:	20000064 	.word	0x20000064

080063b4 <_raise_r>:
 80063b4:	291f      	cmp	r1, #31
 80063b6:	b538      	push	{r3, r4, r5, lr}
 80063b8:	4604      	mov	r4, r0
 80063ba:	460d      	mov	r5, r1
 80063bc:	d904      	bls.n	80063c8 <_raise_r+0x14>
 80063be:	2316      	movs	r3, #22
 80063c0:	6003      	str	r3, [r0, #0]
 80063c2:	f04f 30ff 	mov.w	r0, #4294967295
 80063c6:	bd38      	pop	{r3, r4, r5, pc}
 80063c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80063ca:	b112      	cbz	r2, 80063d2 <_raise_r+0x1e>
 80063cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80063d0:	b94b      	cbnz	r3, 80063e6 <_raise_r+0x32>
 80063d2:	4620      	mov	r0, r4
 80063d4:	f000 f830 	bl	8006438 <_getpid_r>
 80063d8:	462a      	mov	r2, r5
 80063da:	4601      	mov	r1, r0
 80063dc:	4620      	mov	r0, r4
 80063de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063e2:	f000 b817 	b.w	8006414 <_kill_r>
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d00a      	beq.n	8006400 <_raise_r+0x4c>
 80063ea:	1c59      	adds	r1, r3, #1
 80063ec:	d103      	bne.n	80063f6 <_raise_r+0x42>
 80063ee:	2316      	movs	r3, #22
 80063f0:	6003      	str	r3, [r0, #0]
 80063f2:	2001      	movs	r0, #1
 80063f4:	e7e7      	b.n	80063c6 <_raise_r+0x12>
 80063f6:	2400      	movs	r4, #0
 80063f8:	4628      	mov	r0, r5
 80063fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80063fe:	4798      	blx	r3
 8006400:	2000      	movs	r0, #0
 8006402:	e7e0      	b.n	80063c6 <_raise_r+0x12>

08006404 <raise>:
 8006404:	4b02      	ldr	r3, [pc, #8]	; (8006410 <raise+0xc>)
 8006406:	4601      	mov	r1, r0
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	f7ff bfd3 	b.w	80063b4 <_raise_r>
 800640e:	bf00      	nop
 8006410:	20000064 	.word	0x20000064

08006414 <_kill_r>:
 8006414:	b538      	push	{r3, r4, r5, lr}
 8006416:	2300      	movs	r3, #0
 8006418:	4d06      	ldr	r5, [pc, #24]	; (8006434 <_kill_r+0x20>)
 800641a:	4604      	mov	r4, r0
 800641c:	4608      	mov	r0, r1
 800641e:	4611      	mov	r1, r2
 8006420:	602b      	str	r3, [r5, #0]
 8006422:	f7fb f954 	bl	80016ce <_kill>
 8006426:	1c43      	adds	r3, r0, #1
 8006428:	d102      	bne.n	8006430 <_kill_r+0x1c>
 800642a:	682b      	ldr	r3, [r5, #0]
 800642c:	b103      	cbz	r3, 8006430 <_kill_r+0x1c>
 800642e:	6023      	str	r3, [r4, #0]
 8006430:	bd38      	pop	{r3, r4, r5, pc}
 8006432:	bf00      	nop
 8006434:	2000043c 	.word	0x2000043c

08006438 <_getpid_r>:
 8006438:	f7fb b942 	b.w	80016c0 <_getpid>

0800643c <__swhatbuf_r>:
 800643c:	b570      	push	{r4, r5, r6, lr}
 800643e:	460c      	mov	r4, r1
 8006440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006444:	4615      	mov	r5, r2
 8006446:	2900      	cmp	r1, #0
 8006448:	461e      	mov	r6, r3
 800644a:	b096      	sub	sp, #88	; 0x58
 800644c:	da0c      	bge.n	8006468 <__swhatbuf_r+0x2c>
 800644e:	89a3      	ldrh	r3, [r4, #12]
 8006450:	2100      	movs	r1, #0
 8006452:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006456:	bf0c      	ite	eq
 8006458:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800645c:	2340      	movne	r3, #64	; 0x40
 800645e:	2000      	movs	r0, #0
 8006460:	6031      	str	r1, [r6, #0]
 8006462:	602b      	str	r3, [r5, #0]
 8006464:	b016      	add	sp, #88	; 0x58
 8006466:	bd70      	pop	{r4, r5, r6, pc}
 8006468:	466a      	mov	r2, sp
 800646a:	f000 f849 	bl	8006500 <_fstat_r>
 800646e:	2800      	cmp	r0, #0
 8006470:	dbed      	blt.n	800644e <__swhatbuf_r+0x12>
 8006472:	9901      	ldr	r1, [sp, #4]
 8006474:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006478:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800647c:	4259      	negs	r1, r3
 800647e:	4159      	adcs	r1, r3
 8006480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006484:	e7eb      	b.n	800645e <__swhatbuf_r+0x22>

08006486 <__smakebuf_r>:
 8006486:	898b      	ldrh	r3, [r1, #12]
 8006488:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800648a:	079d      	lsls	r5, r3, #30
 800648c:	4606      	mov	r6, r0
 800648e:	460c      	mov	r4, r1
 8006490:	d507      	bpl.n	80064a2 <__smakebuf_r+0x1c>
 8006492:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006496:	6023      	str	r3, [r4, #0]
 8006498:	6123      	str	r3, [r4, #16]
 800649a:	2301      	movs	r3, #1
 800649c:	6163      	str	r3, [r4, #20]
 800649e:	b002      	add	sp, #8
 80064a0:	bd70      	pop	{r4, r5, r6, pc}
 80064a2:	466a      	mov	r2, sp
 80064a4:	ab01      	add	r3, sp, #4
 80064a6:	f7ff ffc9 	bl	800643c <__swhatbuf_r>
 80064aa:	9900      	ldr	r1, [sp, #0]
 80064ac:	4605      	mov	r5, r0
 80064ae:	4630      	mov	r0, r6
 80064b0:	f7fe feca 	bl	8005248 <_malloc_r>
 80064b4:	b948      	cbnz	r0, 80064ca <__smakebuf_r+0x44>
 80064b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ba:	059a      	lsls	r2, r3, #22
 80064bc:	d4ef      	bmi.n	800649e <__smakebuf_r+0x18>
 80064be:	f023 0303 	bic.w	r3, r3, #3
 80064c2:	f043 0302 	orr.w	r3, r3, #2
 80064c6:	81a3      	strh	r3, [r4, #12]
 80064c8:	e7e3      	b.n	8006492 <__smakebuf_r+0xc>
 80064ca:	89a3      	ldrh	r3, [r4, #12]
 80064cc:	6020      	str	r0, [r4, #0]
 80064ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d2:	81a3      	strh	r3, [r4, #12]
 80064d4:	9b00      	ldr	r3, [sp, #0]
 80064d6:	6120      	str	r0, [r4, #16]
 80064d8:	6163      	str	r3, [r4, #20]
 80064da:	9b01      	ldr	r3, [sp, #4]
 80064dc:	b15b      	cbz	r3, 80064f6 <__smakebuf_r+0x70>
 80064de:	4630      	mov	r0, r6
 80064e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064e4:	f000 f81e 	bl	8006524 <_isatty_r>
 80064e8:	b128      	cbz	r0, 80064f6 <__smakebuf_r+0x70>
 80064ea:	89a3      	ldrh	r3, [r4, #12]
 80064ec:	f023 0303 	bic.w	r3, r3, #3
 80064f0:	f043 0301 	orr.w	r3, r3, #1
 80064f4:	81a3      	strh	r3, [r4, #12]
 80064f6:	89a3      	ldrh	r3, [r4, #12]
 80064f8:	431d      	orrs	r5, r3
 80064fa:	81a5      	strh	r5, [r4, #12]
 80064fc:	e7cf      	b.n	800649e <__smakebuf_r+0x18>
	...

08006500 <_fstat_r>:
 8006500:	b538      	push	{r3, r4, r5, lr}
 8006502:	2300      	movs	r3, #0
 8006504:	4d06      	ldr	r5, [pc, #24]	; (8006520 <_fstat_r+0x20>)
 8006506:	4604      	mov	r4, r0
 8006508:	4608      	mov	r0, r1
 800650a:	4611      	mov	r1, r2
 800650c:	602b      	str	r3, [r5, #0]
 800650e:	f7fb f93c 	bl	800178a <_fstat>
 8006512:	1c43      	adds	r3, r0, #1
 8006514:	d102      	bne.n	800651c <_fstat_r+0x1c>
 8006516:	682b      	ldr	r3, [r5, #0]
 8006518:	b103      	cbz	r3, 800651c <_fstat_r+0x1c>
 800651a:	6023      	str	r3, [r4, #0]
 800651c:	bd38      	pop	{r3, r4, r5, pc}
 800651e:	bf00      	nop
 8006520:	2000043c 	.word	0x2000043c

08006524 <_isatty_r>:
 8006524:	b538      	push	{r3, r4, r5, lr}
 8006526:	2300      	movs	r3, #0
 8006528:	4d05      	ldr	r5, [pc, #20]	; (8006540 <_isatty_r+0x1c>)
 800652a:	4604      	mov	r4, r0
 800652c:	4608      	mov	r0, r1
 800652e:	602b      	str	r3, [r5, #0]
 8006530:	f7fb f93a 	bl	80017a8 <_isatty>
 8006534:	1c43      	adds	r3, r0, #1
 8006536:	d102      	bne.n	800653e <_isatty_r+0x1a>
 8006538:	682b      	ldr	r3, [r5, #0]
 800653a:	b103      	cbz	r3, 800653e <_isatty_r+0x1a>
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	bd38      	pop	{r3, r4, r5, pc}
 8006540:	2000043c 	.word	0x2000043c

08006544 <powf>:
 8006544:	b570      	push	{r4, r5, r6, lr}
 8006546:	460c      	mov	r4, r1
 8006548:	4606      	mov	r6, r0
 800654a:	f000 f851 	bl	80065f0 <__ieee754_powf>
 800654e:	4621      	mov	r1, r4
 8006550:	4605      	mov	r5, r0
 8006552:	4620      	mov	r0, r4
 8006554:	f7fa fd6c 	bl	8001030 <__aeabi_fcmpun>
 8006558:	bb68      	cbnz	r0, 80065b6 <powf+0x72>
 800655a:	2100      	movs	r1, #0
 800655c:	4630      	mov	r0, r6
 800655e:	f7fa fd35 	bl	8000fcc <__aeabi_fcmpeq>
 8006562:	b190      	cbz	r0, 800658a <powf+0x46>
 8006564:	2100      	movs	r1, #0
 8006566:	4620      	mov	r0, r4
 8006568:	f7fa fd30 	bl	8000fcc <__aeabi_fcmpeq>
 800656c:	2800      	cmp	r0, #0
 800656e:	d133      	bne.n	80065d8 <powf+0x94>
 8006570:	4620      	mov	r0, r4
 8006572:	f000 f834 	bl	80065de <finitef>
 8006576:	b1f0      	cbz	r0, 80065b6 <powf+0x72>
 8006578:	2100      	movs	r1, #0
 800657a:	4620      	mov	r0, r4
 800657c:	f7fa fd30 	bl	8000fe0 <__aeabi_fcmplt>
 8006580:	b1c8      	cbz	r0, 80065b6 <powf+0x72>
 8006582:	f7fd ff47 	bl	8004414 <__errno>
 8006586:	2322      	movs	r3, #34	; 0x22
 8006588:	e014      	b.n	80065b4 <powf+0x70>
 800658a:	4628      	mov	r0, r5
 800658c:	f000 f827 	bl	80065de <finitef>
 8006590:	b998      	cbnz	r0, 80065ba <powf+0x76>
 8006592:	4630      	mov	r0, r6
 8006594:	f000 f823 	bl	80065de <finitef>
 8006598:	b178      	cbz	r0, 80065ba <powf+0x76>
 800659a:	4620      	mov	r0, r4
 800659c:	f000 f81f 	bl	80065de <finitef>
 80065a0:	b158      	cbz	r0, 80065ba <powf+0x76>
 80065a2:	4629      	mov	r1, r5
 80065a4:	4628      	mov	r0, r5
 80065a6:	f7fa fd43 	bl	8001030 <__aeabi_fcmpun>
 80065aa:	2800      	cmp	r0, #0
 80065ac:	d0e9      	beq.n	8006582 <powf+0x3e>
 80065ae:	f7fd ff31 	bl	8004414 <__errno>
 80065b2:	2321      	movs	r3, #33	; 0x21
 80065b4:	6003      	str	r3, [r0, #0]
 80065b6:	4628      	mov	r0, r5
 80065b8:	bd70      	pop	{r4, r5, r6, pc}
 80065ba:	2100      	movs	r1, #0
 80065bc:	4628      	mov	r0, r5
 80065be:	f7fa fd05 	bl	8000fcc <__aeabi_fcmpeq>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	d0f7      	beq.n	80065b6 <powf+0x72>
 80065c6:	4630      	mov	r0, r6
 80065c8:	f000 f809 	bl	80065de <finitef>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	d0f2      	beq.n	80065b6 <powf+0x72>
 80065d0:	4620      	mov	r0, r4
 80065d2:	f000 f804 	bl	80065de <finitef>
 80065d6:	e7d3      	b.n	8006580 <powf+0x3c>
 80065d8:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 80065dc:	e7eb      	b.n	80065b6 <powf+0x72>

080065de <finitef>:
 80065de:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80065e2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80065e6:	bfac      	ite	ge
 80065e8:	2000      	movge	r0, #0
 80065ea:	2001      	movlt	r0, #1
 80065ec:	4770      	bx	lr
	...

080065f0 <__ieee754_powf>:
 80065f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f4:	f031 4a00 	bics.w	sl, r1, #2147483648	; 0x80000000
 80065f8:	4681      	mov	r9, r0
 80065fa:	460f      	mov	r7, r1
 80065fc:	4680      	mov	r8, r0
 80065fe:	460c      	mov	r4, r1
 8006600:	b087      	sub	sp, #28
 8006602:	d10d      	bne.n	8006620 <__ieee754_powf+0x30>
 8006604:	f480 0880 	eor.w	r8, r0, #4194304	; 0x400000
 8006608:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800660c:	f518 0f00 	cmn.w	r8, #8388608	; 0x800000
 8006610:	f240 8336 	bls.w	8006c80 <__ieee754_powf+0x690>
 8006614:	4639      	mov	r1, r7
 8006616:	4648      	mov	r0, r9
 8006618:	f7fa fa3c 	bl	8000a94 <__addsf3>
 800661c:	4601      	mov	r1, r0
 800661e:	e040      	b.n	80066a2 <__ieee754_powf+0xb2>
 8006620:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8006624:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8006628:	dcf4      	bgt.n	8006614 <__ieee754_powf+0x24>
 800662a:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 800662e:	dd08      	ble.n	8006642 <__ieee754_powf+0x52>
 8006630:	f1b0 5f7e 	cmp.w	r0, #1065353216	; 0x3f800000
 8006634:	d1ee      	bne.n	8006614 <__ieee754_powf+0x24>
 8006636:	f481 0480 	eor.w	r4, r1, #4194304	; 0x400000
 800663a:	0064      	lsls	r4, r4, #1
 800663c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8006640:	e7e6      	b.n	8006610 <__ieee754_powf+0x20>
 8006642:	2800      	cmp	r0, #0
 8006644:	da20      	bge.n	8006688 <__ieee754_powf+0x98>
 8006646:	f1ba 4f97 	cmp.w	sl, #1266679808	; 0x4b800000
 800664a:	da2e      	bge.n	80066aa <__ieee754_powf+0xba>
 800664c:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 8006650:	f2c0 831b 	blt.w	8006c8a <__ieee754_powf+0x69a>
 8006654:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8006658:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800665c:	fa4a f503 	asr.w	r5, sl, r3
 8006660:	fa05 f303 	lsl.w	r3, r5, r3
 8006664:	4553      	cmp	r3, sl
 8006666:	f040 8310 	bne.w	8006c8a <__ieee754_powf+0x69a>
 800666a:	f005 0501 	and.w	r5, r5, #1
 800666e:	f1c5 0502 	rsb	r5, r5, #2
 8006672:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 8006676:	d120      	bne.n	80066ba <__ieee754_powf+0xca>
 8006678:	2c00      	cmp	r4, #0
 800667a:	4649      	mov	r1, r9
 800667c:	da11      	bge.n	80066a2 <__ieee754_powf+0xb2>
 800667e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006682:	f7fa fbc3 	bl	8000e0c <__aeabi_fdiv>
 8006686:	e7c9      	b.n	800661c <__ieee754_powf+0x2c>
 8006688:	2500      	movs	r5, #0
 800668a:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 800668e:	d1f0      	bne.n	8006672 <__ieee754_powf+0x82>
 8006690:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8006694:	f000 82f4 	beq.w	8006c80 <__ieee754_powf+0x690>
 8006698:	dd09      	ble.n	80066ae <__ieee754_powf+0xbe>
 800669a:	2c00      	cmp	r4, #0
 800669c:	f2c0 82f3 	blt.w	8006c86 <__ieee754_powf+0x696>
 80066a0:	4639      	mov	r1, r7
 80066a2:	4608      	mov	r0, r1
 80066a4:	b007      	add	sp, #28
 80066a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066aa:	2502      	movs	r5, #2
 80066ac:	e7ed      	b.n	800668a <__ieee754_powf+0x9a>
 80066ae:	2c00      	cmp	r4, #0
 80066b0:	f280 82e9 	bge.w	8006c86 <__ieee754_powf+0x696>
 80066b4:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 80066b8:	e7f3      	b.n	80066a2 <__ieee754_powf+0xb2>
 80066ba:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80066be:	d104      	bne.n	80066ca <__ieee754_powf+0xda>
 80066c0:	4649      	mov	r1, r9
 80066c2:	4648      	mov	r0, r9
 80066c4:	f7fa faee 	bl	8000ca4 <__aeabi_fmul>
 80066c8:	e7a8      	b.n	800661c <__ieee754_powf+0x2c>
 80066ca:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80066ce:	4648      	mov	r0, r9
 80066d0:	d107      	bne.n	80066e2 <__ieee754_powf+0xf2>
 80066d2:	f1b8 0f00 	cmp.w	r8, #0
 80066d6:	db04      	blt.n	80066e2 <__ieee754_powf+0xf2>
 80066d8:	b007      	add	sp, #28
 80066da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066de:	f000 bb5b 	b.w	8006d98 <__ieee754_sqrtf>
 80066e2:	f000 faeb 	bl	8006cbc <fabsf>
 80066e6:	4601      	mov	r1, r0
 80066e8:	b126      	cbz	r6, 80066f4 <__ieee754_powf+0x104>
 80066ea:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80066ee:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80066f2:	d117      	bne.n	8006724 <__ieee754_powf+0x134>
 80066f4:	2c00      	cmp	r4, #0
 80066f6:	da04      	bge.n	8006702 <__ieee754_powf+0x112>
 80066f8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80066fc:	f7fa fb86 	bl	8000e0c <__aeabi_fdiv>
 8006700:	4601      	mov	r1, r0
 8006702:	f1b8 0f00 	cmp.w	r8, #0
 8006706:	dacc      	bge.n	80066a2 <__ieee754_powf+0xb2>
 8006708:	f1a6 567e 	sub.w	r6, r6, #1065353216	; 0x3f800000
 800670c:	432e      	orrs	r6, r5
 800670e:	d104      	bne.n	800671a <__ieee754_powf+0x12a>
 8006710:	4608      	mov	r0, r1
 8006712:	f7fa f9bd 	bl	8000a90 <__aeabi_fsub>
 8006716:	4601      	mov	r1, r0
 8006718:	e7b3      	b.n	8006682 <__ieee754_powf+0x92>
 800671a:	2d01      	cmp	r5, #1
 800671c:	d1c1      	bne.n	80066a2 <__ieee754_powf+0xb2>
 800671e:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 8006722:	e77b      	b.n	800661c <__ieee754_powf+0x2c>
 8006724:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8006728:	3b01      	subs	r3, #1
 800672a:	9302      	str	r3, [sp, #8]
 800672c:	432b      	orrs	r3, r5
 800672e:	d101      	bne.n	8006734 <__ieee754_powf+0x144>
 8006730:	4649      	mov	r1, r9
 8006732:	e7ed      	b.n	8006710 <__ieee754_powf+0x120>
 8006734:	f1ba 4f9a 	cmp.w	sl, #1291845632	; 0x4d000000
 8006738:	f340 809e 	ble.w	8006878 <__ieee754_powf+0x288>
 800673c:	4b47      	ldr	r3, [pc, #284]	; (800685c <__ieee754_powf+0x26c>)
 800673e:	429e      	cmp	r6, r3
 8006740:	dc07      	bgt.n	8006752 <__ieee754_powf+0x162>
 8006742:	2c00      	cmp	r4, #0
 8006744:	da0a      	bge.n	800675c <__ieee754_powf+0x16c>
 8006746:	2000      	movs	r0, #0
 8006748:	b007      	add	sp, #28
 800674a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674e:	f000 bb1e 	b.w	8006d8e <__math_oflowf>
 8006752:	4b43      	ldr	r3, [pc, #268]	; (8006860 <__ieee754_powf+0x270>)
 8006754:	429e      	cmp	r6, r3
 8006756:	dd07      	ble.n	8006768 <__ieee754_powf+0x178>
 8006758:	2c00      	cmp	r4, #0
 800675a:	dcf4      	bgt.n	8006746 <__ieee754_powf+0x156>
 800675c:	2000      	movs	r0, #0
 800675e:	b007      	add	sp, #28
 8006760:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006764:	f000 bb0f 	b.w	8006d86 <__math_uflowf>
 8006768:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800676c:	f7fa f990 	bl	8000a90 <__aeabi_fsub>
 8006770:	493c      	ldr	r1, [pc, #240]	; (8006864 <__ieee754_powf+0x274>)
 8006772:	4606      	mov	r6, r0
 8006774:	f7fa fa96 	bl	8000ca4 <__aeabi_fmul>
 8006778:	493b      	ldr	r1, [pc, #236]	; (8006868 <__ieee754_powf+0x278>)
 800677a:	4680      	mov	r8, r0
 800677c:	4630      	mov	r0, r6
 800677e:	f7fa fa91 	bl	8000ca4 <__aeabi_fmul>
 8006782:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8006786:	4681      	mov	r9, r0
 8006788:	4630      	mov	r0, r6
 800678a:	f7fa fa8b 	bl	8000ca4 <__aeabi_fmul>
 800678e:	4601      	mov	r1, r0
 8006790:	4836      	ldr	r0, [pc, #216]	; (800686c <__ieee754_powf+0x27c>)
 8006792:	f7fa f97d 	bl	8000a90 <__aeabi_fsub>
 8006796:	4631      	mov	r1, r6
 8006798:	f7fa fa84 	bl	8000ca4 <__aeabi_fmul>
 800679c:	4601      	mov	r1, r0
 800679e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80067a2:	f7fa f975 	bl	8000a90 <__aeabi_fsub>
 80067a6:	4631      	mov	r1, r6
 80067a8:	4682      	mov	sl, r0
 80067aa:	4630      	mov	r0, r6
 80067ac:	f7fa fa7a 	bl	8000ca4 <__aeabi_fmul>
 80067b0:	4601      	mov	r1, r0
 80067b2:	4650      	mov	r0, sl
 80067b4:	f7fa fa76 	bl	8000ca4 <__aeabi_fmul>
 80067b8:	492d      	ldr	r1, [pc, #180]	; (8006870 <__ieee754_powf+0x280>)
 80067ba:	f7fa fa73 	bl	8000ca4 <__aeabi_fmul>
 80067be:	4601      	mov	r1, r0
 80067c0:	4648      	mov	r0, r9
 80067c2:	f7fa f965 	bl	8000a90 <__aeabi_fsub>
 80067c6:	4601      	mov	r1, r0
 80067c8:	4606      	mov	r6, r0
 80067ca:	4640      	mov	r0, r8
 80067cc:	f7fa f962 	bl	8000a94 <__addsf3>
 80067d0:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 80067d4:	f029 090f 	bic.w	r9, r9, #15
 80067d8:	4641      	mov	r1, r8
 80067da:	4648      	mov	r0, r9
 80067dc:	f7fa f958 	bl	8000a90 <__aeabi_fsub>
 80067e0:	4601      	mov	r1, r0
 80067e2:	4630      	mov	r0, r6
 80067e4:	f7fa f954 	bl	8000a90 <__aeabi_fsub>
 80067e8:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80067ec:	9b02      	ldr	r3, [sp, #8]
 80067ee:	3d01      	subs	r5, #1
 80067f0:	f024 040f 	bic.w	r4, r4, #15
 80067f4:	431d      	orrs	r5, r3
 80067f6:	4606      	mov	r6, r0
 80067f8:	4621      	mov	r1, r4
 80067fa:	4638      	mov	r0, r7
 80067fc:	bf14      	ite	ne
 80067fe:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 8006802:	4d1c      	ldreq	r5, [pc, #112]	; (8006874 <__ieee754_powf+0x284>)
 8006804:	f7fa f944 	bl	8000a90 <__aeabi_fsub>
 8006808:	4649      	mov	r1, r9
 800680a:	f7fa fa4b 	bl	8000ca4 <__aeabi_fmul>
 800680e:	4639      	mov	r1, r7
 8006810:	4680      	mov	r8, r0
 8006812:	4630      	mov	r0, r6
 8006814:	f7fa fa46 	bl	8000ca4 <__aeabi_fmul>
 8006818:	4601      	mov	r1, r0
 800681a:	4640      	mov	r0, r8
 800681c:	f7fa f93a 	bl	8000a94 <__addsf3>
 8006820:	4621      	mov	r1, r4
 8006822:	4606      	mov	r6, r0
 8006824:	4648      	mov	r0, r9
 8006826:	f7fa fa3d 	bl	8000ca4 <__aeabi_fmul>
 800682a:	4601      	mov	r1, r0
 800682c:	4607      	mov	r7, r0
 800682e:	4681      	mov	r9, r0
 8006830:	4630      	mov	r0, r6
 8006832:	f7fa f92f 	bl	8000a94 <__addsf3>
 8006836:	2800      	cmp	r0, #0
 8006838:	4682      	mov	sl, r0
 800683a:	4680      	mov	r8, r0
 800683c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8006840:	f340 8200 	ble.w	8006c44 <__ieee754_powf+0x654>
 8006844:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 8006848:	f340 814e 	ble.w	8006ae8 <__ieee754_powf+0x4f8>
 800684c:	2100      	movs	r1, #0
 800684e:	4628      	mov	r0, r5
 8006850:	f7fa fbc6 	bl	8000fe0 <__aeabi_fcmplt>
 8006854:	3800      	subs	r0, #0
 8006856:	bf18      	it	ne
 8006858:	2001      	movne	r0, #1
 800685a:	e775      	b.n	8006748 <__ieee754_powf+0x158>
 800685c:	3f7ffff3 	.word	0x3f7ffff3
 8006860:	3f800007 	.word	0x3f800007
 8006864:	3fb8aa00 	.word	0x3fb8aa00
 8006868:	36eca570 	.word	0x36eca570
 800686c:	3eaaaaab 	.word	0x3eaaaaab
 8006870:	3fb8aa3b 	.word	0x3fb8aa3b
 8006874:	bf800000 	.word	0xbf800000
 8006878:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800687c:	f040 8111 	bne.w	8006aa2 <__ieee754_powf+0x4b2>
 8006880:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 8006884:	f7fa fa0e 	bl	8000ca4 <__aeabi_fmul>
 8006888:	f06f 0217 	mvn.w	r2, #23
 800688c:	4606      	mov	r6, r0
 800688e:	15f3      	asrs	r3, r6, #23
 8006890:	3b7f      	subs	r3, #127	; 0x7f
 8006892:	4413      	add	r3, r2
 8006894:	4a85      	ldr	r2, [pc, #532]	; (8006aac <__ieee754_powf+0x4bc>)
 8006896:	9301      	str	r3, [sp, #4]
 8006898:	f3c6 0316 	ubfx	r3, r6, #0, #23
 800689c:	4293      	cmp	r3, r2
 800689e:	f043 567e 	orr.w	r6, r3, #1065353216	; 0x3f800000
 80068a2:	dd08      	ble.n	80068b6 <__ieee754_powf+0x2c6>
 80068a4:	4a82      	ldr	r2, [pc, #520]	; (8006ab0 <__ieee754_powf+0x4c0>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	f340 80fd 	ble.w	8006aa6 <__ieee754_powf+0x4b6>
 80068ac:	9b01      	ldr	r3, [sp, #4]
 80068ae:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 80068b2:	3301      	adds	r3, #1
 80068b4:	9301      	str	r3, [sp, #4]
 80068b6:	2300      	movs	r3, #0
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	9900      	ldr	r1, [sp, #0]
 80068bc:	4a7d      	ldr	r2, [pc, #500]	; (8006ab4 <__ieee754_powf+0x4c4>)
 80068be:	4630      	mov	r0, r6
 80068c0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80068c4:	9603      	str	r6, [sp, #12]
 80068c6:	4611      	mov	r1, r2
 80068c8:	9205      	str	r2, [sp, #20]
 80068ca:	f7fa f8e1 	bl	8000a90 <__aeabi_fsub>
 80068ce:	9a05      	ldr	r2, [sp, #20]
 80068d0:	9b03      	ldr	r3, [sp, #12]
 80068d2:	4683      	mov	fp, r0
 80068d4:	4619      	mov	r1, r3
 80068d6:	4610      	mov	r0, r2
 80068d8:	9203      	str	r2, [sp, #12]
 80068da:	9304      	str	r3, [sp, #16]
 80068dc:	f7fa f8da 	bl	8000a94 <__addsf3>
 80068e0:	4601      	mov	r1, r0
 80068e2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80068e6:	f7fa fa91 	bl	8000e0c <__aeabi_fdiv>
 80068ea:	4682      	mov	sl, r0
 80068ec:	4601      	mov	r1, r0
 80068ee:	4658      	mov	r0, fp
 80068f0:	f7fa f9d8 	bl	8000ca4 <__aeabi_fmul>
 80068f4:	1076      	asrs	r6, r6, #1
 80068f6:	9b00      	ldr	r3, [sp, #0]
 80068f8:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 80068fc:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8006900:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 8006904:	f029 090f 	bic.w	r9, r9, #15
 8006908:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 800690c:	4680      	mov	r8, r0
 800690e:	4631      	mov	r1, r6
 8006910:	4648      	mov	r0, r9
 8006912:	f7fa f9c7 	bl	8000ca4 <__aeabi_fmul>
 8006916:	4601      	mov	r1, r0
 8006918:	4658      	mov	r0, fp
 800691a:	f7fa f8b9 	bl	8000a90 <__aeabi_fsub>
 800691e:	9a03      	ldr	r2, [sp, #12]
 8006920:	4683      	mov	fp, r0
 8006922:	4611      	mov	r1, r2
 8006924:	4630      	mov	r0, r6
 8006926:	f7fa f8b3 	bl	8000a90 <__aeabi_fsub>
 800692a:	9b04      	ldr	r3, [sp, #16]
 800692c:	4601      	mov	r1, r0
 800692e:	4618      	mov	r0, r3
 8006930:	f7fa f8ae 	bl	8000a90 <__aeabi_fsub>
 8006934:	4649      	mov	r1, r9
 8006936:	f7fa f9b5 	bl	8000ca4 <__aeabi_fmul>
 800693a:	4601      	mov	r1, r0
 800693c:	4658      	mov	r0, fp
 800693e:	f7fa f8a7 	bl	8000a90 <__aeabi_fsub>
 8006942:	4651      	mov	r1, sl
 8006944:	f7fa f9ae 	bl	8000ca4 <__aeabi_fmul>
 8006948:	4641      	mov	r1, r8
 800694a:	4682      	mov	sl, r0
 800694c:	4640      	mov	r0, r8
 800694e:	f7fa f9a9 	bl	8000ca4 <__aeabi_fmul>
 8006952:	4606      	mov	r6, r0
 8006954:	4958      	ldr	r1, [pc, #352]	; (8006ab8 <__ieee754_powf+0x4c8>)
 8006956:	f7fa f9a5 	bl	8000ca4 <__aeabi_fmul>
 800695a:	4958      	ldr	r1, [pc, #352]	; (8006abc <__ieee754_powf+0x4cc>)
 800695c:	f7fa f89a 	bl	8000a94 <__addsf3>
 8006960:	4631      	mov	r1, r6
 8006962:	f7fa f99f 	bl	8000ca4 <__aeabi_fmul>
 8006966:	4956      	ldr	r1, [pc, #344]	; (8006ac0 <__ieee754_powf+0x4d0>)
 8006968:	f7fa f894 	bl	8000a94 <__addsf3>
 800696c:	4631      	mov	r1, r6
 800696e:	f7fa f999 	bl	8000ca4 <__aeabi_fmul>
 8006972:	4954      	ldr	r1, [pc, #336]	; (8006ac4 <__ieee754_powf+0x4d4>)
 8006974:	f7fa f88e 	bl	8000a94 <__addsf3>
 8006978:	4631      	mov	r1, r6
 800697a:	f7fa f993 	bl	8000ca4 <__aeabi_fmul>
 800697e:	4952      	ldr	r1, [pc, #328]	; (8006ac8 <__ieee754_powf+0x4d8>)
 8006980:	f7fa f888 	bl	8000a94 <__addsf3>
 8006984:	4631      	mov	r1, r6
 8006986:	f7fa f98d 	bl	8000ca4 <__aeabi_fmul>
 800698a:	4950      	ldr	r1, [pc, #320]	; (8006acc <__ieee754_powf+0x4dc>)
 800698c:	f7fa f882 	bl	8000a94 <__addsf3>
 8006990:	4631      	mov	r1, r6
 8006992:	4683      	mov	fp, r0
 8006994:	4630      	mov	r0, r6
 8006996:	f7fa f985 	bl	8000ca4 <__aeabi_fmul>
 800699a:	4601      	mov	r1, r0
 800699c:	4658      	mov	r0, fp
 800699e:	f7fa f981 	bl	8000ca4 <__aeabi_fmul>
 80069a2:	4606      	mov	r6, r0
 80069a4:	4649      	mov	r1, r9
 80069a6:	4640      	mov	r0, r8
 80069a8:	f7fa f874 	bl	8000a94 <__addsf3>
 80069ac:	4651      	mov	r1, sl
 80069ae:	f7fa f979 	bl	8000ca4 <__aeabi_fmul>
 80069b2:	4631      	mov	r1, r6
 80069b4:	f7fa f86e 	bl	8000a94 <__addsf3>
 80069b8:	4649      	mov	r1, r9
 80069ba:	4683      	mov	fp, r0
 80069bc:	4648      	mov	r0, r9
 80069be:	f7fa f971 	bl	8000ca4 <__aeabi_fmul>
 80069c2:	4943      	ldr	r1, [pc, #268]	; (8006ad0 <__ieee754_powf+0x4e0>)
 80069c4:	9003      	str	r0, [sp, #12]
 80069c6:	f7fa f865 	bl	8000a94 <__addsf3>
 80069ca:	4659      	mov	r1, fp
 80069cc:	f7fa f862 	bl	8000a94 <__addsf3>
 80069d0:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 80069d4:	f026 060f 	bic.w	r6, r6, #15
 80069d8:	4631      	mov	r1, r6
 80069da:	4648      	mov	r0, r9
 80069dc:	f7fa f962 	bl	8000ca4 <__aeabi_fmul>
 80069e0:	493b      	ldr	r1, [pc, #236]	; (8006ad0 <__ieee754_powf+0x4e0>)
 80069e2:	4681      	mov	r9, r0
 80069e4:	4630      	mov	r0, r6
 80069e6:	f7fa f853 	bl	8000a90 <__aeabi_fsub>
 80069ea:	9b03      	ldr	r3, [sp, #12]
 80069ec:	4619      	mov	r1, r3
 80069ee:	f7fa f84f 	bl	8000a90 <__aeabi_fsub>
 80069f2:	4601      	mov	r1, r0
 80069f4:	4658      	mov	r0, fp
 80069f6:	f7fa f84b 	bl	8000a90 <__aeabi_fsub>
 80069fa:	4641      	mov	r1, r8
 80069fc:	f7fa f952 	bl	8000ca4 <__aeabi_fmul>
 8006a00:	4631      	mov	r1, r6
 8006a02:	4680      	mov	r8, r0
 8006a04:	4650      	mov	r0, sl
 8006a06:	f7fa f94d 	bl	8000ca4 <__aeabi_fmul>
 8006a0a:	4601      	mov	r1, r0
 8006a0c:	4640      	mov	r0, r8
 8006a0e:	f7fa f841 	bl	8000a94 <__addsf3>
 8006a12:	4682      	mov	sl, r0
 8006a14:	4601      	mov	r1, r0
 8006a16:	4648      	mov	r0, r9
 8006a18:	f7fa f83c 	bl	8000a94 <__addsf3>
 8006a1c:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 8006a20:	f026 060f 	bic.w	r6, r6, #15
 8006a24:	4630      	mov	r0, r6
 8006a26:	492b      	ldr	r1, [pc, #172]	; (8006ad4 <__ieee754_powf+0x4e4>)
 8006a28:	f7fa f93c 	bl	8000ca4 <__aeabi_fmul>
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	4680      	mov	r8, r0
 8006a30:	4630      	mov	r0, r6
 8006a32:	f7fa f82d 	bl	8000a90 <__aeabi_fsub>
 8006a36:	4601      	mov	r1, r0
 8006a38:	4650      	mov	r0, sl
 8006a3a:	f7fa f829 	bl	8000a90 <__aeabi_fsub>
 8006a3e:	4926      	ldr	r1, [pc, #152]	; (8006ad8 <__ieee754_powf+0x4e8>)
 8006a40:	f7fa f930 	bl	8000ca4 <__aeabi_fmul>
 8006a44:	4925      	ldr	r1, [pc, #148]	; (8006adc <__ieee754_powf+0x4ec>)
 8006a46:	4681      	mov	r9, r0
 8006a48:	4630      	mov	r0, r6
 8006a4a:	f7fa f92b 	bl	8000ca4 <__aeabi_fmul>
 8006a4e:	4601      	mov	r1, r0
 8006a50:	4648      	mov	r0, r9
 8006a52:	f7fa f81f 	bl	8000a94 <__addsf3>
 8006a56:	4b22      	ldr	r3, [pc, #136]	; (8006ae0 <__ieee754_powf+0x4f0>)
 8006a58:	9a00      	ldr	r2, [sp, #0]
 8006a5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a5e:	f7fa f819 	bl	8000a94 <__addsf3>
 8006a62:	4606      	mov	r6, r0
 8006a64:	9801      	ldr	r0, [sp, #4]
 8006a66:	f7fa f8c9 	bl	8000bfc <__aeabi_i2f>
 8006a6a:	4682      	mov	sl, r0
 8006a6c:	4b1d      	ldr	r3, [pc, #116]	; (8006ae4 <__ieee754_powf+0x4f4>)
 8006a6e:	9a00      	ldr	r2, [sp, #0]
 8006a70:	4631      	mov	r1, r6
 8006a72:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8006a76:	4640      	mov	r0, r8
 8006a78:	f7fa f80c 	bl	8000a94 <__addsf3>
 8006a7c:	4659      	mov	r1, fp
 8006a7e:	f7fa f809 	bl	8000a94 <__addsf3>
 8006a82:	4651      	mov	r1, sl
 8006a84:	f7fa f806 	bl	8000a94 <__addsf3>
 8006a88:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8006a8c:	f029 090f 	bic.w	r9, r9, #15
 8006a90:	4651      	mov	r1, sl
 8006a92:	4648      	mov	r0, r9
 8006a94:	f7f9 fffc 	bl	8000a90 <__aeabi_fsub>
 8006a98:	4659      	mov	r1, fp
 8006a9a:	f7f9 fff9 	bl	8000a90 <__aeabi_fsub>
 8006a9e:	4641      	mov	r1, r8
 8006aa0:	e69c      	b.n	80067dc <__ieee754_powf+0x1ec>
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	e6f3      	b.n	800688e <__ieee754_powf+0x29e>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e706      	b.n	80068b8 <__ieee754_powf+0x2c8>
 8006aaa:	bf00      	nop
 8006aac:	001cc471 	.word	0x001cc471
 8006ab0:	005db3d6 	.word	0x005db3d6
 8006ab4:	08007284 	.word	0x08007284
 8006ab8:	3e53f142 	.word	0x3e53f142
 8006abc:	3e6c3255 	.word	0x3e6c3255
 8006ac0:	3e8ba305 	.word	0x3e8ba305
 8006ac4:	3eaaaaab 	.word	0x3eaaaaab
 8006ac8:	3edb6db7 	.word	0x3edb6db7
 8006acc:	3f19999a 	.word	0x3f19999a
 8006ad0:	40400000 	.word	0x40400000
 8006ad4:	3f763800 	.word	0x3f763800
 8006ad8:	3f76384f 	.word	0x3f76384f
 8006adc:	369dc3a0 	.word	0x369dc3a0
 8006ae0:	08007294 	.word	0x08007294
 8006ae4:	0800728c 	.word	0x0800728c
 8006ae8:	f040 80c2 	bne.w	8006c70 <__ieee754_powf+0x680>
 8006aec:	4968      	ldr	r1, [pc, #416]	; (8006c90 <__ieee754_powf+0x6a0>)
 8006aee:	4630      	mov	r0, r6
 8006af0:	f7f9 ffd0 	bl	8000a94 <__addsf3>
 8006af4:	4639      	mov	r1, r7
 8006af6:	4681      	mov	r9, r0
 8006af8:	4650      	mov	r0, sl
 8006afa:	f7f9 ffc9 	bl	8000a90 <__aeabi_fsub>
 8006afe:	4601      	mov	r1, r0
 8006b00:	4648      	mov	r0, r9
 8006b02:	f7fa fa8b 	bl	800101c <__aeabi_fcmpgt>
 8006b06:	2800      	cmp	r0, #0
 8006b08:	f47f aea0 	bne.w	800684c <__ieee754_powf+0x25c>
 8006b0c:	15e4      	asrs	r4, r4, #23
 8006b0e:	f1a4 037e 	sub.w	r3, r4, #126	; 0x7e
 8006b12:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 8006b16:	411c      	asrs	r4, r3
 8006b18:	4444      	add	r4, r8
 8006b1a:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8006b1e:	495d      	ldr	r1, [pc, #372]	; (8006c94 <__ieee754_powf+0x6a4>)
 8006b20:	3b7f      	subs	r3, #127	; 0x7f
 8006b22:	4119      	asrs	r1, r3
 8006b24:	4021      	ands	r1, r4
 8006b26:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8006b2a:	f1c3 0317 	rsb	r3, r3, #23
 8006b2e:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8006b32:	411c      	asrs	r4, r3
 8006b34:	f1b8 0f00 	cmp.w	r8, #0
 8006b38:	4638      	mov	r0, r7
 8006b3a:	bfb8      	it	lt
 8006b3c:	4264      	neglt	r4, r4
 8006b3e:	f7f9 ffa7 	bl	8000a90 <__aeabi_fsub>
 8006b42:	4681      	mov	r9, r0
 8006b44:	4631      	mov	r1, r6
 8006b46:	4648      	mov	r0, r9
 8006b48:	f7f9 ffa4 	bl	8000a94 <__addsf3>
 8006b4c:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 8006b50:	f027 070f 	bic.w	r7, r7, #15
 8006b54:	4638      	mov	r0, r7
 8006b56:	4950      	ldr	r1, [pc, #320]	; (8006c98 <__ieee754_powf+0x6a8>)
 8006b58:	f7fa f8a4 	bl	8000ca4 <__aeabi_fmul>
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	4680      	mov	r8, r0
 8006b60:	4638      	mov	r0, r7
 8006b62:	f7f9 ff95 	bl	8000a90 <__aeabi_fsub>
 8006b66:	4601      	mov	r1, r0
 8006b68:	4630      	mov	r0, r6
 8006b6a:	f7f9 ff91 	bl	8000a90 <__aeabi_fsub>
 8006b6e:	494b      	ldr	r1, [pc, #300]	; (8006c9c <__ieee754_powf+0x6ac>)
 8006b70:	f7fa f898 	bl	8000ca4 <__aeabi_fmul>
 8006b74:	494a      	ldr	r1, [pc, #296]	; (8006ca0 <__ieee754_powf+0x6b0>)
 8006b76:	4606      	mov	r6, r0
 8006b78:	4638      	mov	r0, r7
 8006b7a:	f7fa f893 	bl	8000ca4 <__aeabi_fmul>
 8006b7e:	4601      	mov	r1, r0
 8006b80:	4630      	mov	r0, r6
 8006b82:	f7f9 ff87 	bl	8000a94 <__addsf3>
 8006b86:	4607      	mov	r7, r0
 8006b88:	4601      	mov	r1, r0
 8006b8a:	4640      	mov	r0, r8
 8006b8c:	f7f9 ff82 	bl	8000a94 <__addsf3>
 8006b90:	4641      	mov	r1, r8
 8006b92:	4606      	mov	r6, r0
 8006b94:	f7f9 ff7c 	bl	8000a90 <__aeabi_fsub>
 8006b98:	4601      	mov	r1, r0
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	f7f9 ff78 	bl	8000a90 <__aeabi_fsub>
 8006ba0:	4631      	mov	r1, r6
 8006ba2:	4680      	mov	r8, r0
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	f7fa f87d 	bl	8000ca4 <__aeabi_fmul>
 8006baa:	4607      	mov	r7, r0
 8006bac:	493d      	ldr	r1, [pc, #244]	; (8006ca4 <__ieee754_powf+0x6b4>)
 8006bae:	f7fa f879 	bl	8000ca4 <__aeabi_fmul>
 8006bb2:	493d      	ldr	r1, [pc, #244]	; (8006ca8 <__ieee754_powf+0x6b8>)
 8006bb4:	f7f9 ff6c 	bl	8000a90 <__aeabi_fsub>
 8006bb8:	4639      	mov	r1, r7
 8006bba:	f7fa f873 	bl	8000ca4 <__aeabi_fmul>
 8006bbe:	493b      	ldr	r1, [pc, #236]	; (8006cac <__ieee754_powf+0x6bc>)
 8006bc0:	f7f9 ff68 	bl	8000a94 <__addsf3>
 8006bc4:	4639      	mov	r1, r7
 8006bc6:	f7fa f86d 	bl	8000ca4 <__aeabi_fmul>
 8006bca:	4939      	ldr	r1, [pc, #228]	; (8006cb0 <__ieee754_powf+0x6c0>)
 8006bcc:	f7f9 ff60 	bl	8000a90 <__aeabi_fsub>
 8006bd0:	4639      	mov	r1, r7
 8006bd2:	f7fa f867 	bl	8000ca4 <__aeabi_fmul>
 8006bd6:	4937      	ldr	r1, [pc, #220]	; (8006cb4 <__ieee754_powf+0x6c4>)
 8006bd8:	f7f9 ff5c 	bl	8000a94 <__addsf3>
 8006bdc:	4639      	mov	r1, r7
 8006bde:	f7fa f861 	bl	8000ca4 <__aeabi_fmul>
 8006be2:	4601      	mov	r1, r0
 8006be4:	4630      	mov	r0, r6
 8006be6:	f7f9 ff53 	bl	8000a90 <__aeabi_fsub>
 8006bea:	4607      	mov	r7, r0
 8006bec:	4601      	mov	r1, r0
 8006bee:	4630      	mov	r0, r6
 8006bf0:	f7fa f858 	bl	8000ca4 <__aeabi_fmul>
 8006bf4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006bf8:	4681      	mov	r9, r0
 8006bfa:	4638      	mov	r0, r7
 8006bfc:	f7f9 ff48 	bl	8000a90 <__aeabi_fsub>
 8006c00:	4601      	mov	r1, r0
 8006c02:	4648      	mov	r0, r9
 8006c04:	f7fa f902 	bl	8000e0c <__aeabi_fdiv>
 8006c08:	4641      	mov	r1, r8
 8006c0a:	4607      	mov	r7, r0
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	f7fa f849 	bl	8000ca4 <__aeabi_fmul>
 8006c12:	4641      	mov	r1, r8
 8006c14:	f7f9 ff3e 	bl	8000a94 <__addsf3>
 8006c18:	4601      	mov	r1, r0
 8006c1a:	4638      	mov	r0, r7
 8006c1c:	f7f9 ff38 	bl	8000a90 <__aeabi_fsub>
 8006c20:	4631      	mov	r1, r6
 8006c22:	f7f9 ff35 	bl	8000a90 <__aeabi_fsub>
 8006c26:	4601      	mov	r1, r0
 8006c28:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006c2c:	f7f9 ff30 	bl	8000a90 <__aeabi_fsub>
 8006c30:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8006c34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c38:	da20      	bge.n	8006c7c <__ieee754_powf+0x68c>
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	f000 f842 	bl	8006cc4 <scalbnf>
 8006c40:	4629      	mov	r1, r5
 8006c42:	e53f      	b.n	80066c4 <__ieee754_powf+0xd4>
 8006c44:	4b1c      	ldr	r3, [pc, #112]	; (8006cb8 <__ieee754_powf+0x6c8>)
 8006c46:	429c      	cmp	r4, r3
 8006c48:	dd07      	ble.n	8006c5a <__ieee754_powf+0x66a>
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	f7fa f9c7 	bl	8000fe0 <__aeabi_fcmplt>
 8006c52:	3800      	subs	r0, #0
 8006c54:	bf18      	it	ne
 8006c56:	2001      	movne	r0, #1
 8006c58:	e581      	b.n	800675e <__ieee754_powf+0x16e>
 8006c5a:	d109      	bne.n	8006c70 <__ieee754_powf+0x680>
 8006c5c:	4639      	mov	r1, r7
 8006c5e:	f7f9 ff17 	bl	8000a90 <__aeabi_fsub>
 8006c62:	4631      	mov	r1, r6
 8006c64:	f7fa f9d0 	bl	8001008 <__aeabi_fcmpge>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	f43f af4f 	beq.w	8006b0c <__ieee754_powf+0x51c>
 8006c6e:	e7ec      	b.n	8006c4a <__ieee754_powf+0x65a>
 8006c70:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8006c74:	f73f af4a 	bgt.w	8006b0c <__ieee754_powf+0x51c>
 8006c78:	2400      	movs	r4, #0
 8006c7a:	e763      	b.n	8006b44 <__ieee754_powf+0x554>
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	e7df      	b.n	8006c40 <__ieee754_powf+0x650>
 8006c80:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006c84:	e50d      	b.n	80066a2 <__ieee754_powf+0xb2>
 8006c86:	2100      	movs	r1, #0
 8006c88:	e50b      	b.n	80066a2 <__ieee754_powf+0xb2>
 8006c8a:	2500      	movs	r5, #0
 8006c8c:	e4f1      	b.n	8006672 <__ieee754_powf+0x82>
 8006c8e:	bf00      	nop
 8006c90:	3338aa3c 	.word	0x3338aa3c
 8006c94:	ff800000 	.word	0xff800000
 8006c98:	3f317200 	.word	0x3f317200
 8006c9c:	3f317218 	.word	0x3f317218
 8006ca0:	35bfbe8c 	.word	0x35bfbe8c
 8006ca4:	3331bb4c 	.word	0x3331bb4c
 8006ca8:	35ddea0e 	.word	0x35ddea0e
 8006cac:	388ab355 	.word	0x388ab355
 8006cb0:	3b360b61 	.word	0x3b360b61
 8006cb4:	3e2aaaab 	.word	0x3e2aaaab
 8006cb8:	43160000 	.word	0x43160000

08006cbc <fabsf>:
 8006cbc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006cc0:	4770      	bx	lr
	...

08006cc4 <scalbnf>:
 8006cc4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8006cc8:	b538      	push	{r3, r4, r5, lr}
 8006cca:	4603      	mov	r3, r0
 8006ccc:	460d      	mov	r5, r1
 8006cce:	4604      	mov	r4, r0
 8006cd0:	d02e      	beq.n	8006d30 <scalbnf+0x6c>
 8006cd2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006cd6:	d304      	bcc.n	8006ce2 <scalbnf+0x1e>
 8006cd8:	4601      	mov	r1, r0
 8006cda:	f7f9 fedb 	bl	8000a94 <__addsf3>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	e026      	b.n	8006d30 <scalbnf+0x6c>
 8006ce2:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8006ce6:	d118      	bne.n	8006d1a <scalbnf+0x56>
 8006ce8:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8006cec:	f7f9 ffda 	bl	8000ca4 <__aeabi_fmul>
 8006cf0:	4a17      	ldr	r2, [pc, #92]	; (8006d50 <scalbnf+0x8c>)
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	4295      	cmp	r5, r2
 8006cf6:	db0c      	blt.n	8006d12 <scalbnf+0x4e>
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8006cfe:	3a19      	subs	r2, #25
 8006d00:	f24c 3150 	movw	r1, #50000	; 0xc350
 8006d04:	428d      	cmp	r5, r1
 8006d06:	dd0a      	ble.n	8006d1e <scalbnf+0x5a>
 8006d08:	4912      	ldr	r1, [pc, #72]	; (8006d54 <scalbnf+0x90>)
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f361 001e 	bfi	r0, r1, #0, #31
 8006d10:	e000      	b.n	8006d14 <scalbnf+0x50>
 8006d12:	4911      	ldr	r1, [pc, #68]	; (8006d58 <scalbnf+0x94>)
 8006d14:	f7f9 ffc6 	bl	8000ca4 <__aeabi_fmul>
 8006d18:	e7e1      	b.n	8006cde <scalbnf+0x1a>
 8006d1a:	0dd2      	lsrs	r2, r2, #23
 8006d1c:	e7f0      	b.n	8006d00 <scalbnf+0x3c>
 8006d1e:	1951      	adds	r1, r2, r5
 8006d20:	29fe      	cmp	r1, #254	; 0xfe
 8006d22:	dcf1      	bgt.n	8006d08 <scalbnf+0x44>
 8006d24:	2900      	cmp	r1, #0
 8006d26:	dd05      	ble.n	8006d34 <scalbnf+0x70>
 8006d28:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8006d2c:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8006d30:	4618      	mov	r0, r3
 8006d32:	bd38      	pop	{r3, r4, r5, pc}
 8006d34:	f111 0f16 	cmn.w	r1, #22
 8006d38:	da01      	bge.n	8006d3e <scalbnf+0x7a>
 8006d3a:	4907      	ldr	r1, [pc, #28]	; (8006d58 <scalbnf+0x94>)
 8006d3c:	e7e5      	b.n	8006d0a <scalbnf+0x46>
 8006d3e:	f101 0019 	add.w	r0, r1, #25
 8006d42:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8006d46:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8006d4a:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8006d4e:	e7e1      	b.n	8006d14 <scalbnf+0x50>
 8006d50:	ffff3cb0 	.word	0xffff3cb0
 8006d54:	7149f2ca 	.word	0x7149f2ca
 8006d58:	0da24260 	.word	0x0da24260

08006d5c <with_errnof>:
 8006d5c:	b538      	push	{r3, r4, r5, lr}
 8006d5e:	4604      	mov	r4, r0
 8006d60:	460d      	mov	r5, r1
 8006d62:	f7fd fb57 	bl	8004414 <__errno>
 8006d66:	6005      	str	r5, [r0, #0]
 8006d68:	4620      	mov	r0, r4
 8006d6a:	bd38      	pop	{r3, r4, r5, pc}

08006d6c <xflowf>:
 8006d6c:	b508      	push	{r3, lr}
 8006d6e:	b140      	cbz	r0, 8006d82 <xflowf+0x16>
 8006d70:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 8006d74:	f7f9 ff96 	bl	8000ca4 <__aeabi_fmul>
 8006d78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006d7c:	2122      	movs	r1, #34	; 0x22
 8006d7e:	f7ff bfed 	b.w	8006d5c <with_errnof>
 8006d82:	4608      	mov	r0, r1
 8006d84:	e7f6      	b.n	8006d74 <xflowf+0x8>

08006d86 <__math_uflowf>:
 8006d86:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8006d8a:	f7ff bfef 	b.w	8006d6c <xflowf>

08006d8e <__math_oflowf>:
 8006d8e:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8006d92:	f7ff bfeb 	b.w	8006d6c <xflowf>
	...

08006d98 <__ieee754_sqrtf>:
 8006d98:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8006d9c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006da4:	4603      	mov	r3, r0
 8006da6:	4604      	mov	r4, r0
 8006da8:	d30a      	bcc.n	8006dc0 <__ieee754_sqrtf+0x28>
 8006daa:	4601      	mov	r1, r0
 8006dac:	f7f9 ff7a 	bl	8000ca4 <__aeabi_fmul>
 8006db0:	4601      	mov	r1, r0
 8006db2:	4620      	mov	r0, r4
 8006db4:	f7f9 fe6e 	bl	8000a94 <__addsf3>
 8006db8:	4604      	mov	r4, r0
 8006dba:	4620      	mov	r0, r4
 8006dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dc0:	2a00      	cmp	r2, #0
 8006dc2:	d0fa      	beq.n	8006dba <__ieee754_sqrtf+0x22>
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	da06      	bge.n	8006dd6 <__ieee754_sqrtf+0x3e>
 8006dc8:	4601      	mov	r1, r0
 8006dca:	f7f9 fe61 	bl	8000a90 <__aeabi_fsub>
 8006dce:	4601      	mov	r1, r0
 8006dd0:	f7fa f81c 	bl	8000e0c <__aeabi_fdiv>
 8006dd4:	e7f0      	b.n	8006db8 <__ieee754_sqrtf+0x20>
 8006dd6:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8006dda:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8006dde:	d03e      	beq.n	8006e5e <__ieee754_sqrtf+0xc6>
 8006de0:	2400      	movs	r4, #0
 8006de2:	f1a1 057f 	sub.w	r5, r1, #127	; 0x7f
 8006de6:	07ca      	lsls	r2, r1, #31
 8006de8:	f04f 0019 	mov.w	r0, #25
 8006dec:	4626      	mov	r6, r4
 8006dee:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8006df2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006df6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006dfa:	bf58      	it	pl
 8006dfc:	005b      	lslpl	r3, r3, #1
 8006dfe:	106d      	asrs	r5, r5, #1
 8006e00:	005b      	lsls	r3, r3, #1
 8006e02:	1872      	adds	r2, r6, r1
 8006e04:	429a      	cmp	r2, r3
 8006e06:	bfcf      	iteee	gt
 8006e08:	461a      	movgt	r2, r3
 8006e0a:	1856      	addle	r6, r2, r1
 8006e0c:	1864      	addle	r4, r4, r1
 8006e0e:	1a9a      	suble	r2, r3, r2
 8006e10:	3801      	subs	r0, #1
 8006e12:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8006e16:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006e1a:	d1f2      	bne.n	8006e02 <__ieee754_sqrtf+0x6a>
 8006e1c:	b1ba      	cbz	r2, 8006e4e <__ieee754_sqrtf+0xb6>
 8006e1e:	4e14      	ldr	r6, [pc, #80]	; (8006e70 <__ieee754_sqrtf+0xd8>)
 8006e20:	4f14      	ldr	r7, [pc, #80]	; (8006e74 <__ieee754_sqrtf+0xdc>)
 8006e22:	6830      	ldr	r0, [r6, #0]
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	f7f9 fe33 	bl	8000a90 <__aeabi_fsub>
 8006e2a:	f8d6 8000 	ldr.w	r8, [r6]
 8006e2e:	4601      	mov	r1, r0
 8006e30:	4640      	mov	r0, r8
 8006e32:	f7fa f8df 	bl	8000ff4 <__aeabi_fcmple>
 8006e36:	b150      	cbz	r0, 8006e4e <__ieee754_sqrtf+0xb6>
 8006e38:	6830      	ldr	r0, [r6, #0]
 8006e3a:	6839      	ldr	r1, [r7, #0]
 8006e3c:	f7f9 fe2a 	bl	8000a94 <__addsf3>
 8006e40:	6836      	ldr	r6, [r6, #0]
 8006e42:	4601      	mov	r1, r0
 8006e44:	4630      	mov	r0, r6
 8006e46:	f7fa f8cb 	bl	8000fe0 <__aeabi_fcmplt>
 8006e4a:	b168      	cbz	r0, 8006e68 <__ieee754_sqrtf+0xd0>
 8006e4c:	3402      	adds	r4, #2
 8006e4e:	1064      	asrs	r4, r4, #1
 8006e50:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8006e54:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8006e58:	e7af      	b.n	8006dba <__ieee754_sqrtf+0x22>
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	3201      	adds	r2, #1
 8006e5e:	0218      	lsls	r0, r3, #8
 8006e60:	d5fb      	bpl.n	8006e5a <__ieee754_sqrtf+0xc2>
 8006e62:	3a01      	subs	r2, #1
 8006e64:	1a89      	subs	r1, r1, r2
 8006e66:	e7bb      	b.n	8006de0 <__ieee754_sqrtf+0x48>
 8006e68:	3401      	adds	r4, #1
 8006e6a:	f024 0401 	bic.w	r4, r4, #1
 8006e6e:	e7ee      	b.n	8006e4e <__ieee754_sqrtf+0xb6>
 8006e70:	200001d4 	.word	0x200001d4
 8006e74:	200001d8 	.word	0x200001d8

08006e78 <_init>:
 8006e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7a:	bf00      	nop
 8006e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e7e:	bc08      	pop	{r3}
 8006e80:	469e      	mov	lr, r3
 8006e82:	4770      	bx	lr

08006e84 <_fini>:
 8006e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e86:	bf00      	nop
 8006e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e8a:	bc08      	pop	{r3}
 8006e8c:	469e      	mov	lr, r3
 8006e8e:	4770      	bx	lr
