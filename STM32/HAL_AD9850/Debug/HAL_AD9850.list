
HAL_AD9850.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f10  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004020  08004020  00014020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004094  08004094  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004094  08004094  00014094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800409c  0800409c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800409c  0800409c  0001409c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040a4  080040a4  000140a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080040a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000068  08004110  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08004110  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d894  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002497  00000000  00000000  0002d968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  0002fe00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bcd  00000000  00000000  00030d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b2c8  00000000  00000000  000318e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000118e3  00000000  00000000  0004cbad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091d9a  00000000  00000000  0005e490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004744  00000000  00000000  000f022c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000f4970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08004008 	.word	0x08004008

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08004008 	.word	0x08004008

08000150 <__aeabi_ldivmod>:
 8000150:	b97b      	cbnz	r3, 8000172 <__aeabi_ldivmod+0x22>
 8000152:	b972      	cbnz	r2, 8000172 <__aeabi_ldivmod+0x22>
 8000154:	2900      	cmp	r1, #0
 8000156:	bfbe      	ittt	lt
 8000158:	2000      	movlt	r0, #0
 800015a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800015e:	e006      	blt.n	800016e <__aeabi_ldivmod+0x1e>
 8000160:	bf08      	it	eq
 8000162:	2800      	cmpeq	r0, #0
 8000164:	bf1c      	itt	ne
 8000166:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800016a:	f04f 30ff 	movne.w	r0, #4294967295
 800016e:	f000 b9a5 	b.w	80004bc <__aeabi_idiv0>
 8000172:	f1ad 0c08 	sub.w	ip, sp, #8
 8000176:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800017a:	2900      	cmp	r1, #0
 800017c:	db09      	blt.n	8000192 <__aeabi_ldivmod+0x42>
 800017e:	2b00      	cmp	r3, #0
 8000180:	db1a      	blt.n	80001b8 <__aeabi_ldivmod+0x68>
 8000182:	f000 f835 	bl	80001f0 <__udivmoddi4>
 8000186:	f8dd e004 	ldr.w	lr, [sp, #4]
 800018a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800018e:	b004      	add	sp, #16
 8000190:	4770      	bx	lr
 8000192:	4240      	negs	r0, r0
 8000194:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000198:	2b00      	cmp	r3, #0
 800019a:	db1b      	blt.n	80001d4 <__aeabi_ldivmod+0x84>
 800019c:	f000 f828 	bl	80001f0 <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4240      	negs	r0, r0
 80001ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001b0:	4252      	negs	r2, r2
 80001b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001b6:	4770      	bx	lr
 80001b8:	4252      	negs	r2, r2
 80001ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001be:	f000 f817 	bl	80001f0 <__udivmoddi4>
 80001c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ca:	b004      	add	sp, #16
 80001cc:	4240      	negs	r0, r0
 80001ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d2:	4770      	bx	lr
 80001d4:	4252      	negs	r2, r2
 80001d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001da:	f000 f809 	bl	80001f0 <__udivmoddi4>
 80001de:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001e6:	b004      	add	sp, #16
 80001e8:	4252      	negs	r2, r2
 80001ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ee:	4770      	bx	lr

080001f0 <__udivmoddi4>:
 80001f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f4:	9e08      	ldr	r6, [sp, #32]
 80001f6:	460d      	mov	r5, r1
 80001f8:	4604      	mov	r4, r0
 80001fa:	468e      	mov	lr, r1
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d14c      	bne.n	800029a <__udivmoddi4+0xaa>
 8000200:	428a      	cmp	r2, r1
 8000202:	4694      	mov	ip, r2
 8000204:	d967      	bls.n	80002d6 <__udivmoddi4+0xe6>
 8000206:	fab2 f382 	clz	r3, r2
 800020a:	b153      	cbz	r3, 8000222 <__udivmoddi4+0x32>
 800020c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000210:	f1c3 0220 	rsb	r2, r3, #32
 8000214:	fa01 fe03 	lsl.w	lr, r1, r3
 8000218:	fa20 f202 	lsr.w	r2, r0, r2
 800021c:	ea42 0e0e 	orr.w	lr, r2, lr
 8000220:	409c      	lsls	r4, r3
 8000222:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000226:	fbbe f1f7 	udiv	r1, lr, r7
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fb07 ee11 	mls	lr, r7, r1, lr
 8000232:	fb01 f005 	mul.w	r0, r1, r5
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800023c:	4290      	cmp	r0, r2
 800023e:	d90a      	bls.n	8000256 <__udivmoddi4+0x66>
 8000240:	eb1c 0202 	adds.w	r2, ip, r2
 8000244:	f101 3eff 	add.w	lr, r1, #4294967295
 8000248:	f080 8119 	bcs.w	800047e <__udivmoddi4+0x28e>
 800024c:	4290      	cmp	r0, r2
 800024e:	f240 8116 	bls.w	800047e <__udivmoddi4+0x28e>
 8000252:	3902      	subs	r1, #2
 8000254:	4462      	add	r2, ip
 8000256:	1a12      	subs	r2, r2, r0
 8000258:	fbb2 f0f7 	udiv	r0, r2, r7
 800025c:	fb07 2210 	mls	r2, r7, r0, r2
 8000260:	fb00 f505 	mul.w	r5, r0, r5
 8000264:	b2a4      	uxth	r4, r4
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	42a5      	cmp	r5, r4
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x94>
 800026e:	eb1c 0404 	adds.w	r4, ip, r4
 8000272:	f100 32ff 	add.w	r2, r0, #4294967295
 8000276:	f080 8104 	bcs.w	8000482 <__udivmoddi4+0x292>
 800027a:	42a5      	cmp	r5, r4
 800027c:	f240 8101 	bls.w	8000482 <__udivmoddi4+0x292>
 8000280:	4464      	add	r4, ip
 8000282:	3802      	subs	r0, #2
 8000284:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000288:	2100      	movs	r1, #0
 800028a:	1b64      	subs	r4, r4, r5
 800028c:	b11e      	cbz	r6, 8000296 <__udivmoddi4+0xa6>
 800028e:	40dc      	lsrs	r4, r3
 8000290:	2300      	movs	r3, #0
 8000292:	e9c6 4300 	strd	r4, r3, [r6]
 8000296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029a:	428b      	cmp	r3, r1
 800029c:	d908      	bls.n	80002b0 <__udivmoddi4+0xc0>
 800029e:	2e00      	cmp	r6, #0
 80002a0:	f000 80ea 	beq.w	8000478 <__udivmoddi4+0x288>
 80002a4:	2100      	movs	r1, #0
 80002a6:	e9c6 0500 	strd	r0, r5, [r6]
 80002aa:	4608      	mov	r0, r1
 80002ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b0:	fab3 f183 	clz	r1, r3
 80002b4:	2900      	cmp	r1, #0
 80002b6:	d148      	bne.n	800034a <__udivmoddi4+0x15a>
 80002b8:	42ab      	cmp	r3, r5
 80002ba:	d302      	bcc.n	80002c2 <__udivmoddi4+0xd2>
 80002bc:	4282      	cmp	r2, r0
 80002be:	f200 80f8 	bhi.w	80004b2 <__udivmoddi4+0x2c2>
 80002c2:	1a84      	subs	r4, r0, r2
 80002c4:	eb65 0203 	sbc.w	r2, r5, r3
 80002c8:	2001      	movs	r0, #1
 80002ca:	4696      	mov	lr, r2
 80002cc:	2e00      	cmp	r6, #0
 80002ce:	d0e2      	beq.n	8000296 <__udivmoddi4+0xa6>
 80002d0:	e9c6 4e00 	strd	r4, lr, [r6]
 80002d4:	e7df      	b.n	8000296 <__udivmoddi4+0xa6>
 80002d6:	b902      	cbnz	r2, 80002da <__udivmoddi4+0xea>
 80002d8:	deff      	udf	#255	; 0xff
 80002da:	fab2 f382 	clz	r3, r2
 80002de:	2b00      	cmp	r3, #0
 80002e0:	f040 808e 	bne.w	8000400 <__udivmoddi4+0x210>
 80002e4:	1a88      	subs	r0, r1, r2
 80002e6:	2101      	movs	r1, #1
 80002e8:	0c17      	lsrs	r7, r2, #16
 80002ea:	fa1f fe82 	uxth.w	lr, r2
 80002ee:	fbb0 f5f7 	udiv	r5, r0, r7
 80002f2:	fb07 0015 	mls	r0, r7, r5, r0
 80002f6:	0c22      	lsrs	r2, r4, #16
 80002f8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002fc:	fb0e f005 	mul.w	r0, lr, r5
 8000300:	4290      	cmp	r0, r2
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0x126>
 8000304:	eb1c 0202 	adds.w	r2, ip, r2
 8000308:	f105 38ff 	add.w	r8, r5, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x124>
 800030e:	4290      	cmp	r0, r2
 8000310:	f200 80cc 	bhi.w	80004ac <__udivmoddi4+0x2bc>
 8000314:	4645      	mov	r5, r8
 8000316:	1a12      	subs	r2, r2, r0
 8000318:	fbb2 f0f7 	udiv	r0, r2, r7
 800031c:	fb07 2210 	mls	r2, r7, r0, r2
 8000320:	fb0e fe00 	mul.w	lr, lr, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032a:	45a6      	cmp	lr, r4
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x150>
 800032e:	eb1c 0404 	adds.w	r4, ip, r4
 8000332:	f100 32ff 	add.w	r2, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x14e>
 8000338:	45a6      	cmp	lr, r4
 800033a:	f200 80b4 	bhi.w	80004a6 <__udivmoddi4+0x2b6>
 800033e:	4610      	mov	r0, r2
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000348:	e7a0      	b.n	800028c <__udivmoddi4+0x9c>
 800034a:	f1c1 0720 	rsb	r7, r1, #32
 800034e:	408b      	lsls	r3, r1
 8000350:	fa22 fc07 	lsr.w	ip, r2, r7
 8000354:	ea4c 0c03 	orr.w	ip, ip, r3
 8000358:	fa25 fa07 	lsr.w	sl, r5, r7
 800035c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000360:	fbba f8f9 	udiv	r8, sl, r9
 8000364:	408d      	lsls	r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	fb09 aa18 	mls	sl, r9, r8, sl
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	432b      	orrs	r3, r5
 8000374:	fa00 f501 	lsl.w	r5, r0, r1
 8000378:	fb08 f00e 	mul.w	r0, r8, lr
 800037c:	0c1c      	lsrs	r4, r3, #16
 800037e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000382:	42a0      	cmp	r0, r4
 8000384:	fa02 f201 	lsl.w	r2, r2, r1
 8000388:	d90b      	bls.n	80003a2 <__udivmoddi4+0x1b2>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000392:	f080 8086 	bcs.w	80004a2 <__udivmoddi4+0x2b2>
 8000396:	42a0      	cmp	r0, r4
 8000398:	f240 8083 	bls.w	80004a2 <__udivmoddi4+0x2b2>
 800039c:	f1a8 0802 	sub.w	r8, r8, #2
 80003a0:	4464      	add	r4, ip
 80003a2:	1a24      	subs	r4, r4, r0
 80003a4:	b298      	uxth	r0, r3
 80003a6:	fbb4 f3f9 	udiv	r3, r4, r9
 80003aa:	fb09 4413 	mls	r4, r9, r3, r4
 80003ae:	fb03 fe0e 	mul.w	lr, r3, lr
 80003b2:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x1dc>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c2:	d26a      	bcs.n	800049a <__udivmoddi4+0x2aa>
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d968      	bls.n	800049a <__udivmoddi4+0x2aa>
 80003c8:	3b02      	subs	r3, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003d0:	fba0 9302 	umull	r9, r3, r0, r2
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	429c      	cmp	r4, r3
 80003da:	46c8      	mov	r8, r9
 80003dc:	469e      	mov	lr, r3
 80003de:	d354      	bcc.n	800048a <__udivmoddi4+0x29a>
 80003e0:	d051      	beq.n	8000486 <__udivmoddi4+0x296>
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d067      	beq.n	80004b6 <__udivmoddi4+0x2c6>
 80003e6:	ebb5 0308 	subs.w	r3, r5, r8
 80003ea:	eb64 040e 	sbc.w	r4, r4, lr
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	fa04 f707 	lsl.w	r7, r4, r7
 80003f4:	431f      	orrs	r7, r3
 80003f6:	40cc      	lsrs	r4, r1
 80003f8:	e9c6 7400 	strd	r7, r4, [r6]
 80003fc:	2100      	movs	r1, #0
 80003fe:	e74a      	b.n	8000296 <__udivmoddi4+0xa6>
 8000400:	fa02 fc03 	lsl.w	ip, r2, r3
 8000404:	f1c3 0020 	rsb	r0, r3, #32
 8000408:	40c1      	lsrs	r1, r0
 800040a:	409d      	lsls	r5, r3
 800040c:	fa24 f000 	lsr.w	r0, r4, r0
 8000410:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000414:	4328      	orrs	r0, r5
 8000416:	fbb1 f5f7 	udiv	r5, r1, r7
 800041a:	fb07 1115 	mls	r1, r7, r5, r1
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	0c02      	lsrs	r2, r0, #16
 8000424:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000428:	fb05 f10e 	mul.w	r1, r5, lr
 800042c:	4291      	cmp	r1, r2
 800042e:	fa04 f403 	lsl.w	r4, r4, r3
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x256>
 8000434:	eb1c 0202 	adds.w	r2, ip, r2
 8000438:	f105 38ff 	add.w	r8, r5, #4294967295
 800043c:	d22f      	bcs.n	800049e <__udivmoddi4+0x2ae>
 800043e:	4291      	cmp	r1, r2
 8000440:	d92d      	bls.n	800049e <__udivmoddi4+0x2ae>
 8000442:	3d02      	subs	r5, #2
 8000444:	4462      	add	r2, ip
 8000446:	1a52      	subs	r2, r2, r1
 8000448:	fbb2 f1f7 	udiv	r1, r2, r7
 800044c:	fb07 2211 	mls	r2, r7, r1, r2
 8000450:	b280      	uxth	r0, r0
 8000452:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000456:	fb01 f20e 	mul.w	r2, r1, lr
 800045a:	4282      	cmp	r2, r0
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x280>
 800045e:	eb1c 0000 	adds.w	r0, ip, r0
 8000462:	f101 38ff 	add.w	r8, r1, #4294967295
 8000466:	d216      	bcs.n	8000496 <__udivmoddi4+0x2a6>
 8000468:	4282      	cmp	r2, r0
 800046a:	d914      	bls.n	8000496 <__udivmoddi4+0x2a6>
 800046c:	3902      	subs	r1, #2
 800046e:	4460      	add	r0, ip
 8000470:	1a80      	subs	r0, r0, r2
 8000472:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000476:	e73a      	b.n	80002ee <__udivmoddi4+0xfe>
 8000478:	4631      	mov	r1, r6
 800047a:	4630      	mov	r0, r6
 800047c:	e70b      	b.n	8000296 <__udivmoddi4+0xa6>
 800047e:	4671      	mov	r1, lr
 8000480:	e6e9      	b.n	8000256 <__udivmoddi4+0x66>
 8000482:	4610      	mov	r0, r2
 8000484:	e6fe      	b.n	8000284 <__udivmoddi4+0x94>
 8000486:	454d      	cmp	r5, r9
 8000488:	d2ab      	bcs.n	80003e2 <__udivmoddi4+0x1f2>
 800048a:	ebb9 0802 	subs.w	r8, r9, r2
 800048e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000492:	3801      	subs	r0, #1
 8000494:	e7a5      	b.n	80003e2 <__udivmoddi4+0x1f2>
 8000496:	4641      	mov	r1, r8
 8000498:	e7ea      	b.n	8000470 <__udivmoddi4+0x280>
 800049a:	4603      	mov	r3, r0
 800049c:	e796      	b.n	80003cc <__udivmoddi4+0x1dc>
 800049e:	4645      	mov	r5, r8
 80004a0:	e7d1      	b.n	8000446 <__udivmoddi4+0x256>
 80004a2:	46d0      	mov	r8, sl
 80004a4:	e77d      	b.n	80003a2 <__udivmoddi4+0x1b2>
 80004a6:	4464      	add	r4, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e749      	b.n	8000340 <__udivmoddi4+0x150>
 80004ac:	3d02      	subs	r5, #2
 80004ae:	4462      	add	r2, ip
 80004b0:	e731      	b.n	8000316 <__udivmoddi4+0x126>
 80004b2:	4608      	mov	r0, r1
 80004b4:	e70a      	b.n	80002cc <__udivmoddi4+0xdc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e6ed      	b.n	8000296 <__udivmoddi4+0xa6>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <_ZN6AD9850C1Ev>:
#define HIGH GPIO_PIN_SET
#define LOW  GPIO_PIN_RESET

AD9850 DDS;

AD9850::AD9850() {
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2200      	movs	r2, #0
 80004cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2201      	movs	r2, #1
 80004d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

}
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4618      	mov	r0, r3
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <_Z41__static_initialization_and_destruction_0ii>:
	}
}

void AD9850::digitalWrite(int pin, GPIO_PinState PinState) {
	HAL_GPIO_WritePin(GPIOx, pin, PinState);
}
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d107      	bne.n	8000504 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d102      	bne.n	8000504 <_Z41__static_initialization_and_destruction_0ii+0x20>
AD9850 DDS;
 80004fe:	4803      	ldr	r0, [pc, #12]	; (800050c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000500:	f7ff ffde 	bl	80004c0 <_ZN6AD9850C1Ev>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000088 	.word	0x20000088

08000510 <_GLOBAL__sub_I_DDS>:
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
 8000514:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000518:	2001      	movs	r0, #1
 800051a:	f7ff ffe3 	bl	80004e4 <_Z41__static_initialization_and_destruction_0ii>
 800051e:	bd80      	pop	{r7, pc}

08000520 <_Z14MM_AD9850_Initv>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MM_AD9850_Init() {
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	 PA3 - FQ_UD
	 PA4 - DATA
	 PA5 - RESET
	 */
	// https://github.com/Billwilliams1952/AD9850-Library-Arduino/blob/master/AD9850.cpp
	HAL_GPIO_WritePin(GPIOA, PIN_FQ_UPD_Pin, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	2108      	movs	r1, #8
 8000528:	481c      	ldr	r0, [pc, #112]	; (800059c <_Z14MM_AD9850_Initv+0x7c>)
 800052a:	f001 fb07 	bl	8001b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, PIN_W_CLK_Pin, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	2104      	movs	r1, #4
 8000532:	481a      	ldr	r0, [pc, #104]	; (800059c <_Z14MM_AD9850_Initv+0x7c>)
 8000534:	f001 fb02 	bl	8001b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, PIN_MOD_RESET_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2120      	movs	r1, #32
 800053c:	4817      	ldr	r0, [pc, #92]	; (800059c <_Z14MM_AD9850_Initv+0x7c>)
 800053e:	f001 fafd 	bl	8001b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, PIN_DATA_Pin, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2110      	movs	r1, #16
 8000546:	4815      	ldr	r0, [pc, #84]	; (800059c <_Z14MM_AD9850_Initv+0x7c>)
 8000548:	f001 faf8 	bl	8001b3c <HAL_GPIO_WritePin>

	//reset
	//HAL_GPIO_WritePin(GPIOA, PIN_FQ_UPD_Pin, GPIO_PIN_SET);

	HAL_GPIO_WritePin(GPIOA, PIN_MOD_RESET_Pin, GPIO_PIN_SET);			// Default to parallel mode
 800054c:	2201      	movs	r2, #1
 800054e:	2120      	movs	r1, #32
 8000550:	4812      	ldr	r0, [pc, #72]	; (800059c <_Z14MM_AD9850_Initv+0x7c>)
 8000552:	f001 faf3 	bl	8001b3c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000556:	200a      	movs	r0, #10
 8000558:	f000 fd4a 	bl	8000ff0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, PIN_MOD_RESET_Pin, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2120      	movs	r1, #32
 8000560:	480e      	ldr	r0, [pc, #56]	; (800059c <_Z14MM_AD9850_Initv+0x7c>)
 8000562:	f001 faeb 	bl	8001b3c <HAL_GPIO_WritePin>

	// and enable serial mode
	HAL_GPIO_WritePin(GPIOA, PIN_FQ_UPD_Pin, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2108      	movs	r1, #8
 800056a:	480c      	ldr	r0, [pc, #48]	; (800059c <_Z14MM_AD9850_Initv+0x7c>)
 800056c:	f001 fae6 	bl	8001b3c <HAL_GPIO_WritePin>
	PULSE_HIGH(PIN_W_CLK_Pin);		// Force into Serial mode
 8000570:	2201      	movs	r2, #1
 8000572:	2104      	movs	r1, #4
 8000574:	4809      	ldr	r0, [pc, #36]	; (800059c <_Z14MM_AD9850_Initv+0x7c>)
 8000576:	f001 fae1 	bl	8001b3c <HAL_GPIO_WritePin>
 800057a:	2200      	movs	r2, #0
 800057c:	2104      	movs	r1, #4
 800057e:	4807      	ldr	r0, [pc, #28]	; (800059c <_Z14MM_AD9850_Initv+0x7c>)
 8000580:	f001 fadc 	bl	8001b3c <HAL_GPIO_WritePin>
	PULSE_HIGH(PIN_FQ_UPD_Pin);
 8000584:	2201      	movs	r2, #1
 8000586:	2108      	movs	r1, #8
 8000588:	4804      	ldr	r0, [pc, #16]	; (800059c <_Z14MM_AD9850_Initv+0x7c>)
 800058a:	f001 fad7 	bl	8001b3c <HAL_GPIO_WritePin>
 800058e:	2200      	movs	r2, #0
 8000590:	2108      	movs	r1, #8
 8000592:	4802      	ldr	r0, [pc, #8]	; (800059c <_Z14MM_AD9850_Initv+0x7c>)
 8000594:	f001 fad2 	bl	8001b3c <HAL_GPIO_WritePin>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40010800 	.word	0x40010800

080005a0 <_Z17MM_AD9850_SetFreqj>:
void MM_AD9850_SetFreq(unsigned int frequency) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	// frequency calc from datasheet page 8 =  * /2^32
	// AD9850 has 125Mhz clock
	uint32_t frequencyWord = (frequency * 4294967296) / 125000000;
 80005a8:	6879      	ldr	r1, [r7, #4]
 80005aa:	2000      	movs	r0, #0
 80005ac:	460a      	mov	r2, r1
 80005ae:	4603      	mov	r3, r0
 80005b0:	f04f 0000 	mov.w	r0, #0
 80005b4:	f04f 0100 	mov.w	r1, #0
 80005b8:	0011      	movs	r1, r2
 80005ba:	2000      	movs	r0, #0
 80005bc:	a341      	add	r3, pc, #260	; (adr r3, 80006c4 <_Z17MM_AD9850_SetFreqj+0x124>)
 80005be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005c2:	f7ff fdc5 	bl	8000150 <__aeabi_ldivmod>
 80005c6:	4602      	mov	r2, r0
 80005c8:	460b      	mov	r3, r1
 80005ca:	4613      	mov	r3, r2
 80005cc:	60fb      	str	r3, [r7, #12]

	printf("Freq %x ",frequencyWord);
 80005ce:	68f9      	ldr	r1, [r7, #12]
 80005d0:	4839      	ldr	r0, [pc, #228]	; (80006b8 <_Z17MM_AD9850_SetFreqj+0x118>)
 80005d2:	f002 fe9d 	bl	8003310 <iprintf>

	for (uint8_t i = 0; i < 32; i++) {
 80005d6:	2300      	movs	r3, #0
 80005d8:	72fb      	strb	r3, [r7, #11]
 80005da:	e01f      	b.n	800061c <_Z17MM_AD9850_SetFreqj+0x7c>
		//digitalWrite(data7, (uint8_t) (freq & 0x1));
		if ((frequencyWord & 0x1) == 1) {
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d005      	beq.n	80005f2 <_Z17MM_AD9850_SetFreqj+0x52>
			HAL_GPIO_WritePin(GPIOA, PIN_DATA_Pin, GPIO_PIN_SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2110      	movs	r1, #16
 80005ea:	4834      	ldr	r0, [pc, #208]	; (80006bc <_Z17MM_AD9850_SetFreqj+0x11c>)
 80005ec:	f001 faa6 	bl	8001b3c <HAL_GPIO_WritePin>
 80005f0:	e004      	b.n	80005fc <_Z17MM_AD9850_SetFreqj+0x5c>
		} else {
			HAL_GPIO_WritePin(GPIOA, PIN_DATA_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2110      	movs	r1, #16
 80005f6:	4831      	ldr	r0, [pc, #196]	; (80006bc <_Z17MM_AD9850_SetFreqj+0x11c>)
 80005f8:	f001 faa0 	bl	8001b3c <HAL_GPIO_WritePin>
		}

		PULSE_HIGH(PIN_W_CLK_Pin);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2104      	movs	r1, #4
 8000600:	482e      	ldr	r0, [pc, #184]	; (80006bc <_Z17MM_AD9850_SetFreqj+0x11c>)
 8000602:	f001 fa9b 	bl	8001b3c <HAL_GPIO_WritePin>
 8000606:	2200      	movs	r2, #0
 8000608:	2104      	movs	r1, #4
 800060a:	482c      	ldr	r0, [pc, #176]	; (80006bc <_Z17MM_AD9850_SetFreqj+0x11c>)
 800060c:	f001 fa96 	bl	8001b3c <HAL_GPIO_WritePin>
		frequencyWord >>= 1;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	085b      	lsrs	r3, r3, #1
 8000614:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < 32; i++) {
 8000616:	7afb      	ldrb	r3, [r7, #11]
 8000618:	3301      	adds	r3, #1
 800061a:	72fb      	strb	r3, [r7, #11]
 800061c:	7afb      	ldrb	r3, [r7, #11]
 800061e:	2b1f      	cmp	r3, #31
 8000620:	d9dc      	bls.n	80005dc <_Z17MM_AD9850_SetFreqj+0x3c>
	}

	uint8_t phaseVal = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	72bb      	strb	r3, [r7, #10]
	uint8_t powerDown = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	723b      	strb	r3, [r7, #8]

	if (powerDown)
 800062a:	7a3b      	ldrb	r3, [r7, #8]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d004      	beq.n	800063a <_Z17MM_AD9850_SetFreqj+0x9a>
		phaseVal |= POWER_DOWN_BIT;
 8000630:	7abb      	ldrb	r3, [r7, #10]
 8000632:	f043 0304 	orr.w	r3, r3, #4
 8000636:	72bb      	strb	r3, [r7, #10]
 8000638:	e003      	b.n	8000642 <_Z17MM_AD9850_SetFreqj+0xa2>
	else
		phaseVal &= ~POWER_DOWN_BIT;
 800063a:	7abb      	ldrb	r3, [r7, #10]
 800063c:	f023 0304 	bic.w	r3, r3, #4
 8000640:	72bb      	strb	r3, [r7, #10]

	printf("phase %x ",phaseVal);
 8000642:	7abb      	ldrb	r3, [r7, #10]
 8000644:	4619      	mov	r1, r3
 8000646:	481e      	ldr	r0, [pc, #120]	; (80006c0 <_Z17MM_AD9850_SetFreqj+0x120>)
 8000648:	f002 fe62 	bl	8003310 <iprintf>
	for (uint8_t i = 0; i < 8; i++) {
 800064c:	2300      	movs	r3, #0
 800064e:	727b      	strb	r3, [r7, #9]
 8000650:	e01f      	b.n	8000692 <_Z17MM_AD9850_SetFreqj+0xf2>
		//digitalWrite(data7, phaseVal & 0x01);
		if ((frequency & 0x1) == 1)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d005      	beq.n	8000668 <_Z17MM_AD9850_SetFreqj+0xc8>
			HAL_GPIO_WritePin(GPIOA, PIN_DATA_Pin, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2110      	movs	r1, #16
 8000660:	4816      	ldr	r0, [pc, #88]	; (80006bc <_Z17MM_AD9850_SetFreqj+0x11c>)
 8000662:	f001 fa6b 	bl	8001b3c <HAL_GPIO_WritePin>
 8000666:	e004      	b.n	8000672 <_Z17MM_AD9850_SetFreqj+0xd2>
		else
			HAL_GPIO_WritePin(GPIOA, PIN_DATA_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	2110      	movs	r1, #16
 800066c:	4813      	ldr	r0, [pc, #76]	; (80006bc <_Z17MM_AD9850_SetFreqj+0x11c>)
 800066e:	f001 fa65 	bl	8001b3c <HAL_GPIO_WritePin>

		PULSE_HIGH(PIN_W_CLK_Pin);
 8000672:	2201      	movs	r2, #1
 8000674:	2104      	movs	r1, #4
 8000676:	4811      	ldr	r0, [pc, #68]	; (80006bc <_Z17MM_AD9850_SetFreqj+0x11c>)
 8000678:	f001 fa60 	bl	8001b3c <HAL_GPIO_WritePin>
 800067c:	2200      	movs	r2, #0
 800067e:	2104      	movs	r1, #4
 8000680:	480e      	ldr	r0, [pc, #56]	; (80006bc <_Z17MM_AD9850_SetFreqj+0x11c>)
 8000682:	f001 fa5b 	bl	8001b3c <HAL_GPIO_WritePin>
		phaseVal >>= 1;
 8000686:	7abb      	ldrb	r3, [r7, #10]
 8000688:	085b      	lsrs	r3, r3, #1
 800068a:	72bb      	strb	r3, [r7, #10]
	for (uint8_t i = 0; i < 8; i++) {
 800068c:	7a7b      	ldrb	r3, [r7, #9]
 800068e:	3301      	adds	r3, #1
 8000690:	727b      	strb	r3, [r7, #9]
 8000692:	7a7b      	ldrb	r3, [r7, #9]
 8000694:	2b07      	cmp	r3, #7
 8000696:	d9dc      	bls.n	8000652 <_Z17MM_AD9850_SetFreqj+0xb2>
	}

	PULSE_HIGH(PIN_FQ_UPD_Pin);		// Should see frequency/phase now.
 8000698:	2201      	movs	r2, #1
 800069a:	2108      	movs	r1, #8
 800069c:	4807      	ldr	r0, [pc, #28]	; (80006bc <_Z17MM_AD9850_SetFreqj+0x11c>)
 800069e:	f001 fa4d 	bl	8001b3c <HAL_GPIO_WritePin>
 80006a2:	2200      	movs	r2, #0
 80006a4:	2108      	movs	r1, #8
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <_Z17MM_AD9850_SetFreqj+0x11c>)
 80006a8:	f001 fa48 	bl	8001b3c <HAL_GPIO_WritePin>
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	f3af 8000 	nop.w
 80006b8:	08004020 	.word	0x08004020
 80006bc:	40010800 	.word	0x40010800
 80006c0:	0800402c 	.word	0x0800402c
 80006c4:	07735940 	.word	0x07735940
	...

080006d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	double freq = 1;
 80006d6:	f04f 0200 	mov.w	r2, #0
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <main+0x70>)
 80006dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double trimFreq = 124999500;
 80006e0:	a315      	add	r3, pc, #84	; (adr r3, 8000738 <main+0x68>)
 80006e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006e6:	e9c7 2302 	strd	r2, r3, [r7, #8]

	int phase = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006ee:	f000 fc1d 	bl	8000f2c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006f2:	f000 f829 	bl	8000748 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006f6:	f000 f99b 	bl	8000a30 <_ZL12MX_GPIO_Initv>
	MX_ADC1_Init();
 80006fa:	f000 f88f 	bl	800081c <_ZL12MX_ADC1_Initv>
	MX_I2C1_Init();
 80006fe:	f000 f8d5 	bl	80008ac <_ZL12MX_I2C1_Initv>
	MX_TIM2_Init();
 8000702:	f000 f907 	bl	8000914 <_ZL12MX_TIM2_Initv>

	//DDS.begin(W_CLK_GPIO_Port, W_CLK_Pin, FQ_UPD_Pin, DATA_Pin, MOD_RESET_Pin);
	//DDS.calibrate(trimFreq);
	//DDS.setfreq(freq, phase);
	//DDS.down();
	MM_AD9850_Init();
 8000706:	f7ff ff0b 	bl	8000520 <_Z14MM_AD9850_Initv>
	MM_AD9850_SetFreq(1);
 800070a:	2001      	movs	r0, #1
 800070c:	f7ff ff48 	bl	80005a0 <_Z17MM_AD9850_SetFreqj>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);
 8000710:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000714:	480b      	ldr	r0, [pc, #44]	; (8000744 <main+0x74>)
 8000716:	f001 fa29 	bl	8001b6c <HAL_GPIO_TogglePin>
		HAL_Delay(2000);
 800071a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800071e:	f000 fc67 	bl	8000ff0 <HAL_Delay>
		HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_SET);
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000728:	4806      	ldr	r0, [pc, #24]	; (8000744 <main+0x74>)
 800072a:	f001 fa07 	bl	8001b3c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800072e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000732:	f000 fc5d 	bl	8000ff0 <HAL_Delay>
		HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);
 8000736:	e7eb      	b.n	8000710 <main+0x40>
 8000738:	30000000 	.word	0x30000000
 800073c:	419dcd5d 	.word	0x419dcd5d
 8000740:	3ff00000 	.word	0x3ff00000
 8000744:	40011000 	.word	0x40011000

08000748 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b094      	sub	sp, #80	; 0x50
 800074c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800074e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000752:	2228      	movs	r2, #40	; 0x28
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f002 fe2f 	bl	80033ba <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000778:	2301      	movs	r3, #1
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800077c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000786:	2301      	movs	r3, #1
 8000788:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078a:	2302      	movs	r3, #2
 800078c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000792:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000794:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000798:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800079a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 fb42 	bl	8001e28 <HAL_RCC_OscConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	bf14      	ite	ne
 80007aa:	2301      	movne	r3, #1
 80007ac:	2300      	moveq	r3, #0
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <_Z18SystemClock_Configv+0x70>
		Error_Handler();
 80007b4:	f000 f9b6 	bl	8000b24 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007b8:	230f      	movs	r3, #15
 80007ba:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	2302      	movs	r3, #2
 80007be:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c8:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	2102      	movs	r1, #2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f001 fda9 	bl	800232c <HAL_RCC_ClockConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	bf14      	ite	ne
 80007e0:	2301      	movne	r3, #1
 80007e2:	2300      	moveq	r3, #0
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <_Z18SystemClock_Configv+0xa6>
		Error_Handler();
 80007ea:	f000 f99b 	bl	8000b24 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007ee:	2302      	movs	r3, #2
 80007f0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80007f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007f6:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 ff1a 	bl	8002634 <HAL_RCCEx_PeriphCLKConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	bf14      	ite	ne
 8000806:	2301      	movne	r3, #1
 8000808:	2300      	moveq	r3, #0
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <_Z18SystemClock_Configv+0xcc>
		Error_Handler();
 8000810:	f000 f988 	bl	8000b24 <Error_Handler>
	}
}
 8000814:	bf00      	nop
 8000816:	3750      	adds	r7, #80	; 0x50
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <_ZL12MX_ADC1_Initv>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800082c:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <_ZL12MX_ADC1_Initv+0x88>)
 800082e:	4a1e      	ldr	r2, [pc, #120]	; (80008a8 <_ZL12MX_ADC1_Initv+0x8c>)
 8000830:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <_ZL12MX_ADC1_Initv+0x88>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <_ZL12MX_ADC1_Initv+0x88>)
 800083a:	2200      	movs	r2, #0
 800083c:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <_ZL12MX_ADC1_Initv+0x88>)
 8000840:	2200      	movs	r2, #0
 8000842:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <_ZL12MX_ADC1_Initv+0x88>)
 8000846:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800084a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800084c:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <_ZL12MX_ADC1_Initv+0x88>)
 800084e:	2200      	movs	r2, #0
 8000850:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <_ZL12MX_ADC1_Initv+0x88>)
 8000854:	2201      	movs	r2, #1
 8000856:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000858:	4812      	ldr	r0, [pc, #72]	; (80008a4 <_ZL12MX_ADC1_Initv+0x88>)
 800085a:	f000 fbed 	bl	8001038 <HAL_ADC_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	bf14      	ite	ne
 8000864:	2301      	movne	r3, #1
 8000866:	2300      	moveq	r3, #0
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <_ZL12MX_ADC1_Initv+0x56>
		Error_Handler();
 800086e:	f000 f959 	bl	8000b24 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 8000872:	2307      	movs	r3, #7
 8000874:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000876:	2301      	movs	r3, #1
 8000878:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	4619      	mov	r1, r3
 8000882:	4808      	ldr	r0, [pc, #32]	; (80008a4 <_ZL12MX_ADC1_Initv+0x88>)
 8000884:	f000 fd86 	bl	8001394 <HAL_ADC_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	bf14      	ite	ne
 800088e:	2301      	movne	r3, #1
 8000890:	2300      	moveq	r3, #0
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <_ZL12MX_ADC1_Initv+0x80>
		Error_Handler();
 8000898:	f000 f944 	bl	8000b24 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200000b0 	.word	0x200000b0
 80008a8:	40012400 	.word	0x40012400

080008ac <_ZL12MX_I2C1_Initv>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <_ZL12MX_I2C1_Initv+0x5c>)
 80008b2:	4a16      	ldr	r2, [pc, #88]	; (800090c <_ZL12MX_I2C1_Initv+0x60>)
 80008b4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <_ZL12MX_I2C1_Initv+0x5c>)
 80008b8:	4a15      	ldr	r2, [pc, #84]	; (8000910 <_ZL12MX_I2C1_Initv+0x64>)
 80008ba:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <_ZL12MX_I2C1_Initv+0x5c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <_ZL12MX_I2C1_Initv+0x5c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <_ZL12MX_I2C1_Initv+0x5c>)
 80008ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ce:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d0:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <_ZL12MX_I2C1_Initv+0x5c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <_ZL12MX_I2C1_Initv+0x5c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <_ZL12MX_I2C1_Initv+0x5c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <_ZL12MX_I2C1_Initv+0x5c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80008e8:	4807      	ldr	r0, [pc, #28]	; (8000908 <_ZL12MX_I2C1_Initv+0x5c>)
 80008ea:	f001 f959 	bl	8001ba0 <HAL_I2C_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	bf14      	ite	ne
 80008f4:	2301      	movne	r3, #1
 80008f6:	2300      	moveq	r3, #0
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <_ZL12MX_I2C1_Initv+0x56>
		Error_Handler();
 80008fe:	f000 f911 	bl	8000b24 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200000e0 	.word	0x200000e0
 800090c:	40005400 	.word	0x40005400
 8000910:	000186a0 	.word	0x000186a0

08000914 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b08e      	sub	sp, #56	; 0x38
 8000918:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800091a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000928:	f107 0320 	add.w	r3, r7, #32
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
 8000940:	615a      	str	r2, [r3, #20]
 8000942:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000944:	4b39      	ldr	r3, [pc, #228]	; (8000a2c <_ZL12MX_TIM2_Initv+0x118>)
 8000946:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800094a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800094c:	4b37      	ldr	r3, [pc, #220]	; (8000a2c <_ZL12MX_TIM2_Initv+0x118>)
 800094e:	2200      	movs	r2, #0
 8000950:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000952:	4b36      	ldr	r3, [pc, #216]	; (8000a2c <_ZL12MX_TIM2_Initv+0x118>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8000958:	4b34      	ldr	r3, [pc, #208]	; (8000a2c <_ZL12MX_TIM2_Initv+0x118>)
 800095a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800095e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000960:	4b32      	ldr	r3, [pc, #200]	; (8000a2c <_ZL12MX_TIM2_Initv+0x118>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000966:	4b31      	ldr	r3, [pc, #196]	; (8000a2c <_ZL12MX_TIM2_Initv+0x118>)
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800096c:	482f      	ldr	r0, [pc, #188]	; (8000a2c <_ZL12MX_TIM2_Initv+0x118>)
 800096e:	f001 ff17 	bl	80027a0 <HAL_TIM_Base_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	bf14      	ite	ne
 8000978:	2301      	movne	r3, #1
 800097a:	2300      	moveq	r3, #0
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <_ZL12MX_TIM2_Initv+0x72>
		Error_Handler();
 8000982:	f000 f8cf 	bl	8000b24 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800098c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000990:	4619      	mov	r1, r3
 8000992:	4826      	ldr	r0, [pc, #152]	; (8000a2c <_ZL12MX_TIM2_Initv+0x118>)
 8000994:	f002 f86a 	bl	8002a6c <HAL_TIM_ConfigClockSource>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	bf14      	ite	ne
 800099e:	2301      	movne	r3, #1
 80009a0:	2300      	moveq	r3, #0
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <_ZL12MX_TIM2_Initv+0x98>
		Error_Handler();
 80009a8:	f000 f8bc 	bl	8000b24 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80009ac:	481f      	ldr	r0, [pc, #124]	; (8000a2c <_ZL12MX_TIM2_Initv+0x118>)
 80009ae:	f001 ff46 	bl	800283e <HAL_TIM_PWM_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	bf14      	ite	ne
 80009b8:	2301      	movne	r3, #1
 80009ba:	2300      	moveq	r3, #0
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <_ZL12MX_TIM2_Initv+0xb2>
		Error_Handler();
 80009c2:	f000 f8af 	bl	8000b24 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80009ce:	f107 0320 	add.w	r3, r7, #32
 80009d2:	4619      	mov	r1, r3
 80009d4:	4815      	ldr	r0, [pc, #84]	; (8000a2c <_ZL12MX_TIM2_Initv+0x118>)
 80009d6:	f002 fb8d 	bl	80030f4 <HAL_TIMEx_MasterConfigSynchronization>
 80009da:	4603      	mov	r3, r0
			!= HAL_OK) {
 80009dc:	2b00      	cmp	r3, #0
 80009de:	bf14      	ite	ne
 80009e0:	2301      	movne	r3, #1
 80009e2:	2300      	moveq	r3, #0
 80009e4:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <_ZL12MX_TIM2_Initv+0xda>
		Error_Handler();
 80009ea:	f000 f89b 	bl	8000b24 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ee:	2360      	movs	r3, #96	; 0x60
 80009f0:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	4619      	mov	r1, r3
 8000a04:	4809      	ldr	r0, [pc, #36]	; (8000a2c <_ZL12MX_TIM2_Initv+0x118>)
 8000a06:	f001 ff73 	bl	80028f0 <HAL_TIM_PWM_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	bf14      	ite	ne
 8000a10:	2301      	movne	r3, #1
 8000a12:	2300      	moveq	r3, #0
 8000a14:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <_ZL12MX_TIM2_Initv+0x10a>
		Error_Handler();
 8000a1a:	f000 f883 	bl	8000b24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000a1e:	4803      	ldr	r0, [pc, #12]	; (8000a2c <_ZL12MX_TIM2_Initv+0x118>)
 8000a20:	f000 f956 	bl	8000cd0 <HAL_TIM_MspPostInit>

}
 8000a24:	bf00      	nop
 8000a26:	3738      	adds	r7, #56	; 0x38
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000134 	.word	0x20000134

08000a30 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 0310 	add.w	r3, r7, #16
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a44:	4b34      	ldr	r3, [pc, #208]	; (8000b18 <_ZL12MX_GPIO_Initv+0xe8>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a33      	ldr	r2, [pc, #204]	; (8000b18 <_ZL12MX_GPIO_Initv+0xe8>)
 8000a4a:	f043 0310 	orr.w	r3, r3, #16
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b31      	ldr	r3, [pc, #196]	; (8000b18 <_ZL12MX_GPIO_Initv+0xe8>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0310 	and.w	r3, r3, #16
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5c:	4b2e      	ldr	r3, [pc, #184]	; (8000b18 <_ZL12MX_GPIO_Initv+0xe8>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a2d      	ldr	r2, [pc, #180]	; (8000b18 <_ZL12MX_GPIO_Initv+0xe8>)
 8000a62:	f043 0320 	orr.w	r3, r3, #32
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <_ZL12MX_GPIO_Initv+0xe8>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0320 	and.w	r3, r3, #32
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <_ZL12MX_GPIO_Initv+0xe8>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a27      	ldr	r2, [pc, #156]	; (8000b18 <_ZL12MX_GPIO_Initv+0xe8>)
 8000a7a:	f043 0304 	orr.w	r3, r3, #4
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b25      	ldr	r3, [pc, #148]	; (8000b18 <_ZL12MX_GPIO_Initv+0xe8>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0304 	and.w	r3, r3, #4
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <_ZL12MX_GPIO_Initv+0xe8>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a21      	ldr	r2, [pc, #132]	; (8000b18 <_ZL12MX_GPIO_Initv+0xe8>)
 8000a92:	f043 0308 	orr.w	r3, r3, #8
 8000a96:	6193      	str	r3, [r2, #24]
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <_ZL12MX_GPIO_Initv+0xe8>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f003 0308 	and.w	r3, r3, #8
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aaa:	481c      	ldr	r0, [pc, #112]	; (8000b1c <_ZL12MX_GPIO_Initv+0xec>)
 8000aac:	f001 f846 	bl	8001b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN_EN_SERIAL_Pin|PIN_W_CLK_Pin|PIN_FQ_UPD_Pin|PIN_DATA_Pin
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	213e      	movs	r1, #62	; 0x3e
 8000ab4:	481a      	ldr	r0, [pc, #104]	; (8000b20 <_ZL12MX_GPIO_Initv+0xf0>)
 8000ab6:	f001 f841 	bl	8001b3c <HAL_GPIO_WritePin>
                          |PIN_MOD_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BOARD_LED_Pin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 8000aba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4812      	ldr	r0, [pc, #72]	; (8000b1c <_ZL12MX_GPIO_Initv+0xec>)
 8000ad4:	f000 feae 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIN_EN_SERIAL_Pin */
  GPIO_InitStruct.Pin = PIN_EN_SERIAL_Pin;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIN_EN_SERIAL_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	4619      	mov	r1, r3
 8000aee:	480c      	ldr	r0, [pc, #48]	; (8000b20 <_ZL12MX_GPIO_Initv+0xf0>)
 8000af0:	f000 fea0 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_W_CLK_Pin PIN_FQ_UPD_Pin PIN_DATA_Pin PIN_MOD_RESET_Pin */
  GPIO_InitStruct.Pin = PIN_W_CLK_Pin|PIN_FQ_UPD_Pin|PIN_DATA_Pin|PIN_MOD_RESET_Pin;
 8000af4:	233c      	movs	r3, #60	; 0x3c
 8000af6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000afc:	2302      	movs	r3, #2
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <_ZL12MX_GPIO_Initv+0xf0>)
 8000b0c:	f000 fe92 	bl	8001834 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b10:	bf00      	nop
 8000b12:	3720      	adds	r7, #32
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40011000 	.word	0x40011000
 8000b20:	40010800 	.word	0x40010800

08000b24 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b2c:	e7fe      	b.n	8000b2c <Error_Handler+0x8>
	...

08000b30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_MspInit+0x5c>)
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <HAL_MspInit+0x5c>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6193      	str	r3, [r2, #24]
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_MspInit+0x5c>)
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_MspInit+0x5c>)
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <HAL_MspInit+0x5c>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b58:	61d3      	str	r3, [r2, #28]
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_MspInit+0x5c>)
 8000b5c:	69db      	ldr	r3, [r3, #28]
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <HAL_MspInit+0x60>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_MspInit+0x60>)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40010000 	.word	0x40010000

08000b94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a18      	ldr	r2, [pc, #96]	; (8000c10 <HAL_ADC_MspInit+0x7c>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d129      	bne.n	8000c08 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <HAL_ADC_MspInit+0x80>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a16      	ldr	r2, [pc, #88]	; (8000c14 <HAL_ADC_MspInit+0x80>)
 8000bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <HAL_ADC_MspInit+0x80>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_ADC_MspInit+0x80>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <HAL_ADC_MspInit+0x80>)
 8000bd2:	f043 0304 	orr.w	r3, r3, #4
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <HAL_ADC_MspInit+0x80>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be8:	2303      	movs	r3, #3
 8000bea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4809      	ldr	r0, [pc, #36]	; (8000c18 <HAL_ADC_MspInit+0x84>)
 8000bf4:	f000 fe1e 	bl	8001834 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2012      	movs	r0, #18
 8000bfe:	f000 fde2 	bl	80017c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c02:	2012      	movs	r0, #18
 8000c04:	f000 fdfb 	bl	80017fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c08:	bf00      	nop
 8000c0a:	3720      	adds	r7, #32
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40012400 	.word	0x40012400
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40010800 	.word	0x40010800

08000c1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a15      	ldr	r2, [pc, #84]	; (8000c8c <HAL_I2C_MspInit+0x70>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d123      	bne.n	8000c84 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <HAL_I2C_MspInit+0x74>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a13      	ldr	r2, [pc, #76]	; (8000c90 <HAL_I2C_MspInit+0x74>)
 8000c42:	f043 0308 	orr.w	r3, r3, #8
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <HAL_I2C_MspInit+0x74>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0308 	and.w	r3, r3, #8
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c54:	23c0      	movs	r3, #192	; 0xc0
 8000c56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c58:	2312      	movs	r3, #18
 8000c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	4619      	mov	r1, r3
 8000c66:	480b      	ldr	r0, [pc, #44]	; (8000c94 <HAL_I2C_MspInit+0x78>)
 8000c68:	f000 fde4 	bl	8001834 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <HAL_I2C_MspInit+0x74>)
 8000c6e:	69db      	ldr	r3, [r3, #28]
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <HAL_I2C_MspInit+0x74>)
 8000c72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c76:	61d3      	str	r3, [r2, #28]
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <HAL_I2C_MspInit+0x74>)
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c84:	bf00      	nop
 8000c86:	3720      	adds	r7, #32
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40005400 	.word	0x40005400
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40010c00 	.word	0x40010c00

08000c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ca8:	d10b      	bne.n	8000cc2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <HAL_TIM_Base_MspInit+0x34>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <HAL_TIM_Base_MspInit+0x34>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	61d3      	str	r3, [r2, #28]
 8000cb6:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <HAL_TIM_Base_MspInit+0x34>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cee:	d117      	bne.n	8000d20 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <HAL_TIM_MspPostInit+0x58>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a0c      	ldr	r2, [pc, #48]	; (8000d28 <HAL_TIM_MspPostInit+0x58>)
 8000cf6:	f043 0304 	orr.w	r3, r3, #4
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_TIM_MspPostInit+0x58>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2302      	movs	r3, #2
 8000d12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4804      	ldr	r0, [pc, #16]	; (8000d2c <HAL_TIM_MspPostInit+0x5c>)
 8000d1c:	f000 fd8a 	bl	8001834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d20:	bf00      	nop
 8000d22:	3720      	adds	r7, #32
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40010800 	.word	0x40010800

08000d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <NMI_Handler+0x4>

08000d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <MemManage_Handler+0x4>

08000d42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr

08000d5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr

08000d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr

08000d72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d76:	f000 f91f 	bl	8000fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <ADC1_2_IRQHandler+0x10>)
 8000d86:	f000 fa2f 	bl	80011e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200000b0 	.word	0x200000b0

08000d94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	e00a      	b.n	8000dbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000da6:	f3af 8000 	nop.w
 8000daa:	4601      	mov	r1, r0
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	1c5a      	adds	r2, r3, #1
 8000db0:	60ba      	str	r2, [r7, #8]
 8000db2:	b2ca      	uxtb	r2, r1
 8000db4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	3301      	adds	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dbf0      	blt.n	8000da6 <_read+0x12>
  }

  return len;
 8000dc4:	687b      	ldr	r3, [r7, #4]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	60f8      	str	r0, [r7, #12]
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	e009      	b.n	8000df4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	1c5a      	adds	r2, r3, #1
 8000de4:	60ba      	str	r2, [r7, #8]
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3301      	adds	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	dbf1      	blt.n	8000de0 <_write+0x12>
  }
  return len;
 8000dfc:	687b      	ldr	r3, [r7, #4]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <_close>:

int _close(int file)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e2c:	605a      	str	r2, [r3, #4]
  return 0;
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr

08000e3a <_isatty>:

int _isatty(int file)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr

08000e4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b085      	sub	sp, #20
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	60f8      	str	r0, [r7, #12]
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr
	...

08000e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e70:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <_sbrk+0x5c>)
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <_sbrk+0x60>)
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <_sbrk+0x64>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <_sbrk+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d207      	bcs.n	8000ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e98:	f002 fade 	bl	8003458 <__errno>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea6:	e009      	b.n	8000ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <_sbrk+0x64>)
 8000eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eba:	68fb      	ldr	r3, [r7, #12]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20005000 	.word	0x20005000
 8000ec8:	00000400 	.word	0x00000400
 8000ecc:	2000017c 	.word	0x2000017c
 8000ed0:	200002d0 	.word	0x200002d0

08000ed4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ee2:	490d      	ldr	r1, [pc, #52]	; (8000f18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee8:	e002      	b.n	8000ef0 <LoopCopyDataInit>

08000eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eee:	3304      	adds	r3, #4

08000ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef4:	d3f9      	bcc.n	8000eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ef8:	4c0a      	ldr	r4, [pc, #40]	; (8000f24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000efc:	e001      	b.n	8000f02 <LoopFillZerobss>

08000efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f00:	3204      	adds	r2, #4

08000f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f04:	d3fb      	bcc.n	8000efe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f06:	f7ff ffe5 	bl	8000ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f0a:	f002 faab 	bl	8003464 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f0e:	f7ff fbdf 	bl	80006d0 <main>
  bx lr
 8000f12:	4770      	bx	lr
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f18:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f1c:	080040a8 	.word	0x080040a8
  ldr r2, =_sbss
 8000f20:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f24:	200002d0 	.word	0x200002d0

08000f28 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <CAN1_RX1_IRQHandler>
	...

08000f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HAL_Init+0x28>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <HAL_Init+0x28>)
 8000f36:	f043 0310 	orr.w	r3, r3, #16
 8000f3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f000 fc37 	bl	80017b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f42:	200f      	movs	r0, #15
 8000f44:	f000 f808 	bl	8000f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f48:	f7ff fdf2 	bl	8000b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40022000 	.word	0x40022000

08000f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_InitTick+0x54>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_InitTick+0x58>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fc4f 	bl	800181a <HAL_SYSTICK_Config>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00e      	b.n	8000fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d80a      	bhi.n	8000fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f000 fc17 	bl	80017c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f98:	4a06      	ldr	r2, [pc, #24]	; (8000fb4 <HAL_InitTick+0x5c>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e000      	b.n	8000fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_IncTick+0x1c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a03      	ldr	r2, [pc, #12]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000180 	.word	0x20000180

08000fdc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b02      	ldr	r3, [pc, #8]	; (8000fec <HAL_GetTick+0x10>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	20000180 	.word	0x20000180

08000ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff8:	f7ff fff0 	bl	8000fdc <HAL_GetTick>
 8000ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001008:	d005      	beq.n	8001016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_Delay+0x44>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001016:	bf00      	nop
 8001018:	f7ff ffe0 	bl	8000fdc <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	429a      	cmp	r2, r3
 8001026:	d8f7      	bhi.n	8001018 <HAL_Delay+0x28>
  {
  }
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000008 	.word	0x20000008

08001038 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e0be      	b.n	80011d8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001064:	2b00      	cmp	r3, #0
 8001066:	d109      	bne.n	800107c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff fd8c 	bl	8000b94 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 fa81 	bl	8001584 <ADC_ConversionStop_Disable>
 8001082:	4603      	mov	r3, r0
 8001084:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	2b00      	cmp	r3, #0
 8001090:	f040 8099 	bne.w	80011c6 <HAL_ADC_Init+0x18e>
 8001094:	7dfb      	ldrb	r3, [r7, #23]
 8001096:	2b00      	cmp	r3, #0
 8001098:	f040 8095 	bne.w	80011c6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010a4:	f023 0302 	bic.w	r3, r3, #2
 80010a8:	f043 0202 	orr.w	r2, r3, #2
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	7b1b      	ldrb	r3, [r3, #12]
 80010be:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010c0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010d0:	d003      	beq.n	80010da <HAL_ADC_Init+0xa2>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d102      	bne.n	80010e0 <HAL_ADC_Init+0xa8>
 80010da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010de:	e000      	b.n	80010e2 <HAL_ADC_Init+0xaa>
 80010e0:	2300      	movs	r3, #0
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7d1b      	ldrb	r3, [r3, #20]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d119      	bne.n	8001124 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	7b1b      	ldrb	r3, [r3, #12]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d109      	bne.n	800110c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	035a      	lsls	r2, r3, #13
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	e00b      	b.n	8001124 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001110:	f043 0220 	orr.w	r2, r3, #32
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111c:	f043 0201 	orr.w	r2, r3, #1
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	430a      	orrs	r2, r1
 8001136:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <HAL_ADC_Init+0x1a8>)
 8001140:	4013      	ands	r3, r2
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	6812      	ldr	r2, [r2, #0]
 8001146:	68b9      	ldr	r1, [r7, #8]
 8001148:	430b      	orrs	r3, r1
 800114a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001154:	d003      	beq.n	800115e <HAL_ADC_Init+0x126>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d104      	bne.n	8001168 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	3b01      	subs	r3, #1
 8001164:	051b      	lsls	r3, r3, #20
 8001166:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	430a      	orrs	r2, r1
 800117a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <HAL_ADC_Init+0x1ac>)
 8001184:	4013      	ands	r3, r2
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	429a      	cmp	r2, r3
 800118a:	d10b      	bne.n	80011a4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001196:	f023 0303 	bic.w	r3, r3, #3
 800119a:	f043 0201 	orr.w	r2, r3, #1
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011a2:	e018      	b.n	80011d6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	f023 0312 	bic.w	r3, r3, #18
 80011ac:	f043 0210 	orr.w	r2, r3, #16
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b8:	f043 0201 	orr.w	r2, r3, #1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011c4:	e007      	b.n	80011d6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ca:	f043 0210 	orr.w	r2, r3, #16
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	ffe1f7fd 	.word	0xffe1f7fd
 80011e4:	ff1f0efe 	.word	0xff1f0efe

080011e8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0320 	and.w	r3, r3, #32
 80011fa:	2b20      	cmp	r3, #32
 80011fc:	d140      	bne.n	8001280 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b02      	cmp	r3, #2
 800120a:	d139      	bne.n	8001280 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001210:	f003 0310 	and.w	r3, r3, #16
 8001214:	2b00      	cmp	r3, #0
 8001216:	d105      	bne.n	8001224 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800122e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001232:	d11d      	bne.n	8001270 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001238:	2b00      	cmp	r3, #0
 800123a:	d119      	bne.n	8001270 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0220 	bic.w	r2, r2, #32
 800124a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d105      	bne.n	8001270 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001268:	f043 0201 	orr.w	r2, r3, #1
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 f87c 	bl	800136e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f06f 0212 	mvn.w	r2, #18
 800127e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128a:	2b80      	cmp	r3, #128	; 0x80
 800128c:	d14f      	bne.n	800132e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	2b04      	cmp	r3, #4
 800129a:	d148      	bne.n	800132e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a0:	f003 0310 	and.w	r3, r3, #16
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d105      	bne.n	80012b4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80012be:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80012c2:	d012      	beq.n	80012ea <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d125      	bne.n	800131e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80012dc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80012e0:	d11d      	bne.n	800131e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d119      	bne.n	800131e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012f8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130e:	2b00      	cmp	r3, #0
 8001310:	d105      	bne.n	800131e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001316:	f043 0201 	orr.w	r2, r3, #1
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 f971 	bl	8001606 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f06f 020c 	mvn.w	r2, #12
 800132c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001338:	2b40      	cmp	r3, #64	; 0x40
 800133a:	d114      	bne.n	8001366 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b01      	cmp	r3, #1
 8001348:	d10d      	bne.n	8001366 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 f812 	bl	8001380 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f06f 0201 	mvn.w	r2, #1
 8001364:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
	...

08001394 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x20>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e0dc      	b.n	800156e <HAL_ADC_ConfigChannel+0x1da>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b06      	cmp	r3, #6
 80013c2:	d81c      	bhi.n	80013fe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	3b05      	subs	r3, #5
 80013d6:	221f      	movs	r2, #31
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	4019      	ands	r1, r3
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	6818      	ldr	r0, [r3, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	3b05      	subs	r3, #5
 80013f0:	fa00 f203 	lsl.w	r2, r0, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	430a      	orrs	r2, r1
 80013fa:	635a      	str	r2, [r3, #52]	; 0x34
 80013fc:	e03c      	b.n	8001478 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b0c      	cmp	r3, #12
 8001404:	d81c      	bhi.n	8001440 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	3b23      	subs	r3, #35	; 0x23
 8001418:	221f      	movs	r2, #31
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	4019      	ands	r1, r3
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	6818      	ldr	r0, [r3, #0]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	3b23      	subs	r3, #35	; 0x23
 8001432:	fa00 f203 	lsl.w	r2, r0, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	631a      	str	r2, [r3, #48]	; 0x30
 800143e:	e01b      	b.n	8001478 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	3b41      	subs	r3, #65	; 0x41
 8001452:	221f      	movs	r2, #31
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	4019      	ands	r1, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	6818      	ldr	r0, [r3, #0]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	3b41      	subs	r3, #65	; 0x41
 800146c:	fa00 f203 	lsl.w	r2, r0, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b09      	cmp	r3, #9
 800147e:	d91c      	bls.n	80014ba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68d9      	ldr	r1, [r3, #12]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4613      	mov	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4413      	add	r3, r2
 8001490:	3b1e      	subs	r3, #30
 8001492:	2207      	movs	r2, #7
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	4019      	ands	r1, r3
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	6898      	ldr	r0, [r3, #8]
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	3b1e      	subs	r3, #30
 80014ac:	fa00 f203 	lsl.w	r2, r0, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	e019      	b.n	80014ee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6919      	ldr	r1, [r3, #16]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	2207      	movs	r2, #7
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	4019      	ands	r1, r3
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	6898      	ldr	r0, [r3, #8]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4613      	mov	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	fa00 f203 	lsl.w	r2, r0, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b10      	cmp	r3, #16
 80014f4:	d003      	beq.n	80014fe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014fa:	2b11      	cmp	r3, #17
 80014fc:	d132      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a1d      	ldr	r2, [pc, #116]	; (8001578 <HAL_ADC_ConfigChannel+0x1e4>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d125      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d126      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001524:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b10      	cmp	r3, #16
 800152c:	d11a      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <HAL_ADC_ConfigChannel+0x1e8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a13      	ldr	r2, [pc, #76]	; (8001580 <HAL_ADC_ConfigChannel+0x1ec>)
 8001534:	fba2 2303 	umull	r2, r3, r2, r3
 8001538:	0c9a      	lsrs	r2, r3, #18
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001544:	e002      	b.n	800154c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	3b01      	subs	r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f9      	bne.n	8001546 <HAL_ADC_ConfigChannel+0x1b2>
 8001552:	e007      	b.n	8001564 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001558:	f043 0220 	orr.w	r2, r3, #32
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800156c:	7bfb      	ldrb	r3, [r7, #15]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	40012400 	.word	0x40012400
 800157c:	20000000 	.word	0x20000000
 8001580:	431bde83 	.word	0x431bde83

08001584 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b01      	cmp	r3, #1
 800159c:	d12e      	bne.n	80015fc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0201 	bic.w	r2, r2, #1
 80015ac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015ae:	f7ff fd15 	bl	8000fdc <HAL_GetTick>
 80015b2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015b4:	e01b      	b.n	80015ee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80015b6:	f7ff fd11 	bl	8000fdc <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d914      	bls.n	80015ee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d10d      	bne.n	80015ee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	f043 0210 	orr.w	r2, r3, #16
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e2:	f043 0201 	orr.w	r2, r3, #1
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e007      	b.n	80015fe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d0dc      	beq.n	80015b6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001634:	4013      	ands	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164a:	4a04      	ldr	r2, [pc, #16]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	60d3      	str	r3, [r2, #12]
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <__NVIC_GetPriorityGrouping+0x18>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	f003 0307 	and.w	r3, r3, #7
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	2b00      	cmp	r3, #0
 800168c:	db0b      	blt.n	80016a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	f003 021f 	and.w	r2, r3, #31
 8001694:	4906      	ldr	r1, [pc, #24]	; (80016b0 <__NVIC_EnableIRQ+0x34>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	2001      	movs	r0, #1
 800169e:	fa00 f202 	lsl.w	r2, r0, r2
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	e000e100 	.word	0xe000e100

080016b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	6039      	str	r1, [r7, #0]
 80016be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	db0a      	blt.n	80016de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	490c      	ldr	r1, [pc, #48]	; (8001700 <__NVIC_SetPriority+0x4c>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	0112      	lsls	r2, r2, #4
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	440b      	add	r3, r1
 80016d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016dc:	e00a      	b.n	80016f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4908      	ldr	r1, [pc, #32]	; (8001704 <__NVIC_SetPriority+0x50>)
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	3b04      	subs	r3, #4
 80016ec:	0112      	lsls	r2, r2, #4
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	440b      	add	r3, r1
 80016f2:	761a      	strb	r2, [r3, #24]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000e100 	.word	0xe000e100
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001708:	b480      	push	{r7}
 800170a:	b089      	sub	sp, #36	; 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f1c3 0307 	rsb	r3, r3, #7
 8001722:	2b04      	cmp	r3, #4
 8001724:	bf28      	it	cs
 8001726:	2304      	movcs	r3, #4
 8001728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3304      	adds	r3, #4
 800172e:	2b06      	cmp	r3, #6
 8001730:	d902      	bls.n	8001738 <NVIC_EncodePriority+0x30>
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3b03      	subs	r3, #3
 8001736:	e000      	b.n	800173a <NVIC_EncodePriority+0x32>
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	f04f 32ff 	mov.w	r2, #4294967295
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43da      	mvns	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	401a      	ands	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001750:	f04f 31ff 	mov.w	r1, #4294967295
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	43d9      	mvns	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	4313      	orrs	r3, r2
         );
}
 8001762:	4618      	mov	r0, r3
 8001764:	3724      	adds	r7, #36	; 0x24
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800177c:	d301      	bcc.n	8001782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800177e:	2301      	movs	r3, #1
 8001780:	e00f      	b.n	80017a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <SysTick_Config+0x40>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178a:	210f      	movs	r1, #15
 800178c:	f04f 30ff 	mov.w	r0, #4294967295
 8001790:	f7ff ff90 	bl	80016b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <SysTick_Config+0x40>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179a:	4b04      	ldr	r3, [pc, #16]	; (80017ac <SysTick_Config+0x40>)
 800179c:	2207      	movs	r2, #7
 800179e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	e000e010 	.word	0xe000e010

080017b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff ff2d 	bl	8001618 <__NVIC_SetPriorityGrouping>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b086      	sub	sp, #24
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
 80017d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017d8:	f7ff ff42 	bl	8001660 <__NVIC_GetPriorityGrouping>
 80017dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	6978      	ldr	r0, [r7, #20]
 80017e4:	f7ff ff90 	bl	8001708 <NVIC_EncodePriority>
 80017e8:	4602      	mov	r2, r0
 80017ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff5f 	bl	80016b4 <__NVIC_SetPriority>
}
 80017f6:	bf00      	nop
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	4603      	mov	r3, r0
 8001806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff35 	bl	800167c <__NVIC_EnableIRQ>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ffa2 	bl	800176c <SysTick_Config>
 8001828:	4603      	mov	r3, r0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001834:	b480      	push	{r7}
 8001836:	b08b      	sub	sp, #44	; 0x2c
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001846:	e169      	b.n	8001b1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001848:	2201      	movs	r2, #1
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	429a      	cmp	r2, r3
 8001862:	f040 8158 	bne.w	8001b16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4a9a      	ldr	r2, [pc, #616]	; (8001ad4 <HAL_GPIO_Init+0x2a0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d05e      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 8001870:	4a98      	ldr	r2, [pc, #608]	; (8001ad4 <HAL_GPIO_Init+0x2a0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d875      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 8001876:	4a98      	ldr	r2, [pc, #608]	; (8001ad8 <HAL_GPIO_Init+0x2a4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d058      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 800187c:	4a96      	ldr	r2, [pc, #600]	; (8001ad8 <HAL_GPIO_Init+0x2a4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d86f      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 8001882:	4a96      	ldr	r2, [pc, #600]	; (8001adc <HAL_GPIO_Init+0x2a8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d052      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 8001888:	4a94      	ldr	r2, [pc, #592]	; (8001adc <HAL_GPIO_Init+0x2a8>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d869      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 800188e:	4a94      	ldr	r2, [pc, #592]	; (8001ae0 <HAL_GPIO_Init+0x2ac>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d04c      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 8001894:	4a92      	ldr	r2, [pc, #584]	; (8001ae0 <HAL_GPIO_Init+0x2ac>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d863      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 800189a:	4a92      	ldr	r2, [pc, #584]	; (8001ae4 <HAL_GPIO_Init+0x2b0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d046      	beq.n	800192e <HAL_GPIO_Init+0xfa>
 80018a0:	4a90      	ldr	r2, [pc, #576]	; (8001ae4 <HAL_GPIO_Init+0x2b0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d85d      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 80018a6:	2b12      	cmp	r3, #18
 80018a8:	d82a      	bhi.n	8001900 <HAL_GPIO_Init+0xcc>
 80018aa:	2b12      	cmp	r3, #18
 80018ac:	d859      	bhi.n	8001962 <HAL_GPIO_Init+0x12e>
 80018ae:	a201      	add	r2, pc, #4	; (adr r2, 80018b4 <HAL_GPIO_Init+0x80>)
 80018b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b4:	0800192f 	.word	0x0800192f
 80018b8:	08001909 	.word	0x08001909
 80018bc:	0800191b 	.word	0x0800191b
 80018c0:	0800195d 	.word	0x0800195d
 80018c4:	08001963 	.word	0x08001963
 80018c8:	08001963 	.word	0x08001963
 80018cc:	08001963 	.word	0x08001963
 80018d0:	08001963 	.word	0x08001963
 80018d4:	08001963 	.word	0x08001963
 80018d8:	08001963 	.word	0x08001963
 80018dc:	08001963 	.word	0x08001963
 80018e0:	08001963 	.word	0x08001963
 80018e4:	08001963 	.word	0x08001963
 80018e8:	08001963 	.word	0x08001963
 80018ec:	08001963 	.word	0x08001963
 80018f0:	08001963 	.word	0x08001963
 80018f4:	08001963 	.word	0x08001963
 80018f8:	08001911 	.word	0x08001911
 80018fc:	08001925 	.word	0x08001925
 8001900:	4a79      	ldr	r2, [pc, #484]	; (8001ae8 <HAL_GPIO_Init+0x2b4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001906:	e02c      	b.n	8001962 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	623b      	str	r3, [r7, #32]
          break;
 800190e:	e029      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	3304      	adds	r3, #4
 8001916:	623b      	str	r3, [r7, #32]
          break;
 8001918:	e024      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	3308      	adds	r3, #8
 8001920:	623b      	str	r3, [r7, #32]
          break;
 8001922:	e01f      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	330c      	adds	r3, #12
 800192a:	623b      	str	r3, [r7, #32]
          break;
 800192c:	e01a      	b.n	8001964 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d102      	bne.n	800193c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001936:	2304      	movs	r3, #4
 8001938:	623b      	str	r3, [r7, #32]
          break;
 800193a:	e013      	b.n	8001964 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d105      	bne.n	8001950 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001944:	2308      	movs	r3, #8
 8001946:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	611a      	str	r2, [r3, #16]
          break;
 800194e:	e009      	b.n	8001964 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001950:	2308      	movs	r3, #8
 8001952:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	615a      	str	r2, [r3, #20]
          break;
 800195a:	e003      	b.n	8001964 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800195c:	2300      	movs	r3, #0
 800195e:	623b      	str	r3, [r7, #32]
          break;
 8001960:	e000      	b.n	8001964 <HAL_GPIO_Init+0x130>
          break;
 8001962:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2bff      	cmp	r3, #255	; 0xff
 8001968:	d801      	bhi.n	800196e <HAL_GPIO_Init+0x13a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	e001      	b.n	8001972 <HAL_GPIO_Init+0x13e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3304      	adds	r3, #4
 8001972:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	2bff      	cmp	r3, #255	; 0xff
 8001978:	d802      	bhi.n	8001980 <HAL_GPIO_Init+0x14c>
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	e002      	b.n	8001986 <HAL_GPIO_Init+0x152>
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	3b08      	subs	r3, #8
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	210f      	movs	r1, #15
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	401a      	ands	r2, r3
 8001998:	6a39      	ldr	r1, [r7, #32]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	431a      	orrs	r2, r3
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 80b1 	beq.w	8001b16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019b4:	4b4d      	ldr	r3, [pc, #308]	; (8001aec <HAL_GPIO_Init+0x2b8>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a4c      	ldr	r2, [pc, #304]	; (8001aec <HAL_GPIO_Init+0x2b8>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b4a      	ldr	r3, [pc, #296]	; (8001aec <HAL_GPIO_Init+0x2b8>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019cc:	4a48      	ldr	r2, [pc, #288]	; (8001af0 <HAL_GPIO_Init+0x2bc>)
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	3302      	adds	r3, #2
 80019d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	220f      	movs	r2, #15
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a40      	ldr	r2, [pc, #256]	; (8001af4 <HAL_GPIO_Init+0x2c0>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d013      	beq.n	8001a20 <HAL_GPIO_Init+0x1ec>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a3f      	ldr	r2, [pc, #252]	; (8001af8 <HAL_GPIO_Init+0x2c4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d00d      	beq.n	8001a1c <HAL_GPIO_Init+0x1e8>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a3e      	ldr	r2, [pc, #248]	; (8001afc <HAL_GPIO_Init+0x2c8>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d007      	beq.n	8001a18 <HAL_GPIO_Init+0x1e4>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a3d      	ldr	r2, [pc, #244]	; (8001b00 <HAL_GPIO_Init+0x2cc>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d101      	bne.n	8001a14 <HAL_GPIO_Init+0x1e0>
 8001a10:	2303      	movs	r3, #3
 8001a12:	e006      	b.n	8001a22 <HAL_GPIO_Init+0x1ee>
 8001a14:	2304      	movs	r3, #4
 8001a16:	e004      	b.n	8001a22 <HAL_GPIO_Init+0x1ee>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e002      	b.n	8001a22 <HAL_GPIO_Init+0x1ee>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <HAL_GPIO_Init+0x1ee>
 8001a20:	2300      	movs	r3, #0
 8001a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a24:	f002 0203 	and.w	r2, r2, #3
 8001a28:	0092      	lsls	r2, r2, #2
 8001a2a:	4093      	lsls	r3, r2
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a32:	492f      	ldr	r1, [pc, #188]	; (8001af0 <HAL_GPIO_Init+0x2bc>)
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a4c:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	492c      	ldr	r1, [pc, #176]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	600b      	str	r3, [r1, #0]
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a5a:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	4928      	ldr	r1, [pc, #160]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d006      	beq.n	8001a82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a74:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	4922      	ldr	r1, [pc, #136]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	491e      	ldr	r1, [pc, #120]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	4918      	ldr	r1, [pc, #96]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]
 8001aa8:	e006      	b.n	8001ab8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	4914      	ldr	r1, [pc, #80]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d021      	beq.n	8001b08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	490e      	ldr	r1, [pc, #56]	; (8001b04 <HAL_GPIO_Init+0x2d0>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	60cb      	str	r3, [r1, #12]
 8001ad0:	e021      	b.n	8001b16 <HAL_GPIO_Init+0x2e2>
 8001ad2:	bf00      	nop
 8001ad4:	10320000 	.word	0x10320000
 8001ad8:	10310000 	.word	0x10310000
 8001adc:	10220000 	.word	0x10220000
 8001ae0:	10210000 	.word	0x10210000
 8001ae4:	10120000 	.word	0x10120000
 8001ae8:	10110000 	.word	0x10110000
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40010000 	.word	0x40010000
 8001af4:	40010800 	.word	0x40010800
 8001af8:	40010c00 	.word	0x40010c00
 8001afc:	40011000 	.word	0x40011000
 8001b00:	40011400 	.word	0x40011400
 8001b04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	4909      	ldr	r1, [pc, #36]	; (8001b38 <HAL_GPIO_Init+0x304>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	3301      	adds	r3, #1
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	fa22 f303 	lsr.w	r3, r2, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f47f ae8e 	bne.w	8001848 <HAL_GPIO_Init+0x14>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	372c      	adds	r7, #44	; 0x2c
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	40010400 	.word	0x40010400

08001b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b4c:	787b      	ldrb	r3, [r7, #1]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b58:	e003      	b.n	8001b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b5a:	887b      	ldrh	r3, [r7, #2]
 8001b5c:	041a      	lsls	r2, r3, #16
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	611a      	str	r2, [r3, #16]
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4013      	ands	r3, r2
 8001b84:	041a      	lsls	r2, r3, #16
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	43d9      	mvns	r1, r3
 8001b8a:	887b      	ldrh	r3, [r7, #2]
 8001b8c:	400b      	ands	r3, r1
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	611a      	str	r2, [r3, #16]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e12b      	b.n	8001e0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d106      	bne.n	8001bcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff f828 	bl	8000c1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2224      	movs	r2, #36	; 0x24
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bf2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c04:	f000 fce4 	bl	80025d0 <HAL_RCC_GetPCLK1Freq>
 8001c08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	4a81      	ldr	r2, [pc, #516]	; (8001e14 <HAL_I2C_Init+0x274>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d807      	bhi.n	8001c24 <HAL_I2C_Init+0x84>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4a80      	ldr	r2, [pc, #512]	; (8001e18 <HAL_I2C_Init+0x278>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	bf94      	ite	ls
 8001c1c:	2301      	movls	r3, #1
 8001c1e:	2300      	movhi	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	e006      	b.n	8001c32 <HAL_I2C_Init+0x92>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4a7d      	ldr	r2, [pc, #500]	; (8001e1c <HAL_I2C_Init+0x27c>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	bf94      	ite	ls
 8001c2c:	2301      	movls	r3, #1
 8001c2e:	2300      	movhi	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e0e7      	b.n	8001e0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4a78      	ldr	r2, [pc, #480]	; (8001e20 <HAL_I2C_Init+0x280>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	0c9b      	lsrs	r3, r3, #18
 8001c44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	4a6a      	ldr	r2, [pc, #424]	; (8001e14 <HAL_I2C_Init+0x274>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d802      	bhi.n	8001c74 <HAL_I2C_Init+0xd4>
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	3301      	adds	r3, #1
 8001c72:	e009      	b.n	8001c88 <HAL_I2C_Init+0xe8>
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c7a:	fb02 f303 	mul.w	r3, r2, r3
 8001c7e:	4a69      	ldr	r2, [pc, #420]	; (8001e24 <HAL_I2C_Init+0x284>)
 8001c80:	fba2 2303 	umull	r2, r3, r2, r3
 8001c84:	099b      	lsrs	r3, r3, #6
 8001c86:	3301      	adds	r3, #1
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	430b      	orrs	r3, r1
 8001c8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	495c      	ldr	r1, [pc, #368]	; (8001e14 <HAL_I2C_Init+0x274>)
 8001ca4:	428b      	cmp	r3, r1
 8001ca6:	d819      	bhi.n	8001cdc <HAL_I2C_Init+0x13c>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	1e59      	subs	r1, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cb6:	1c59      	adds	r1, r3, #1
 8001cb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001cbc:	400b      	ands	r3, r1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00a      	beq.n	8001cd8 <HAL_I2C_Init+0x138>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1e59      	subs	r1, r3, #1
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd6:	e051      	b.n	8001d7c <HAL_I2C_Init+0x1dc>
 8001cd8:	2304      	movs	r3, #4
 8001cda:	e04f      	b.n	8001d7c <HAL_I2C_Init+0x1dc>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d111      	bne.n	8001d08 <HAL_I2C_Init+0x168>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	1e58      	subs	r0, r3, #1
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6859      	ldr	r1, [r3, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	440b      	add	r3, r1
 8001cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	bf0c      	ite	eq
 8001d00:	2301      	moveq	r3, #1
 8001d02:	2300      	movne	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	e012      	b.n	8001d2e <HAL_I2C_Init+0x18e>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	1e58      	subs	r0, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6859      	ldr	r1, [r3, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	0099      	lsls	r1, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d1e:	3301      	adds	r3, #1
 8001d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf0c      	ite	eq
 8001d28:	2301      	moveq	r3, #1
 8001d2a:	2300      	movne	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_I2C_Init+0x196>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e022      	b.n	8001d7c <HAL_I2C_Init+0x1dc>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10e      	bne.n	8001d5c <HAL_I2C_Init+0x1bc>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1e58      	subs	r0, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6859      	ldr	r1, [r3, #4]
 8001d46:	460b      	mov	r3, r1
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	440b      	add	r3, r1
 8001d4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d50:	3301      	adds	r3, #1
 8001d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d5a:	e00f      	b.n	8001d7c <HAL_I2C_Init+0x1dc>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1e58      	subs	r0, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6859      	ldr	r1, [r3, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	0099      	lsls	r1, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d72:	3301      	adds	r3, #1
 8001d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	6809      	ldr	r1, [r1, #0]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69da      	ldr	r2, [r3, #28]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001daa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6911      	ldr	r1, [r2, #16]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68d2      	ldr	r2, [r2, #12]
 8001db6:	4311      	orrs	r1, r2
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695a      	ldr	r2, [r3, #20]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0201 	orr.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2220      	movs	r2, #32
 8001df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	000186a0 	.word	0x000186a0
 8001e18:	001e847f 	.word	0x001e847f
 8001e1c:	003d08ff 	.word	0x003d08ff
 8001e20:	431bde83 	.word	0x431bde83
 8001e24:	10624dd3 	.word	0x10624dd3

08001e28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e272      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 8087 	beq.w	8001f56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e48:	4b92      	ldr	r3, [pc, #584]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 030c 	and.w	r3, r3, #12
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d00c      	beq.n	8001e6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e54:	4b8f      	ldr	r3, [pc, #572]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 030c 	and.w	r3, r3, #12
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d112      	bne.n	8001e86 <HAL_RCC_OscConfig+0x5e>
 8001e60:	4b8c      	ldr	r3, [pc, #560]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6c:	d10b      	bne.n	8001e86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6e:	4b89      	ldr	r3, [pc, #548]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d06c      	beq.n	8001f54 <HAL_RCC_OscConfig+0x12c>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d168      	bne.n	8001f54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e24c      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8e:	d106      	bne.n	8001e9e <HAL_RCC_OscConfig+0x76>
 8001e90:	4b80      	ldr	r3, [pc, #512]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a7f      	ldr	r2, [pc, #508]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	e02e      	b.n	8001efc <HAL_RCC_OscConfig+0xd4>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x98>
 8001ea6:	4b7b      	ldr	r3, [pc, #492]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a7a      	ldr	r2, [pc, #488]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	4b78      	ldr	r3, [pc, #480]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a77      	ldr	r2, [pc, #476]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e01d      	b.n	8001efc <HAL_RCC_OscConfig+0xd4>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0xbc>
 8001eca:	4b72      	ldr	r3, [pc, #456]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a71      	ldr	r2, [pc, #452]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	4b6f      	ldr	r3, [pc, #444]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a6e      	ldr	r2, [pc, #440]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e00b      	b.n	8001efc <HAL_RCC_OscConfig+0xd4>
 8001ee4:	4b6b      	ldr	r3, [pc, #428]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a6a      	ldr	r2, [pc, #424]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	4b68      	ldr	r3, [pc, #416]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a67      	ldr	r2, [pc, #412]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d013      	beq.n	8001f2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7ff f86a 	bl	8000fdc <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7ff f866 	bl	8000fdc <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e200      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	4b5d      	ldr	r3, [pc, #372]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0xe4>
 8001f2a:	e014      	b.n	8001f56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7ff f856 	bl	8000fdc <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f34:	f7ff f852 	bl	8000fdc <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	; 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e1ec      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f46:	4b53      	ldr	r3, [pc, #332]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x10c>
 8001f52:	e000      	b.n	8001f56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d063      	beq.n	800202a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f62:	4b4c      	ldr	r3, [pc, #304]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00b      	beq.n	8001f86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f6e:	4b49      	ldr	r3, [pc, #292]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d11c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x18c>
 8001f7a:	4b46      	ldr	r3, [pc, #280]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d116      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f86:	4b43      	ldr	r3, [pc, #268]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d005      	beq.n	8001f9e <HAL_RCC_OscConfig+0x176>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d001      	beq.n	8001f9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e1c0      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9e:	4b3d      	ldr	r3, [pc, #244]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4939      	ldr	r1, [pc, #228]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb2:	e03a      	b.n	800202a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d020      	beq.n	8001ffe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fbc:	4b36      	ldr	r3, [pc, #216]	; (8002098 <HAL_RCC_OscConfig+0x270>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc2:	f7ff f80b 	bl	8000fdc <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fca:	f7ff f807 	bl	8000fdc <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e1a1      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fdc:	4b2d      	ldr	r3, [pc, #180]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe8:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4927      	ldr	r1, [pc, #156]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]
 8001ffc:	e015      	b.n	800202a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffe:	4b26      	ldr	r3, [pc, #152]	; (8002098 <HAL_RCC_OscConfig+0x270>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7fe ffea 	bl	8000fdc <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800200c:	f7fe ffe6 	bl	8000fdc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e180      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201e:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d03a      	beq.n	80020ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d019      	beq.n	8002072 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800203e:	4b17      	ldr	r3, [pc, #92]	; (800209c <HAL_RCC_OscConfig+0x274>)
 8002040:	2201      	movs	r2, #1
 8002042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002044:	f7fe ffca 	bl	8000fdc <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800204c:	f7fe ffc6 	bl	8000fdc <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e160      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205e:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800206a:	2001      	movs	r0, #1
 800206c:	f000 fac4 	bl	80025f8 <RCC_Delay>
 8002070:	e01c      	b.n	80020ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <HAL_RCC_OscConfig+0x274>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002078:	f7fe ffb0 	bl	8000fdc <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800207e:	e00f      	b.n	80020a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002080:	f7fe ffac 	bl	8000fdc <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d908      	bls.n	80020a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e146      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	42420000 	.word	0x42420000
 800209c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a0:	4b92      	ldr	r3, [pc, #584]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1e9      	bne.n	8002080 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80a6 	beq.w	8002206 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020be:	4b8b      	ldr	r3, [pc, #556]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10d      	bne.n	80020e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ca:	4b88      	ldr	r3, [pc, #544]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	4a87      	ldr	r2, [pc, #540]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d4:	61d3      	str	r3, [r2, #28]
 80020d6:	4b85      	ldr	r3, [pc, #532]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e2:	2301      	movs	r3, #1
 80020e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e6:	4b82      	ldr	r3, [pc, #520]	; (80022f0 <HAL_RCC_OscConfig+0x4c8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d118      	bne.n	8002124 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f2:	4b7f      	ldr	r3, [pc, #508]	; (80022f0 <HAL_RCC_OscConfig+0x4c8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a7e      	ldr	r2, [pc, #504]	; (80022f0 <HAL_RCC_OscConfig+0x4c8>)
 80020f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fe:	f7fe ff6d 	bl	8000fdc <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002106:	f7fe ff69 	bl	8000fdc <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b64      	cmp	r3, #100	; 0x64
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e103      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002118:	4b75      	ldr	r3, [pc, #468]	; (80022f0 <HAL_RCC_OscConfig+0x4c8>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d106      	bne.n	800213a <HAL_RCC_OscConfig+0x312>
 800212c:	4b6f      	ldr	r3, [pc, #444]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	4a6e      	ldr	r2, [pc, #440]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6213      	str	r3, [r2, #32]
 8002138:	e02d      	b.n	8002196 <HAL_RCC_OscConfig+0x36e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0x334>
 8002142:	4b6a      	ldr	r3, [pc, #424]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	4a69      	ldr	r2, [pc, #420]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002148:	f023 0301 	bic.w	r3, r3, #1
 800214c:	6213      	str	r3, [r2, #32]
 800214e:	4b67      	ldr	r3, [pc, #412]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4a66      	ldr	r2, [pc, #408]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002154:	f023 0304 	bic.w	r3, r3, #4
 8002158:	6213      	str	r3, [r2, #32]
 800215a:	e01c      	b.n	8002196 <HAL_RCC_OscConfig+0x36e>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	2b05      	cmp	r3, #5
 8002162:	d10c      	bne.n	800217e <HAL_RCC_OscConfig+0x356>
 8002164:	4b61      	ldr	r3, [pc, #388]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4a60      	ldr	r2, [pc, #384]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 800216a:	f043 0304 	orr.w	r3, r3, #4
 800216e:	6213      	str	r3, [r2, #32]
 8002170:	4b5e      	ldr	r3, [pc, #376]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4a5d      	ldr	r2, [pc, #372]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	6213      	str	r3, [r2, #32]
 800217c:	e00b      	b.n	8002196 <HAL_RCC_OscConfig+0x36e>
 800217e:	4b5b      	ldr	r3, [pc, #364]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4a5a      	ldr	r2, [pc, #360]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002184:	f023 0301 	bic.w	r3, r3, #1
 8002188:	6213      	str	r3, [r2, #32]
 800218a:	4b58      	ldr	r3, [pc, #352]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	4a57      	ldr	r2, [pc, #348]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002190:	f023 0304 	bic.w	r3, r3, #4
 8002194:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d015      	beq.n	80021ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219e:	f7fe ff1d 	bl	8000fdc <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a4:	e00a      	b.n	80021bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a6:	f7fe ff19 	bl	8000fdc <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e0b1      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021bc:	4b4b      	ldr	r3, [pc, #300]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0ee      	beq.n	80021a6 <HAL_RCC_OscConfig+0x37e>
 80021c8:	e014      	b.n	80021f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ca:	f7fe ff07 	bl	8000fdc <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d0:	e00a      	b.n	80021e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d2:	f7fe ff03 	bl	8000fdc <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e09b      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e8:	4b40      	ldr	r3, [pc, #256]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1ee      	bne.n	80021d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021f4:	7dfb      	ldrb	r3, [r7, #23]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d105      	bne.n	8002206 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fa:	4b3c      	ldr	r3, [pc, #240]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	4a3b      	ldr	r2, [pc, #236]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002204:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 8087 	beq.w	800231e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002210:	4b36      	ldr	r3, [pc, #216]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 030c 	and.w	r3, r3, #12
 8002218:	2b08      	cmp	r3, #8
 800221a:	d061      	beq.n	80022e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d146      	bne.n	80022b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002224:	4b33      	ldr	r3, [pc, #204]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7fe fed7 	bl	8000fdc <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002232:	f7fe fed3 	bl	8000fdc <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e06d      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002244:	4b29      	ldr	r3, [pc, #164]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f0      	bne.n	8002232 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002258:	d108      	bne.n	800226c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800225a:	4b24      	ldr	r3, [pc, #144]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	4921      	ldr	r1, [pc, #132]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800226c:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a19      	ldr	r1, [r3, #32]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	430b      	orrs	r3, r1
 800227e:	491b      	ldr	r1, [pc, #108]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002280:	4313      	orrs	r3, r2
 8002282:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002284:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 8002286:	2201      	movs	r2, #1
 8002288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228a:	f7fe fea7 	bl	8000fdc <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002292:	f7fe fea3 	bl	8000fdc <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e03d      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022a4:	4b11      	ldr	r3, [pc, #68]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x46a>
 80022b0:	e035      	b.n	800231e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b2:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7fe fe90 	bl	8000fdc <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c0:	f7fe fe8c 	bl	8000fdc <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e026      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x498>
 80022de:	e01e      	b.n	800231e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d107      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e019      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40007000 	.word	0x40007000
 80022f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_RCC_OscConfig+0x500>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	429a      	cmp	r2, r3
 800230a:	d106      	bne.n	800231a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002316:	429a      	cmp	r2, r3
 8002318:	d001      	beq.n	800231e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000

0800232c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0d0      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002340:	4b6a      	ldr	r3, [pc, #424]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d910      	bls.n	8002370 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b67      	ldr	r3, [pc, #412]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 0207 	bic.w	r2, r3, #7
 8002356:	4965      	ldr	r1, [pc, #404]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b63      	ldr	r3, [pc, #396]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0b8      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d020      	beq.n	80023be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002388:	4b59      	ldr	r3, [pc, #356]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4a58      	ldr	r2, [pc, #352]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002392:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0308 	and.w	r3, r3, #8
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023a0:	4b53      	ldr	r3, [pc, #332]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	4a52      	ldr	r2, [pc, #328]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ac:	4b50      	ldr	r3, [pc, #320]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	494d      	ldr	r1, [pc, #308]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d040      	beq.n	800244c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d107      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d2:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d115      	bne.n	800240a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e07f      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d107      	bne.n	80023fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ea:	4b41      	ldr	r3, [pc, #260]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d109      	bne.n	800240a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e073      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fa:	4b3d      	ldr	r3, [pc, #244]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e06b      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800240a:	4b39      	ldr	r3, [pc, #228]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f023 0203 	bic.w	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	4936      	ldr	r1, [pc, #216]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002418:	4313      	orrs	r3, r2
 800241a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800241c:	f7fe fdde 	bl	8000fdc <HAL_GetTick>
 8002420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002422:	e00a      	b.n	800243a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002424:	f7fe fdda 	bl	8000fdc <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e053      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243a:	4b2d      	ldr	r3, [pc, #180]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 020c 	and.w	r2, r3, #12
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	429a      	cmp	r2, r3
 800244a:	d1eb      	bne.n	8002424 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800244c:	4b27      	ldr	r3, [pc, #156]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d210      	bcs.n	800247c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245a:	4b24      	ldr	r3, [pc, #144]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 0207 	bic.w	r2, r3, #7
 8002462:	4922      	ldr	r1, [pc, #136]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	4313      	orrs	r3, r2
 8002468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246a:	4b20      	ldr	r3, [pc, #128]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e032      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002488:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4916      	ldr	r1, [pc, #88]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	4313      	orrs	r3, r2
 8002498:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d009      	beq.n	80024ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024a6:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	490e      	ldr	r1, [pc, #56]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ba:	f000 f821 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80024be:	4602      	mov	r2, r0
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	091b      	lsrs	r3, r3, #4
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	490a      	ldr	r1, [pc, #40]	; (80024f4 <HAL_RCC_ClockConfig+0x1c8>)
 80024cc:	5ccb      	ldrb	r3, [r1, r3]
 80024ce:	fa22 f303 	lsr.w	r3, r2, r3
 80024d2:	4a09      	ldr	r2, [pc, #36]	; (80024f8 <HAL_RCC_ClockConfig+0x1cc>)
 80024d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_RCC_ClockConfig+0x1d0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fd3c 	bl	8000f58 <HAL_InitTick>

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40022000 	.word	0x40022000
 80024f0:	40021000 	.word	0x40021000
 80024f4:	08004048 	.word	0x08004048
 80024f8:	20000000 	.word	0x20000000
 80024fc:	20000004 	.word	0x20000004

08002500 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002500:	b490      	push	{r4, r7}
 8002502:	b08a      	sub	sp, #40	; 0x28
 8002504:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002506:	4b29      	ldr	r3, [pc, #164]	; (80025ac <HAL_RCC_GetSysClockFreq+0xac>)
 8002508:	1d3c      	adds	r4, r7, #4
 800250a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800250c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002510:	f240 2301 	movw	r3, #513	; 0x201
 8002514:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
 800251e:	2300      	movs	r3, #0
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800252a:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b04      	cmp	r3, #4
 8002538:	d002      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x40>
 800253a:	2b08      	cmp	r3, #8
 800253c:	d003      	beq.n	8002546 <HAL_RCC_GetSysClockFreq+0x46>
 800253e:	e02b      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002540:	4b1c      	ldr	r3, [pc, #112]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002542:	623b      	str	r3, [r7, #32]
      break;
 8002544:	e02b      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	0c9b      	lsrs	r3, r3, #18
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	3328      	adds	r3, #40	; 0x28
 8002550:	443b      	add	r3, r7
 8002552:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002556:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d012      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002562:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	0c5b      	lsrs	r3, r3, #17
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	3328      	adds	r3, #40	; 0x28
 800256e:	443b      	add	r3, r7
 8002570:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002574:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	4a0e      	ldr	r2, [pc, #56]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800257a:	fb03 f202 	mul.w	r2, r3, r2
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	fbb2 f3f3 	udiv	r3, r2, r3
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
 8002586:	e004      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	4a0b      	ldr	r2, [pc, #44]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800258c:	fb02 f303 	mul.w	r3, r2, r3
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	623b      	str	r3, [r7, #32]
      break;
 8002596:	e002      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002598:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800259a:	623b      	str	r3, [r7, #32]
      break;
 800259c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800259e:	6a3b      	ldr	r3, [r7, #32]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3728      	adds	r7, #40	; 0x28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc90      	pop	{r4, r7}
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	08004038 	.word	0x08004038
 80025b0:	40021000 	.word	0x40021000
 80025b4:	007a1200 	.word	0x007a1200
 80025b8:	003d0900 	.word	0x003d0900

080025bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c0:	4b02      	ldr	r3, [pc, #8]	; (80025cc <HAL_RCC_GetHCLKFreq+0x10>)
 80025c2:	681b      	ldr	r3, [r3, #0]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr
 80025cc:	20000000 	.word	0x20000000

080025d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025d4:	f7ff fff2 	bl	80025bc <HAL_RCC_GetHCLKFreq>
 80025d8:	4602      	mov	r2, r0
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	4903      	ldr	r1, [pc, #12]	; (80025f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e6:	5ccb      	ldrb	r3, [r1, r3]
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000
 80025f4:	08004058 	.word	0x08004058

080025f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002600:	4b0a      	ldr	r3, [pc, #40]	; (800262c <RCC_Delay+0x34>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <RCC_Delay+0x38>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	0a5b      	lsrs	r3, r3, #9
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	fb02 f303 	mul.w	r3, r2, r3
 8002612:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002614:	bf00      	nop
  }
  while (Delay --);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1e5a      	subs	r2, r3, #1
 800261a:	60fa      	str	r2, [r7, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f9      	bne.n	8002614 <RCC_Delay+0x1c>
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	20000000 	.word	0x20000000
 8002630:	10624dd3 	.word	0x10624dd3

08002634 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d07d      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002650:	2300      	movs	r3, #0
 8002652:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002654:	4b4f      	ldr	r3, [pc, #316]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10d      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002660:	4b4c      	ldr	r3, [pc, #304]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	4a4b      	ldr	r2, [pc, #300]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266a:	61d3      	str	r3, [r2, #28]
 800266c:	4b49      	ldr	r3, [pc, #292]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002678:	2301      	movs	r3, #1
 800267a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267c:	4b46      	ldr	r3, [pc, #280]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d118      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002688:	4b43      	ldr	r3, [pc, #268]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a42      	ldr	r2, [pc, #264]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800268e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002692:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002694:	f7fe fca2 	bl	8000fdc <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269a:	e008      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269c:	f7fe fc9e 	bl	8000fdc <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	; 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e06d      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ae:	4b3a      	ldr	r3, [pc, #232]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026ba:	4b36      	ldr	r3, [pc, #216]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d02e      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d027      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026d8:	4b2e      	ldr	r3, [pc, #184]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026e2:	4b2e      	ldr	r3, [pc, #184]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026e8:	4b2c      	ldr	r3, [pc, #176]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026ee:	4a29      	ldr	r2, [pc, #164]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d014      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fe:	f7fe fc6d 	bl	8000fdc <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002704:	e00a      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002706:	f7fe fc69 	bl	8000fdc <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	f241 3288 	movw	r2, #5000	; 0x1388
 8002714:	4293      	cmp	r3, r2
 8002716:	d901      	bls.n	800271c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e036      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271c:	4b1d      	ldr	r3, [pc, #116]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0ee      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002728:	4b1a      	ldr	r3, [pc, #104]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4917      	ldr	r1, [pc, #92]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002736:	4313      	orrs	r3, r2
 8002738:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800273a:	7dfb      	ldrb	r3, [r7, #23]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d105      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002740:	4b14      	ldr	r3, [pc, #80]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	4a13      	ldr	r2, [pc, #76]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800274a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002758:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	490b      	ldr	r1, [pc, #44]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002766:	4313      	orrs	r3, r2
 8002768:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0310 	and.w	r3, r3, #16
 8002772:	2b00      	cmp	r3, #0
 8002774:	d008      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002776:	4b07      	ldr	r3, [pc, #28]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	4904      	ldr	r1, [pc, #16]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002784:	4313      	orrs	r3, r2
 8002786:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
 8002798:	40007000 	.word	0x40007000
 800279c:	42420440 	.word	0x42420440

080027a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e041      	b.n	8002836 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fe fa66 	bl	8000c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3304      	adds	r3, #4
 80027dc:	4619      	mov	r1, r3
 80027de:	4610      	mov	r0, r2
 80027e0:	f000 fa08 	bl	8002bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e041      	b.n	80028d4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d106      	bne.n	800286a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f839 	bl	80028dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2202      	movs	r2, #2
 800286e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3304      	adds	r3, #4
 800287a:	4619      	mov	r1, r3
 800287c:	4610      	mov	r0, r2
 800287e:	f000 f9b9 	bl	8002bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002906:	2302      	movs	r3, #2
 8002908:	e0ac      	b.n	8002a64 <HAL_TIM_PWM_ConfigChannel+0x174>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b0c      	cmp	r3, #12
 8002916:	f200 809f 	bhi.w	8002a58 <HAL_TIM_PWM_ConfigChannel+0x168>
 800291a:	a201      	add	r2, pc, #4	; (adr r2, 8002920 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800291c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002920:	08002955 	.word	0x08002955
 8002924:	08002a59 	.word	0x08002a59
 8002928:	08002a59 	.word	0x08002a59
 800292c:	08002a59 	.word	0x08002a59
 8002930:	08002995 	.word	0x08002995
 8002934:	08002a59 	.word	0x08002a59
 8002938:	08002a59 	.word	0x08002a59
 800293c:	08002a59 	.word	0x08002a59
 8002940:	080029d7 	.word	0x080029d7
 8002944:	08002a59 	.word	0x08002a59
 8002948:	08002a59 	.word	0x08002a59
 800294c:	08002a59 	.word	0x08002a59
 8002950:	08002a17 	.word	0x08002a17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	4618      	mov	r0, r3
 800295c:	f000 f9ac 	bl	8002cb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0208 	orr.w	r2, r2, #8
 800296e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699a      	ldr	r2, [r3, #24]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0204 	bic.w	r2, r2, #4
 800297e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6999      	ldr	r1, [r3, #24]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	691a      	ldr	r2, [r3, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	619a      	str	r2, [r3, #24]
      break;
 8002992:	e062      	b.n	8002a5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f9f2 	bl	8002d84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699a      	ldr	r2, [r3, #24]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699a      	ldr	r2, [r3, #24]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6999      	ldr	r1, [r3, #24]
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	021a      	lsls	r2, r3, #8
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	619a      	str	r2, [r3, #24]
      break;
 80029d4:	e041      	b.n	8002a5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68b9      	ldr	r1, [r7, #8]
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fa3b 	bl	8002e58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	69da      	ldr	r2, [r3, #28]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0208 	orr.w	r2, r2, #8
 80029f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69da      	ldr	r2, [r3, #28]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0204 	bic.w	r2, r2, #4
 8002a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	69d9      	ldr	r1, [r3, #28]
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	61da      	str	r2, [r3, #28]
      break;
 8002a14:	e021      	b.n	8002a5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 fa85 	bl	8002f2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69da      	ldr	r2, [r3, #28]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	69da      	ldr	r2, [r3, #28]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69d9      	ldr	r1, [r3, #28]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	021a      	lsls	r2, r3, #8
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	61da      	str	r2, [r3, #28]
      break;
 8002a56:	e000      	b.n	8002a5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002a58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_TIM_ConfigClockSource+0x18>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e0b3      	b.n	8002bec <HAL_TIM_ConfigClockSource+0x180>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002aa2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aaa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002abc:	d03e      	beq.n	8002b3c <HAL_TIM_ConfigClockSource+0xd0>
 8002abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac2:	f200 8087 	bhi.w	8002bd4 <HAL_TIM_ConfigClockSource+0x168>
 8002ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aca:	f000 8085 	beq.w	8002bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad2:	d87f      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x168>
 8002ad4:	2b70      	cmp	r3, #112	; 0x70
 8002ad6:	d01a      	beq.n	8002b0e <HAL_TIM_ConfigClockSource+0xa2>
 8002ad8:	2b70      	cmp	r3, #112	; 0x70
 8002ada:	d87b      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x168>
 8002adc:	2b60      	cmp	r3, #96	; 0x60
 8002ade:	d050      	beq.n	8002b82 <HAL_TIM_ConfigClockSource+0x116>
 8002ae0:	2b60      	cmp	r3, #96	; 0x60
 8002ae2:	d877      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x168>
 8002ae4:	2b50      	cmp	r3, #80	; 0x50
 8002ae6:	d03c      	beq.n	8002b62 <HAL_TIM_ConfigClockSource+0xf6>
 8002ae8:	2b50      	cmp	r3, #80	; 0x50
 8002aea:	d873      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x168>
 8002aec:	2b40      	cmp	r3, #64	; 0x40
 8002aee:	d058      	beq.n	8002ba2 <HAL_TIM_ConfigClockSource+0x136>
 8002af0:	2b40      	cmp	r3, #64	; 0x40
 8002af2:	d86f      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x168>
 8002af4:	2b30      	cmp	r3, #48	; 0x30
 8002af6:	d064      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x156>
 8002af8:	2b30      	cmp	r3, #48	; 0x30
 8002afa:	d86b      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x168>
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	d060      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x156>
 8002b00:	2b20      	cmp	r3, #32
 8002b02:	d867      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x168>
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d05c      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x156>
 8002b08:	2b10      	cmp	r3, #16
 8002b0a:	d05a      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b0c:	e062      	b.n	8002bd4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	6899      	ldr	r1, [r3, #8]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f000 faca 	bl	80030b6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	609a      	str	r2, [r3, #8]
      break;
 8002b3a:	e04e      	b.n	8002bda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	6899      	ldr	r1, [r3, #8]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f000 fab3 	bl	80030b6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b5e:	609a      	str	r2, [r3, #8]
      break;
 8002b60:	e03b      	b.n	8002bda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	6859      	ldr	r1, [r3, #4]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	f000 fa2a 	bl	8002fc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2150      	movs	r1, #80	; 0x50
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fa81 	bl	8003082 <TIM_ITRx_SetConfig>
      break;
 8002b80:	e02b      	b.n	8002bda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	6859      	ldr	r1, [r3, #4]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f000 fa48 	bl	8003024 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2160      	movs	r1, #96	; 0x60
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 fa71 	bl	8003082 <TIM_ITRx_SetConfig>
      break;
 8002ba0:	e01b      	b.n	8002bda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	6859      	ldr	r1, [r3, #4]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f000 fa0a 	bl	8002fc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2140      	movs	r1, #64	; 0x40
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fa61 	bl	8003082 <TIM_ITRx_SetConfig>
      break;
 8002bc0:	e00b      	b.n	8002bda <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4610      	mov	r0, r2
 8002bce:	f000 fa58 	bl	8003082 <TIM_ITRx_SetConfig>
        break;
 8002bd2:	e002      	b.n	8002bda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002bd4:	bf00      	nop
 8002bd6:	e000      	b.n	8002bda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002bd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a29      	ldr	r2, [pc, #164]	; (8002cac <TIM_Base_SetConfig+0xb8>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d00b      	beq.n	8002c24 <TIM_Base_SetConfig+0x30>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c12:	d007      	beq.n	8002c24 <TIM_Base_SetConfig+0x30>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a26      	ldr	r2, [pc, #152]	; (8002cb0 <TIM_Base_SetConfig+0xbc>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d003      	beq.n	8002c24 <TIM_Base_SetConfig+0x30>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a25      	ldr	r2, [pc, #148]	; (8002cb4 <TIM_Base_SetConfig+0xc0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d108      	bne.n	8002c36 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a1c      	ldr	r2, [pc, #112]	; (8002cac <TIM_Base_SetConfig+0xb8>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00b      	beq.n	8002c56 <TIM_Base_SetConfig+0x62>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c44:	d007      	beq.n	8002c56 <TIM_Base_SetConfig+0x62>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a19      	ldr	r2, [pc, #100]	; (8002cb0 <TIM_Base_SetConfig+0xbc>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d003      	beq.n	8002c56 <TIM_Base_SetConfig+0x62>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a18      	ldr	r2, [pc, #96]	; (8002cb4 <TIM_Base_SetConfig+0xc0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d108      	bne.n	8002c68 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a07      	ldr	r2, [pc, #28]	; (8002cac <TIM_Base_SetConfig+0xb8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d103      	bne.n	8002c9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	615a      	str	r2, [r3, #20]
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr
 8002cac:	40012c00 	.word	0x40012c00
 8002cb0:	40000400 	.word	0x40000400
 8002cb4:	40000800 	.word	0x40000800

08002cb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b087      	sub	sp, #28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	f023 0201 	bic.w	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0303 	bic.w	r3, r3, #3
 8002cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f023 0302 	bic.w	r3, r3, #2
 8002d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a1c      	ldr	r2, [pc, #112]	; (8002d80 <TIM_OC1_SetConfig+0xc8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d10c      	bne.n	8002d2e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f023 0308 	bic.w	r3, r3, #8
 8002d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f023 0304 	bic.w	r3, r3, #4
 8002d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a13      	ldr	r2, [pc, #76]	; (8002d80 <TIM_OC1_SetConfig+0xc8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d111      	bne.n	8002d5a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	621a      	str	r2, [r3, #32]
}
 8002d74:	bf00      	nop
 8002d76:	371c      	adds	r7, #28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40012c00 	.word	0x40012c00

08002d84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	f023 0210 	bic.w	r2, r3, #16
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f023 0320 	bic.w	r3, r3, #32
 8002dce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a1d      	ldr	r2, [pc, #116]	; (8002e54 <TIM_OC2_SetConfig+0xd0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d10d      	bne.n	8002e00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a14      	ldr	r2, [pc, #80]	; (8002e54 <TIM_OC2_SetConfig+0xd0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d113      	bne.n	8002e30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	621a      	str	r2, [r3, #32]
}
 8002e4a:	bf00      	nop
 8002e4c:	371c      	adds	r7, #28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr
 8002e54:	40012c00 	.word	0x40012c00

08002e58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 0303 	bic.w	r3, r3, #3
 8002e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	021b      	lsls	r3, r3, #8
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <TIM_OC3_SetConfig+0xd0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d10d      	bne.n	8002ed2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a14      	ldr	r2, [pc, #80]	; (8002f28 <TIM_OC3_SetConfig+0xd0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d113      	bne.n	8002f02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	621a      	str	r2, [r3, #32]
}
 8002f1c:	bf00      	nop
 8002f1e:	371c      	adds	r7, #28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40012c00 	.word	0x40012c00

08002f2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	031b      	lsls	r3, r3, #12
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a0f      	ldr	r2, [pc, #60]	; (8002fc4 <TIM_OC4_SetConfig+0x98>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d109      	bne.n	8002fa0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	019b      	lsls	r3, r3, #6
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	621a      	str	r2, [r3, #32]
}
 8002fba:	bf00      	nop
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr
 8002fc4:	40012c00 	.word	0x40012c00

08002fc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	f023 0201 	bic.w	r2, r3, #1
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f023 030a 	bic.w	r3, r3, #10
 8003004:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4313      	orrs	r3, r2
 800300c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	621a      	str	r2, [r3, #32]
}
 800301a:	bf00      	nop
 800301c:	371c      	adds	r7, #28
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003024:	b480      	push	{r7}
 8003026:	b087      	sub	sp, #28
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	f023 0210 	bic.w	r2, r3, #16
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800304e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	031b      	lsls	r3, r3, #12
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	4313      	orrs	r3, r2
 8003058:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003060:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	621a      	str	r2, [r3, #32]
}
 8003078:	bf00      	nop
 800307a:	371c      	adds	r7, #28
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr

08003082 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003082:	b480      	push	{r7}
 8003084:	b085      	sub	sp, #20
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003098:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	f043 0307 	orr.w	r3, r3, #7
 80030a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	609a      	str	r2, [r3, #8]
}
 80030ac:	bf00      	nop
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr

080030b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b087      	sub	sp, #28
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607a      	str	r2, [r7, #4]
 80030c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	021a      	lsls	r2, r3, #8
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	431a      	orrs	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	4313      	orrs	r3, r2
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	609a      	str	r2, [r3, #8]
}
 80030ea:	bf00      	nop
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003108:	2302      	movs	r3, #2
 800310a:	e046      	b.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a16      	ldr	r2, [pc, #88]	; (80031a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00e      	beq.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003158:	d009      	beq.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d004      	beq.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a10      	ldr	r2, [pc, #64]	; (80031ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d10c      	bne.n	8003188 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003174:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	4313      	orrs	r3, r2
 800317e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr
 80031a4:	40012c00 	.word	0x40012c00
 80031a8:	40000400 	.word	0x40000400
 80031ac:	40000800 	.word	0x40000800

080031b0 <std>:
 80031b0:	2300      	movs	r3, #0
 80031b2:	b510      	push	{r4, lr}
 80031b4:	4604      	mov	r4, r0
 80031b6:	e9c0 3300 	strd	r3, r3, [r0]
 80031ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031be:	6083      	str	r3, [r0, #8]
 80031c0:	8181      	strh	r1, [r0, #12]
 80031c2:	6643      	str	r3, [r0, #100]	; 0x64
 80031c4:	81c2      	strh	r2, [r0, #14]
 80031c6:	6183      	str	r3, [r0, #24]
 80031c8:	4619      	mov	r1, r3
 80031ca:	2208      	movs	r2, #8
 80031cc:	305c      	adds	r0, #92	; 0x5c
 80031ce:	f000 f8f4 	bl	80033ba <memset>
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <std+0x38>)
 80031d4:	6224      	str	r4, [r4, #32]
 80031d6:	6263      	str	r3, [r4, #36]	; 0x24
 80031d8:	4b04      	ldr	r3, [pc, #16]	; (80031ec <std+0x3c>)
 80031da:	62a3      	str	r3, [r4, #40]	; 0x28
 80031dc:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <std+0x40>)
 80031de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031e0:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <std+0x44>)
 80031e2:	6323      	str	r3, [r4, #48]	; 0x30
 80031e4:	bd10      	pop	{r4, pc}
 80031e6:	bf00      	nop
 80031e8:	08003335 	.word	0x08003335
 80031ec:	08003357 	.word	0x08003357
 80031f0:	0800338f 	.word	0x0800338f
 80031f4:	080033b3 	.word	0x080033b3

080031f8 <stdio_exit_handler>:
 80031f8:	4a02      	ldr	r2, [pc, #8]	; (8003204 <stdio_exit_handler+0xc>)
 80031fa:	4903      	ldr	r1, [pc, #12]	; (8003208 <stdio_exit_handler+0x10>)
 80031fc:	4803      	ldr	r0, [pc, #12]	; (800320c <stdio_exit_handler+0x14>)
 80031fe:	f000 b869 	b.w	80032d4 <_fwalk_sglue>
 8003202:	bf00      	nop
 8003204:	2000000c 	.word	0x2000000c
 8003208:	08003d49 	.word	0x08003d49
 800320c:	20000018 	.word	0x20000018

08003210 <cleanup_stdio>:
 8003210:	6841      	ldr	r1, [r0, #4]
 8003212:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <cleanup_stdio+0x34>)
 8003214:	b510      	push	{r4, lr}
 8003216:	4299      	cmp	r1, r3
 8003218:	4604      	mov	r4, r0
 800321a:	d001      	beq.n	8003220 <cleanup_stdio+0x10>
 800321c:	f000 fd94 	bl	8003d48 <_fflush_r>
 8003220:	68a1      	ldr	r1, [r4, #8]
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <cleanup_stdio+0x38>)
 8003224:	4299      	cmp	r1, r3
 8003226:	d002      	beq.n	800322e <cleanup_stdio+0x1e>
 8003228:	4620      	mov	r0, r4
 800322a:	f000 fd8d 	bl	8003d48 <_fflush_r>
 800322e:	68e1      	ldr	r1, [r4, #12]
 8003230:	4b06      	ldr	r3, [pc, #24]	; (800324c <cleanup_stdio+0x3c>)
 8003232:	4299      	cmp	r1, r3
 8003234:	d004      	beq.n	8003240 <cleanup_stdio+0x30>
 8003236:	4620      	mov	r0, r4
 8003238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800323c:	f000 bd84 	b.w	8003d48 <_fflush_r>
 8003240:	bd10      	pop	{r4, pc}
 8003242:	bf00      	nop
 8003244:	20000184 	.word	0x20000184
 8003248:	200001ec 	.word	0x200001ec
 800324c:	20000254 	.word	0x20000254

08003250 <global_stdio_init.part.0>:
 8003250:	b510      	push	{r4, lr}
 8003252:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <global_stdio_init.part.0+0x30>)
 8003254:	4c0b      	ldr	r4, [pc, #44]	; (8003284 <global_stdio_init.part.0+0x34>)
 8003256:	4a0c      	ldr	r2, [pc, #48]	; (8003288 <global_stdio_init.part.0+0x38>)
 8003258:	4620      	mov	r0, r4
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	2104      	movs	r1, #4
 800325e:	2200      	movs	r2, #0
 8003260:	f7ff ffa6 	bl	80031b0 <std>
 8003264:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003268:	2201      	movs	r2, #1
 800326a:	2109      	movs	r1, #9
 800326c:	f7ff ffa0 	bl	80031b0 <std>
 8003270:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003274:	2202      	movs	r2, #2
 8003276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800327a:	2112      	movs	r1, #18
 800327c:	f7ff bf98 	b.w	80031b0 <std>
 8003280:	200002bc 	.word	0x200002bc
 8003284:	20000184 	.word	0x20000184
 8003288:	080031f9 	.word	0x080031f9

0800328c <__sfp_lock_acquire>:
 800328c:	4801      	ldr	r0, [pc, #4]	; (8003294 <__sfp_lock_acquire+0x8>)
 800328e:	f000 b90d 	b.w	80034ac <__retarget_lock_acquire_recursive>
 8003292:	bf00      	nop
 8003294:	200002c5 	.word	0x200002c5

08003298 <__sfp_lock_release>:
 8003298:	4801      	ldr	r0, [pc, #4]	; (80032a0 <__sfp_lock_release+0x8>)
 800329a:	f000 b908 	b.w	80034ae <__retarget_lock_release_recursive>
 800329e:	bf00      	nop
 80032a0:	200002c5 	.word	0x200002c5

080032a4 <__sinit>:
 80032a4:	b510      	push	{r4, lr}
 80032a6:	4604      	mov	r4, r0
 80032a8:	f7ff fff0 	bl	800328c <__sfp_lock_acquire>
 80032ac:	6a23      	ldr	r3, [r4, #32]
 80032ae:	b11b      	cbz	r3, 80032b8 <__sinit+0x14>
 80032b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032b4:	f7ff bff0 	b.w	8003298 <__sfp_lock_release>
 80032b8:	4b04      	ldr	r3, [pc, #16]	; (80032cc <__sinit+0x28>)
 80032ba:	6223      	str	r3, [r4, #32]
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <__sinit+0x2c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1f5      	bne.n	80032b0 <__sinit+0xc>
 80032c4:	f7ff ffc4 	bl	8003250 <global_stdio_init.part.0>
 80032c8:	e7f2      	b.n	80032b0 <__sinit+0xc>
 80032ca:	bf00      	nop
 80032cc:	08003211 	.word	0x08003211
 80032d0:	200002bc 	.word	0x200002bc

080032d4 <_fwalk_sglue>:
 80032d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032d8:	4607      	mov	r7, r0
 80032da:	4688      	mov	r8, r1
 80032dc:	4614      	mov	r4, r2
 80032de:	2600      	movs	r6, #0
 80032e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032e4:	f1b9 0901 	subs.w	r9, r9, #1
 80032e8:	d505      	bpl.n	80032f6 <_fwalk_sglue+0x22>
 80032ea:	6824      	ldr	r4, [r4, #0]
 80032ec:	2c00      	cmp	r4, #0
 80032ee:	d1f7      	bne.n	80032e0 <_fwalk_sglue+0xc>
 80032f0:	4630      	mov	r0, r6
 80032f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032f6:	89ab      	ldrh	r3, [r5, #12]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d907      	bls.n	800330c <_fwalk_sglue+0x38>
 80032fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003300:	3301      	adds	r3, #1
 8003302:	d003      	beq.n	800330c <_fwalk_sglue+0x38>
 8003304:	4629      	mov	r1, r5
 8003306:	4638      	mov	r0, r7
 8003308:	47c0      	blx	r8
 800330a:	4306      	orrs	r6, r0
 800330c:	3568      	adds	r5, #104	; 0x68
 800330e:	e7e9      	b.n	80032e4 <_fwalk_sglue+0x10>

08003310 <iprintf>:
 8003310:	b40f      	push	{r0, r1, r2, r3}
 8003312:	b507      	push	{r0, r1, r2, lr}
 8003314:	4906      	ldr	r1, [pc, #24]	; (8003330 <iprintf+0x20>)
 8003316:	ab04      	add	r3, sp, #16
 8003318:	6808      	ldr	r0, [r1, #0]
 800331a:	f853 2b04 	ldr.w	r2, [r3], #4
 800331e:	6881      	ldr	r1, [r0, #8]
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	f000 f9e1 	bl	80036e8 <_vfiprintf_r>
 8003326:	b003      	add	sp, #12
 8003328:	f85d eb04 	ldr.w	lr, [sp], #4
 800332c:	b004      	add	sp, #16
 800332e:	4770      	bx	lr
 8003330:	20000064 	.word	0x20000064

08003334 <__sread>:
 8003334:	b510      	push	{r4, lr}
 8003336:	460c      	mov	r4, r1
 8003338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800333c:	f000 f868 	bl	8003410 <_read_r>
 8003340:	2800      	cmp	r0, #0
 8003342:	bfab      	itete	ge
 8003344:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003346:	89a3      	ldrhlt	r3, [r4, #12]
 8003348:	181b      	addge	r3, r3, r0
 800334a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800334e:	bfac      	ite	ge
 8003350:	6563      	strge	r3, [r4, #84]	; 0x54
 8003352:	81a3      	strhlt	r3, [r4, #12]
 8003354:	bd10      	pop	{r4, pc}

08003356 <__swrite>:
 8003356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800335a:	461f      	mov	r7, r3
 800335c:	898b      	ldrh	r3, [r1, #12]
 800335e:	4605      	mov	r5, r0
 8003360:	05db      	lsls	r3, r3, #23
 8003362:	460c      	mov	r4, r1
 8003364:	4616      	mov	r6, r2
 8003366:	d505      	bpl.n	8003374 <__swrite+0x1e>
 8003368:	2302      	movs	r3, #2
 800336a:	2200      	movs	r2, #0
 800336c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003370:	f000 f83c 	bl	80033ec <_lseek_r>
 8003374:	89a3      	ldrh	r3, [r4, #12]
 8003376:	4632      	mov	r2, r6
 8003378:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800337c:	81a3      	strh	r3, [r4, #12]
 800337e:	4628      	mov	r0, r5
 8003380:	463b      	mov	r3, r7
 8003382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800338a:	f000 b853 	b.w	8003434 <_write_r>

0800338e <__sseek>:
 800338e:	b510      	push	{r4, lr}
 8003390:	460c      	mov	r4, r1
 8003392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003396:	f000 f829 	bl	80033ec <_lseek_r>
 800339a:	1c43      	adds	r3, r0, #1
 800339c:	89a3      	ldrh	r3, [r4, #12]
 800339e:	bf15      	itete	ne
 80033a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80033a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80033a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80033aa:	81a3      	strheq	r3, [r4, #12]
 80033ac:	bf18      	it	ne
 80033ae:	81a3      	strhne	r3, [r4, #12]
 80033b0:	bd10      	pop	{r4, pc}

080033b2 <__sclose>:
 80033b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033b6:	f000 b809 	b.w	80033cc <_close_r>

080033ba <memset>:
 80033ba:	4603      	mov	r3, r0
 80033bc:	4402      	add	r2, r0
 80033be:	4293      	cmp	r3, r2
 80033c0:	d100      	bne.n	80033c4 <memset+0xa>
 80033c2:	4770      	bx	lr
 80033c4:	f803 1b01 	strb.w	r1, [r3], #1
 80033c8:	e7f9      	b.n	80033be <memset+0x4>
	...

080033cc <_close_r>:
 80033cc:	b538      	push	{r3, r4, r5, lr}
 80033ce:	2300      	movs	r3, #0
 80033d0:	4d05      	ldr	r5, [pc, #20]	; (80033e8 <_close_r+0x1c>)
 80033d2:	4604      	mov	r4, r0
 80033d4:	4608      	mov	r0, r1
 80033d6:	602b      	str	r3, [r5, #0]
 80033d8:	f7fd fd15 	bl	8000e06 <_close>
 80033dc:	1c43      	adds	r3, r0, #1
 80033de:	d102      	bne.n	80033e6 <_close_r+0x1a>
 80033e0:	682b      	ldr	r3, [r5, #0]
 80033e2:	b103      	cbz	r3, 80033e6 <_close_r+0x1a>
 80033e4:	6023      	str	r3, [r4, #0]
 80033e6:	bd38      	pop	{r3, r4, r5, pc}
 80033e8:	200002c0 	.word	0x200002c0

080033ec <_lseek_r>:
 80033ec:	b538      	push	{r3, r4, r5, lr}
 80033ee:	4604      	mov	r4, r0
 80033f0:	4608      	mov	r0, r1
 80033f2:	4611      	mov	r1, r2
 80033f4:	2200      	movs	r2, #0
 80033f6:	4d05      	ldr	r5, [pc, #20]	; (800340c <_lseek_r+0x20>)
 80033f8:	602a      	str	r2, [r5, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	f7fd fd27 	bl	8000e4e <_lseek>
 8003400:	1c43      	adds	r3, r0, #1
 8003402:	d102      	bne.n	800340a <_lseek_r+0x1e>
 8003404:	682b      	ldr	r3, [r5, #0]
 8003406:	b103      	cbz	r3, 800340a <_lseek_r+0x1e>
 8003408:	6023      	str	r3, [r4, #0]
 800340a:	bd38      	pop	{r3, r4, r5, pc}
 800340c:	200002c0 	.word	0x200002c0

08003410 <_read_r>:
 8003410:	b538      	push	{r3, r4, r5, lr}
 8003412:	4604      	mov	r4, r0
 8003414:	4608      	mov	r0, r1
 8003416:	4611      	mov	r1, r2
 8003418:	2200      	movs	r2, #0
 800341a:	4d05      	ldr	r5, [pc, #20]	; (8003430 <_read_r+0x20>)
 800341c:	602a      	str	r2, [r5, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	f7fd fcb8 	bl	8000d94 <_read>
 8003424:	1c43      	adds	r3, r0, #1
 8003426:	d102      	bne.n	800342e <_read_r+0x1e>
 8003428:	682b      	ldr	r3, [r5, #0]
 800342a:	b103      	cbz	r3, 800342e <_read_r+0x1e>
 800342c:	6023      	str	r3, [r4, #0]
 800342e:	bd38      	pop	{r3, r4, r5, pc}
 8003430:	200002c0 	.word	0x200002c0

08003434 <_write_r>:
 8003434:	b538      	push	{r3, r4, r5, lr}
 8003436:	4604      	mov	r4, r0
 8003438:	4608      	mov	r0, r1
 800343a:	4611      	mov	r1, r2
 800343c:	2200      	movs	r2, #0
 800343e:	4d05      	ldr	r5, [pc, #20]	; (8003454 <_write_r+0x20>)
 8003440:	602a      	str	r2, [r5, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	f7fd fcc3 	bl	8000dce <_write>
 8003448:	1c43      	adds	r3, r0, #1
 800344a:	d102      	bne.n	8003452 <_write_r+0x1e>
 800344c:	682b      	ldr	r3, [r5, #0]
 800344e:	b103      	cbz	r3, 8003452 <_write_r+0x1e>
 8003450:	6023      	str	r3, [r4, #0]
 8003452:	bd38      	pop	{r3, r4, r5, pc}
 8003454:	200002c0 	.word	0x200002c0

08003458 <__errno>:
 8003458:	4b01      	ldr	r3, [pc, #4]	; (8003460 <__errno+0x8>)
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20000064 	.word	0x20000064

08003464 <__libc_init_array>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	2600      	movs	r6, #0
 8003468:	4d0c      	ldr	r5, [pc, #48]	; (800349c <__libc_init_array+0x38>)
 800346a:	4c0d      	ldr	r4, [pc, #52]	; (80034a0 <__libc_init_array+0x3c>)
 800346c:	1b64      	subs	r4, r4, r5
 800346e:	10a4      	asrs	r4, r4, #2
 8003470:	42a6      	cmp	r6, r4
 8003472:	d109      	bne.n	8003488 <__libc_init_array+0x24>
 8003474:	f000 fdc8 	bl	8004008 <_init>
 8003478:	2600      	movs	r6, #0
 800347a:	4d0a      	ldr	r5, [pc, #40]	; (80034a4 <__libc_init_array+0x40>)
 800347c:	4c0a      	ldr	r4, [pc, #40]	; (80034a8 <__libc_init_array+0x44>)
 800347e:	1b64      	subs	r4, r4, r5
 8003480:	10a4      	asrs	r4, r4, #2
 8003482:	42a6      	cmp	r6, r4
 8003484:	d105      	bne.n	8003492 <__libc_init_array+0x2e>
 8003486:	bd70      	pop	{r4, r5, r6, pc}
 8003488:	f855 3b04 	ldr.w	r3, [r5], #4
 800348c:	4798      	blx	r3
 800348e:	3601      	adds	r6, #1
 8003490:	e7ee      	b.n	8003470 <__libc_init_array+0xc>
 8003492:	f855 3b04 	ldr.w	r3, [r5], #4
 8003496:	4798      	blx	r3
 8003498:	3601      	adds	r6, #1
 800349a:	e7f2      	b.n	8003482 <__libc_init_array+0x1e>
 800349c:	0800409c 	.word	0x0800409c
 80034a0:	0800409c 	.word	0x0800409c
 80034a4:	0800409c 	.word	0x0800409c
 80034a8:	080040a4 	.word	0x080040a4

080034ac <__retarget_lock_acquire_recursive>:
 80034ac:	4770      	bx	lr

080034ae <__retarget_lock_release_recursive>:
 80034ae:	4770      	bx	lr

080034b0 <_free_r>:
 80034b0:	b538      	push	{r3, r4, r5, lr}
 80034b2:	4605      	mov	r5, r0
 80034b4:	2900      	cmp	r1, #0
 80034b6:	d040      	beq.n	800353a <_free_r+0x8a>
 80034b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034bc:	1f0c      	subs	r4, r1, #4
 80034be:	2b00      	cmp	r3, #0
 80034c0:	bfb8      	it	lt
 80034c2:	18e4      	addlt	r4, r4, r3
 80034c4:	f000 f8dc 	bl	8003680 <__malloc_lock>
 80034c8:	4a1c      	ldr	r2, [pc, #112]	; (800353c <_free_r+0x8c>)
 80034ca:	6813      	ldr	r3, [r2, #0]
 80034cc:	b933      	cbnz	r3, 80034dc <_free_r+0x2c>
 80034ce:	6063      	str	r3, [r4, #4]
 80034d0:	6014      	str	r4, [r2, #0]
 80034d2:	4628      	mov	r0, r5
 80034d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034d8:	f000 b8d8 	b.w	800368c <__malloc_unlock>
 80034dc:	42a3      	cmp	r3, r4
 80034de:	d908      	bls.n	80034f2 <_free_r+0x42>
 80034e0:	6820      	ldr	r0, [r4, #0]
 80034e2:	1821      	adds	r1, r4, r0
 80034e4:	428b      	cmp	r3, r1
 80034e6:	bf01      	itttt	eq
 80034e8:	6819      	ldreq	r1, [r3, #0]
 80034ea:	685b      	ldreq	r3, [r3, #4]
 80034ec:	1809      	addeq	r1, r1, r0
 80034ee:	6021      	streq	r1, [r4, #0]
 80034f0:	e7ed      	b.n	80034ce <_free_r+0x1e>
 80034f2:	461a      	mov	r2, r3
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	b10b      	cbz	r3, 80034fc <_free_r+0x4c>
 80034f8:	42a3      	cmp	r3, r4
 80034fa:	d9fa      	bls.n	80034f2 <_free_r+0x42>
 80034fc:	6811      	ldr	r1, [r2, #0]
 80034fe:	1850      	adds	r0, r2, r1
 8003500:	42a0      	cmp	r0, r4
 8003502:	d10b      	bne.n	800351c <_free_r+0x6c>
 8003504:	6820      	ldr	r0, [r4, #0]
 8003506:	4401      	add	r1, r0
 8003508:	1850      	adds	r0, r2, r1
 800350a:	4283      	cmp	r3, r0
 800350c:	6011      	str	r1, [r2, #0]
 800350e:	d1e0      	bne.n	80034d2 <_free_r+0x22>
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	4408      	add	r0, r1
 8003516:	6010      	str	r0, [r2, #0]
 8003518:	6053      	str	r3, [r2, #4]
 800351a:	e7da      	b.n	80034d2 <_free_r+0x22>
 800351c:	d902      	bls.n	8003524 <_free_r+0x74>
 800351e:	230c      	movs	r3, #12
 8003520:	602b      	str	r3, [r5, #0]
 8003522:	e7d6      	b.n	80034d2 <_free_r+0x22>
 8003524:	6820      	ldr	r0, [r4, #0]
 8003526:	1821      	adds	r1, r4, r0
 8003528:	428b      	cmp	r3, r1
 800352a:	bf01      	itttt	eq
 800352c:	6819      	ldreq	r1, [r3, #0]
 800352e:	685b      	ldreq	r3, [r3, #4]
 8003530:	1809      	addeq	r1, r1, r0
 8003532:	6021      	streq	r1, [r4, #0]
 8003534:	6063      	str	r3, [r4, #4]
 8003536:	6054      	str	r4, [r2, #4]
 8003538:	e7cb      	b.n	80034d2 <_free_r+0x22>
 800353a:	bd38      	pop	{r3, r4, r5, pc}
 800353c:	200002c8 	.word	0x200002c8

08003540 <sbrk_aligned>:
 8003540:	b570      	push	{r4, r5, r6, lr}
 8003542:	4e0e      	ldr	r6, [pc, #56]	; (800357c <sbrk_aligned+0x3c>)
 8003544:	460c      	mov	r4, r1
 8003546:	6831      	ldr	r1, [r6, #0]
 8003548:	4605      	mov	r5, r0
 800354a:	b911      	cbnz	r1, 8003552 <sbrk_aligned+0x12>
 800354c:	f000 fcba 	bl	8003ec4 <_sbrk_r>
 8003550:	6030      	str	r0, [r6, #0]
 8003552:	4621      	mov	r1, r4
 8003554:	4628      	mov	r0, r5
 8003556:	f000 fcb5 	bl	8003ec4 <_sbrk_r>
 800355a:	1c43      	adds	r3, r0, #1
 800355c:	d00a      	beq.n	8003574 <sbrk_aligned+0x34>
 800355e:	1cc4      	adds	r4, r0, #3
 8003560:	f024 0403 	bic.w	r4, r4, #3
 8003564:	42a0      	cmp	r0, r4
 8003566:	d007      	beq.n	8003578 <sbrk_aligned+0x38>
 8003568:	1a21      	subs	r1, r4, r0
 800356a:	4628      	mov	r0, r5
 800356c:	f000 fcaa 	bl	8003ec4 <_sbrk_r>
 8003570:	3001      	adds	r0, #1
 8003572:	d101      	bne.n	8003578 <sbrk_aligned+0x38>
 8003574:	f04f 34ff 	mov.w	r4, #4294967295
 8003578:	4620      	mov	r0, r4
 800357a:	bd70      	pop	{r4, r5, r6, pc}
 800357c:	200002cc 	.word	0x200002cc

08003580 <_malloc_r>:
 8003580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003584:	1ccd      	adds	r5, r1, #3
 8003586:	f025 0503 	bic.w	r5, r5, #3
 800358a:	3508      	adds	r5, #8
 800358c:	2d0c      	cmp	r5, #12
 800358e:	bf38      	it	cc
 8003590:	250c      	movcc	r5, #12
 8003592:	2d00      	cmp	r5, #0
 8003594:	4607      	mov	r7, r0
 8003596:	db01      	blt.n	800359c <_malloc_r+0x1c>
 8003598:	42a9      	cmp	r1, r5
 800359a:	d905      	bls.n	80035a8 <_malloc_r+0x28>
 800359c:	230c      	movs	r3, #12
 800359e:	2600      	movs	r6, #0
 80035a0:	603b      	str	r3, [r7, #0]
 80035a2:	4630      	mov	r0, r6
 80035a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800367c <_malloc_r+0xfc>
 80035ac:	f000 f868 	bl	8003680 <__malloc_lock>
 80035b0:	f8d8 3000 	ldr.w	r3, [r8]
 80035b4:	461c      	mov	r4, r3
 80035b6:	bb5c      	cbnz	r4, 8003610 <_malloc_r+0x90>
 80035b8:	4629      	mov	r1, r5
 80035ba:	4638      	mov	r0, r7
 80035bc:	f7ff ffc0 	bl	8003540 <sbrk_aligned>
 80035c0:	1c43      	adds	r3, r0, #1
 80035c2:	4604      	mov	r4, r0
 80035c4:	d155      	bne.n	8003672 <_malloc_r+0xf2>
 80035c6:	f8d8 4000 	ldr.w	r4, [r8]
 80035ca:	4626      	mov	r6, r4
 80035cc:	2e00      	cmp	r6, #0
 80035ce:	d145      	bne.n	800365c <_malloc_r+0xdc>
 80035d0:	2c00      	cmp	r4, #0
 80035d2:	d048      	beq.n	8003666 <_malloc_r+0xe6>
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	4631      	mov	r1, r6
 80035d8:	4638      	mov	r0, r7
 80035da:	eb04 0903 	add.w	r9, r4, r3
 80035de:	f000 fc71 	bl	8003ec4 <_sbrk_r>
 80035e2:	4581      	cmp	r9, r0
 80035e4:	d13f      	bne.n	8003666 <_malloc_r+0xe6>
 80035e6:	6821      	ldr	r1, [r4, #0]
 80035e8:	4638      	mov	r0, r7
 80035ea:	1a6d      	subs	r5, r5, r1
 80035ec:	4629      	mov	r1, r5
 80035ee:	f7ff ffa7 	bl	8003540 <sbrk_aligned>
 80035f2:	3001      	adds	r0, #1
 80035f4:	d037      	beq.n	8003666 <_malloc_r+0xe6>
 80035f6:	6823      	ldr	r3, [r4, #0]
 80035f8:	442b      	add	r3, r5
 80035fa:	6023      	str	r3, [r4, #0]
 80035fc:	f8d8 3000 	ldr.w	r3, [r8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d038      	beq.n	8003676 <_malloc_r+0xf6>
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	42a2      	cmp	r2, r4
 8003608:	d12b      	bne.n	8003662 <_malloc_r+0xe2>
 800360a:	2200      	movs	r2, #0
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	e00f      	b.n	8003630 <_malloc_r+0xb0>
 8003610:	6822      	ldr	r2, [r4, #0]
 8003612:	1b52      	subs	r2, r2, r5
 8003614:	d41f      	bmi.n	8003656 <_malloc_r+0xd6>
 8003616:	2a0b      	cmp	r2, #11
 8003618:	d917      	bls.n	800364a <_malloc_r+0xca>
 800361a:	1961      	adds	r1, r4, r5
 800361c:	42a3      	cmp	r3, r4
 800361e:	6025      	str	r5, [r4, #0]
 8003620:	bf18      	it	ne
 8003622:	6059      	strne	r1, [r3, #4]
 8003624:	6863      	ldr	r3, [r4, #4]
 8003626:	bf08      	it	eq
 8003628:	f8c8 1000 	streq.w	r1, [r8]
 800362c:	5162      	str	r2, [r4, r5]
 800362e:	604b      	str	r3, [r1, #4]
 8003630:	4638      	mov	r0, r7
 8003632:	f104 060b 	add.w	r6, r4, #11
 8003636:	f000 f829 	bl	800368c <__malloc_unlock>
 800363a:	f026 0607 	bic.w	r6, r6, #7
 800363e:	1d23      	adds	r3, r4, #4
 8003640:	1af2      	subs	r2, r6, r3
 8003642:	d0ae      	beq.n	80035a2 <_malloc_r+0x22>
 8003644:	1b9b      	subs	r3, r3, r6
 8003646:	50a3      	str	r3, [r4, r2]
 8003648:	e7ab      	b.n	80035a2 <_malloc_r+0x22>
 800364a:	42a3      	cmp	r3, r4
 800364c:	6862      	ldr	r2, [r4, #4]
 800364e:	d1dd      	bne.n	800360c <_malloc_r+0x8c>
 8003650:	f8c8 2000 	str.w	r2, [r8]
 8003654:	e7ec      	b.n	8003630 <_malloc_r+0xb0>
 8003656:	4623      	mov	r3, r4
 8003658:	6864      	ldr	r4, [r4, #4]
 800365a:	e7ac      	b.n	80035b6 <_malloc_r+0x36>
 800365c:	4634      	mov	r4, r6
 800365e:	6876      	ldr	r6, [r6, #4]
 8003660:	e7b4      	b.n	80035cc <_malloc_r+0x4c>
 8003662:	4613      	mov	r3, r2
 8003664:	e7cc      	b.n	8003600 <_malloc_r+0x80>
 8003666:	230c      	movs	r3, #12
 8003668:	4638      	mov	r0, r7
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	f000 f80e 	bl	800368c <__malloc_unlock>
 8003670:	e797      	b.n	80035a2 <_malloc_r+0x22>
 8003672:	6025      	str	r5, [r4, #0]
 8003674:	e7dc      	b.n	8003630 <_malloc_r+0xb0>
 8003676:	605b      	str	r3, [r3, #4]
 8003678:	deff      	udf	#255	; 0xff
 800367a:	bf00      	nop
 800367c:	200002c8 	.word	0x200002c8

08003680 <__malloc_lock>:
 8003680:	4801      	ldr	r0, [pc, #4]	; (8003688 <__malloc_lock+0x8>)
 8003682:	f7ff bf13 	b.w	80034ac <__retarget_lock_acquire_recursive>
 8003686:	bf00      	nop
 8003688:	200002c4 	.word	0x200002c4

0800368c <__malloc_unlock>:
 800368c:	4801      	ldr	r0, [pc, #4]	; (8003694 <__malloc_unlock+0x8>)
 800368e:	f7ff bf0e 	b.w	80034ae <__retarget_lock_release_recursive>
 8003692:	bf00      	nop
 8003694:	200002c4 	.word	0x200002c4

08003698 <__sfputc_r>:
 8003698:	6893      	ldr	r3, [r2, #8]
 800369a:	b410      	push	{r4}
 800369c:	3b01      	subs	r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	6093      	str	r3, [r2, #8]
 80036a2:	da07      	bge.n	80036b4 <__sfputc_r+0x1c>
 80036a4:	6994      	ldr	r4, [r2, #24]
 80036a6:	42a3      	cmp	r3, r4
 80036a8:	db01      	blt.n	80036ae <__sfputc_r+0x16>
 80036aa:	290a      	cmp	r1, #10
 80036ac:	d102      	bne.n	80036b4 <__sfputc_r+0x1c>
 80036ae:	bc10      	pop	{r4}
 80036b0:	f000 bb72 	b.w	8003d98 <__swbuf_r>
 80036b4:	6813      	ldr	r3, [r2, #0]
 80036b6:	1c58      	adds	r0, r3, #1
 80036b8:	6010      	str	r0, [r2, #0]
 80036ba:	7019      	strb	r1, [r3, #0]
 80036bc:	4608      	mov	r0, r1
 80036be:	bc10      	pop	{r4}
 80036c0:	4770      	bx	lr

080036c2 <__sfputs_r>:
 80036c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c4:	4606      	mov	r6, r0
 80036c6:	460f      	mov	r7, r1
 80036c8:	4614      	mov	r4, r2
 80036ca:	18d5      	adds	r5, r2, r3
 80036cc:	42ac      	cmp	r4, r5
 80036ce:	d101      	bne.n	80036d4 <__sfputs_r+0x12>
 80036d0:	2000      	movs	r0, #0
 80036d2:	e007      	b.n	80036e4 <__sfputs_r+0x22>
 80036d4:	463a      	mov	r2, r7
 80036d6:	4630      	mov	r0, r6
 80036d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036dc:	f7ff ffdc 	bl	8003698 <__sfputc_r>
 80036e0:	1c43      	adds	r3, r0, #1
 80036e2:	d1f3      	bne.n	80036cc <__sfputs_r+0xa>
 80036e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080036e8 <_vfiprintf_r>:
 80036e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ec:	460d      	mov	r5, r1
 80036ee:	4614      	mov	r4, r2
 80036f0:	4698      	mov	r8, r3
 80036f2:	4606      	mov	r6, r0
 80036f4:	b09d      	sub	sp, #116	; 0x74
 80036f6:	b118      	cbz	r0, 8003700 <_vfiprintf_r+0x18>
 80036f8:	6a03      	ldr	r3, [r0, #32]
 80036fa:	b90b      	cbnz	r3, 8003700 <_vfiprintf_r+0x18>
 80036fc:	f7ff fdd2 	bl	80032a4 <__sinit>
 8003700:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003702:	07d9      	lsls	r1, r3, #31
 8003704:	d405      	bmi.n	8003712 <_vfiprintf_r+0x2a>
 8003706:	89ab      	ldrh	r3, [r5, #12]
 8003708:	059a      	lsls	r2, r3, #22
 800370a:	d402      	bmi.n	8003712 <_vfiprintf_r+0x2a>
 800370c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800370e:	f7ff fecd 	bl	80034ac <__retarget_lock_acquire_recursive>
 8003712:	89ab      	ldrh	r3, [r5, #12]
 8003714:	071b      	lsls	r3, r3, #28
 8003716:	d501      	bpl.n	800371c <_vfiprintf_r+0x34>
 8003718:	692b      	ldr	r3, [r5, #16]
 800371a:	b99b      	cbnz	r3, 8003744 <_vfiprintf_r+0x5c>
 800371c:	4629      	mov	r1, r5
 800371e:	4630      	mov	r0, r6
 8003720:	f000 fb78 	bl	8003e14 <__swsetup_r>
 8003724:	b170      	cbz	r0, 8003744 <_vfiprintf_r+0x5c>
 8003726:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003728:	07dc      	lsls	r4, r3, #31
 800372a:	d504      	bpl.n	8003736 <_vfiprintf_r+0x4e>
 800372c:	f04f 30ff 	mov.w	r0, #4294967295
 8003730:	b01d      	add	sp, #116	; 0x74
 8003732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003736:	89ab      	ldrh	r3, [r5, #12]
 8003738:	0598      	lsls	r0, r3, #22
 800373a:	d4f7      	bmi.n	800372c <_vfiprintf_r+0x44>
 800373c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800373e:	f7ff feb6 	bl	80034ae <__retarget_lock_release_recursive>
 8003742:	e7f3      	b.n	800372c <_vfiprintf_r+0x44>
 8003744:	2300      	movs	r3, #0
 8003746:	9309      	str	r3, [sp, #36]	; 0x24
 8003748:	2320      	movs	r3, #32
 800374a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800374e:	2330      	movs	r3, #48	; 0x30
 8003750:	f04f 0901 	mov.w	r9, #1
 8003754:	f8cd 800c 	str.w	r8, [sp, #12]
 8003758:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003908 <_vfiprintf_r+0x220>
 800375c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003760:	4623      	mov	r3, r4
 8003762:	469a      	mov	sl, r3
 8003764:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003768:	b10a      	cbz	r2, 800376e <_vfiprintf_r+0x86>
 800376a:	2a25      	cmp	r2, #37	; 0x25
 800376c:	d1f9      	bne.n	8003762 <_vfiprintf_r+0x7a>
 800376e:	ebba 0b04 	subs.w	fp, sl, r4
 8003772:	d00b      	beq.n	800378c <_vfiprintf_r+0xa4>
 8003774:	465b      	mov	r3, fp
 8003776:	4622      	mov	r2, r4
 8003778:	4629      	mov	r1, r5
 800377a:	4630      	mov	r0, r6
 800377c:	f7ff ffa1 	bl	80036c2 <__sfputs_r>
 8003780:	3001      	adds	r0, #1
 8003782:	f000 80a9 	beq.w	80038d8 <_vfiprintf_r+0x1f0>
 8003786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003788:	445a      	add	r2, fp
 800378a:	9209      	str	r2, [sp, #36]	; 0x24
 800378c:	f89a 3000 	ldrb.w	r3, [sl]
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 80a1 	beq.w	80038d8 <_vfiprintf_r+0x1f0>
 8003796:	2300      	movs	r3, #0
 8003798:	f04f 32ff 	mov.w	r2, #4294967295
 800379c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037a0:	f10a 0a01 	add.w	sl, sl, #1
 80037a4:	9304      	str	r3, [sp, #16]
 80037a6:	9307      	str	r3, [sp, #28]
 80037a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037ac:	931a      	str	r3, [sp, #104]	; 0x68
 80037ae:	4654      	mov	r4, sl
 80037b0:	2205      	movs	r2, #5
 80037b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037b6:	4854      	ldr	r0, [pc, #336]	; (8003908 <_vfiprintf_r+0x220>)
 80037b8:	f000 fb94 	bl	8003ee4 <memchr>
 80037bc:	9a04      	ldr	r2, [sp, #16]
 80037be:	b9d8      	cbnz	r0, 80037f8 <_vfiprintf_r+0x110>
 80037c0:	06d1      	lsls	r1, r2, #27
 80037c2:	bf44      	itt	mi
 80037c4:	2320      	movmi	r3, #32
 80037c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037ca:	0713      	lsls	r3, r2, #28
 80037cc:	bf44      	itt	mi
 80037ce:	232b      	movmi	r3, #43	; 0x2b
 80037d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037d4:	f89a 3000 	ldrb.w	r3, [sl]
 80037d8:	2b2a      	cmp	r3, #42	; 0x2a
 80037da:	d015      	beq.n	8003808 <_vfiprintf_r+0x120>
 80037dc:	4654      	mov	r4, sl
 80037de:	2000      	movs	r0, #0
 80037e0:	f04f 0c0a 	mov.w	ip, #10
 80037e4:	9a07      	ldr	r2, [sp, #28]
 80037e6:	4621      	mov	r1, r4
 80037e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037ec:	3b30      	subs	r3, #48	; 0x30
 80037ee:	2b09      	cmp	r3, #9
 80037f0:	d94d      	bls.n	800388e <_vfiprintf_r+0x1a6>
 80037f2:	b1b0      	cbz	r0, 8003822 <_vfiprintf_r+0x13a>
 80037f4:	9207      	str	r2, [sp, #28]
 80037f6:	e014      	b.n	8003822 <_vfiprintf_r+0x13a>
 80037f8:	eba0 0308 	sub.w	r3, r0, r8
 80037fc:	fa09 f303 	lsl.w	r3, r9, r3
 8003800:	4313      	orrs	r3, r2
 8003802:	46a2      	mov	sl, r4
 8003804:	9304      	str	r3, [sp, #16]
 8003806:	e7d2      	b.n	80037ae <_vfiprintf_r+0xc6>
 8003808:	9b03      	ldr	r3, [sp, #12]
 800380a:	1d19      	adds	r1, r3, #4
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	9103      	str	r1, [sp, #12]
 8003810:	2b00      	cmp	r3, #0
 8003812:	bfbb      	ittet	lt
 8003814:	425b      	neglt	r3, r3
 8003816:	f042 0202 	orrlt.w	r2, r2, #2
 800381a:	9307      	strge	r3, [sp, #28]
 800381c:	9307      	strlt	r3, [sp, #28]
 800381e:	bfb8      	it	lt
 8003820:	9204      	strlt	r2, [sp, #16]
 8003822:	7823      	ldrb	r3, [r4, #0]
 8003824:	2b2e      	cmp	r3, #46	; 0x2e
 8003826:	d10c      	bne.n	8003842 <_vfiprintf_r+0x15a>
 8003828:	7863      	ldrb	r3, [r4, #1]
 800382a:	2b2a      	cmp	r3, #42	; 0x2a
 800382c:	d134      	bne.n	8003898 <_vfiprintf_r+0x1b0>
 800382e:	9b03      	ldr	r3, [sp, #12]
 8003830:	3402      	adds	r4, #2
 8003832:	1d1a      	adds	r2, r3, #4
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	9203      	str	r2, [sp, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	bfb8      	it	lt
 800383c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003840:	9305      	str	r3, [sp, #20]
 8003842:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800390c <_vfiprintf_r+0x224>
 8003846:	2203      	movs	r2, #3
 8003848:	4650      	mov	r0, sl
 800384a:	7821      	ldrb	r1, [r4, #0]
 800384c:	f000 fb4a 	bl	8003ee4 <memchr>
 8003850:	b138      	cbz	r0, 8003862 <_vfiprintf_r+0x17a>
 8003852:	2240      	movs	r2, #64	; 0x40
 8003854:	9b04      	ldr	r3, [sp, #16]
 8003856:	eba0 000a 	sub.w	r0, r0, sl
 800385a:	4082      	lsls	r2, r0
 800385c:	4313      	orrs	r3, r2
 800385e:	3401      	adds	r4, #1
 8003860:	9304      	str	r3, [sp, #16]
 8003862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003866:	2206      	movs	r2, #6
 8003868:	4829      	ldr	r0, [pc, #164]	; (8003910 <_vfiprintf_r+0x228>)
 800386a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800386e:	f000 fb39 	bl	8003ee4 <memchr>
 8003872:	2800      	cmp	r0, #0
 8003874:	d03f      	beq.n	80038f6 <_vfiprintf_r+0x20e>
 8003876:	4b27      	ldr	r3, [pc, #156]	; (8003914 <_vfiprintf_r+0x22c>)
 8003878:	bb1b      	cbnz	r3, 80038c2 <_vfiprintf_r+0x1da>
 800387a:	9b03      	ldr	r3, [sp, #12]
 800387c:	3307      	adds	r3, #7
 800387e:	f023 0307 	bic.w	r3, r3, #7
 8003882:	3308      	adds	r3, #8
 8003884:	9303      	str	r3, [sp, #12]
 8003886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003888:	443b      	add	r3, r7
 800388a:	9309      	str	r3, [sp, #36]	; 0x24
 800388c:	e768      	b.n	8003760 <_vfiprintf_r+0x78>
 800388e:	460c      	mov	r4, r1
 8003890:	2001      	movs	r0, #1
 8003892:	fb0c 3202 	mla	r2, ip, r2, r3
 8003896:	e7a6      	b.n	80037e6 <_vfiprintf_r+0xfe>
 8003898:	2300      	movs	r3, #0
 800389a:	f04f 0c0a 	mov.w	ip, #10
 800389e:	4619      	mov	r1, r3
 80038a0:	3401      	adds	r4, #1
 80038a2:	9305      	str	r3, [sp, #20]
 80038a4:	4620      	mov	r0, r4
 80038a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038aa:	3a30      	subs	r2, #48	; 0x30
 80038ac:	2a09      	cmp	r2, #9
 80038ae:	d903      	bls.n	80038b8 <_vfiprintf_r+0x1d0>
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0c6      	beq.n	8003842 <_vfiprintf_r+0x15a>
 80038b4:	9105      	str	r1, [sp, #20]
 80038b6:	e7c4      	b.n	8003842 <_vfiprintf_r+0x15a>
 80038b8:	4604      	mov	r4, r0
 80038ba:	2301      	movs	r3, #1
 80038bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80038c0:	e7f0      	b.n	80038a4 <_vfiprintf_r+0x1bc>
 80038c2:	ab03      	add	r3, sp, #12
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	462a      	mov	r2, r5
 80038c8:	4630      	mov	r0, r6
 80038ca:	4b13      	ldr	r3, [pc, #76]	; (8003918 <_vfiprintf_r+0x230>)
 80038cc:	a904      	add	r1, sp, #16
 80038ce:	f3af 8000 	nop.w
 80038d2:	4607      	mov	r7, r0
 80038d4:	1c78      	adds	r0, r7, #1
 80038d6:	d1d6      	bne.n	8003886 <_vfiprintf_r+0x19e>
 80038d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038da:	07d9      	lsls	r1, r3, #31
 80038dc:	d405      	bmi.n	80038ea <_vfiprintf_r+0x202>
 80038de:	89ab      	ldrh	r3, [r5, #12]
 80038e0:	059a      	lsls	r2, r3, #22
 80038e2:	d402      	bmi.n	80038ea <_vfiprintf_r+0x202>
 80038e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038e6:	f7ff fde2 	bl	80034ae <__retarget_lock_release_recursive>
 80038ea:	89ab      	ldrh	r3, [r5, #12]
 80038ec:	065b      	lsls	r3, r3, #25
 80038ee:	f53f af1d 	bmi.w	800372c <_vfiprintf_r+0x44>
 80038f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038f4:	e71c      	b.n	8003730 <_vfiprintf_r+0x48>
 80038f6:	ab03      	add	r3, sp, #12
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	462a      	mov	r2, r5
 80038fc:	4630      	mov	r0, r6
 80038fe:	4b06      	ldr	r3, [pc, #24]	; (8003918 <_vfiprintf_r+0x230>)
 8003900:	a904      	add	r1, sp, #16
 8003902:	f000 f87d 	bl	8003a00 <_printf_i>
 8003906:	e7e4      	b.n	80038d2 <_vfiprintf_r+0x1ea>
 8003908:	08004060 	.word	0x08004060
 800390c:	08004066 	.word	0x08004066
 8003910:	0800406a 	.word	0x0800406a
 8003914:	00000000 	.word	0x00000000
 8003918:	080036c3 	.word	0x080036c3

0800391c <_printf_common>:
 800391c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003920:	4616      	mov	r6, r2
 8003922:	4699      	mov	r9, r3
 8003924:	688a      	ldr	r2, [r1, #8]
 8003926:	690b      	ldr	r3, [r1, #16]
 8003928:	4607      	mov	r7, r0
 800392a:	4293      	cmp	r3, r2
 800392c:	bfb8      	it	lt
 800392e:	4613      	movlt	r3, r2
 8003930:	6033      	str	r3, [r6, #0]
 8003932:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003936:	460c      	mov	r4, r1
 8003938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800393c:	b10a      	cbz	r2, 8003942 <_printf_common+0x26>
 800393e:	3301      	adds	r3, #1
 8003940:	6033      	str	r3, [r6, #0]
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	0699      	lsls	r1, r3, #26
 8003946:	bf42      	ittt	mi
 8003948:	6833      	ldrmi	r3, [r6, #0]
 800394a:	3302      	addmi	r3, #2
 800394c:	6033      	strmi	r3, [r6, #0]
 800394e:	6825      	ldr	r5, [r4, #0]
 8003950:	f015 0506 	ands.w	r5, r5, #6
 8003954:	d106      	bne.n	8003964 <_printf_common+0x48>
 8003956:	f104 0a19 	add.w	sl, r4, #25
 800395a:	68e3      	ldr	r3, [r4, #12]
 800395c:	6832      	ldr	r2, [r6, #0]
 800395e:	1a9b      	subs	r3, r3, r2
 8003960:	42ab      	cmp	r3, r5
 8003962:	dc2b      	bgt.n	80039bc <_printf_common+0xa0>
 8003964:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003968:	1e13      	subs	r3, r2, #0
 800396a:	6822      	ldr	r2, [r4, #0]
 800396c:	bf18      	it	ne
 800396e:	2301      	movne	r3, #1
 8003970:	0692      	lsls	r2, r2, #26
 8003972:	d430      	bmi.n	80039d6 <_printf_common+0xba>
 8003974:	4649      	mov	r1, r9
 8003976:	4638      	mov	r0, r7
 8003978:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800397c:	47c0      	blx	r8
 800397e:	3001      	adds	r0, #1
 8003980:	d023      	beq.n	80039ca <_printf_common+0xae>
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	6922      	ldr	r2, [r4, #16]
 8003986:	f003 0306 	and.w	r3, r3, #6
 800398a:	2b04      	cmp	r3, #4
 800398c:	bf14      	ite	ne
 800398e:	2500      	movne	r5, #0
 8003990:	6833      	ldreq	r3, [r6, #0]
 8003992:	f04f 0600 	mov.w	r6, #0
 8003996:	bf08      	it	eq
 8003998:	68e5      	ldreq	r5, [r4, #12]
 800399a:	f104 041a 	add.w	r4, r4, #26
 800399e:	bf08      	it	eq
 80039a0:	1aed      	subeq	r5, r5, r3
 80039a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80039a6:	bf08      	it	eq
 80039a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039ac:	4293      	cmp	r3, r2
 80039ae:	bfc4      	itt	gt
 80039b0:	1a9b      	subgt	r3, r3, r2
 80039b2:	18ed      	addgt	r5, r5, r3
 80039b4:	42b5      	cmp	r5, r6
 80039b6:	d11a      	bne.n	80039ee <_printf_common+0xd2>
 80039b8:	2000      	movs	r0, #0
 80039ba:	e008      	b.n	80039ce <_printf_common+0xb2>
 80039bc:	2301      	movs	r3, #1
 80039be:	4652      	mov	r2, sl
 80039c0:	4649      	mov	r1, r9
 80039c2:	4638      	mov	r0, r7
 80039c4:	47c0      	blx	r8
 80039c6:	3001      	adds	r0, #1
 80039c8:	d103      	bne.n	80039d2 <_printf_common+0xb6>
 80039ca:	f04f 30ff 	mov.w	r0, #4294967295
 80039ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039d2:	3501      	adds	r5, #1
 80039d4:	e7c1      	b.n	800395a <_printf_common+0x3e>
 80039d6:	2030      	movs	r0, #48	; 0x30
 80039d8:	18e1      	adds	r1, r4, r3
 80039da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039e4:	4422      	add	r2, r4
 80039e6:	3302      	adds	r3, #2
 80039e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039ec:	e7c2      	b.n	8003974 <_printf_common+0x58>
 80039ee:	2301      	movs	r3, #1
 80039f0:	4622      	mov	r2, r4
 80039f2:	4649      	mov	r1, r9
 80039f4:	4638      	mov	r0, r7
 80039f6:	47c0      	blx	r8
 80039f8:	3001      	adds	r0, #1
 80039fa:	d0e6      	beq.n	80039ca <_printf_common+0xae>
 80039fc:	3601      	adds	r6, #1
 80039fe:	e7d9      	b.n	80039b4 <_printf_common+0x98>

08003a00 <_printf_i>:
 8003a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a04:	7e0f      	ldrb	r7, [r1, #24]
 8003a06:	4691      	mov	r9, r2
 8003a08:	2f78      	cmp	r7, #120	; 0x78
 8003a0a:	4680      	mov	r8, r0
 8003a0c:	460c      	mov	r4, r1
 8003a0e:	469a      	mov	sl, r3
 8003a10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a16:	d807      	bhi.n	8003a28 <_printf_i+0x28>
 8003a18:	2f62      	cmp	r7, #98	; 0x62
 8003a1a:	d80a      	bhi.n	8003a32 <_printf_i+0x32>
 8003a1c:	2f00      	cmp	r7, #0
 8003a1e:	f000 80d5 	beq.w	8003bcc <_printf_i+0x1cc>
 8003a22:	2f58      	cmp	r7, #88	; 0x58
 8003a24:	f000 80c1 	beq.w	8003baa <_printf_i+0x1aa>
 8003a28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a30:	e03a      	b.n	8003aa8 <_printf_i+0xa8>
 8003a32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a36:	2b15      	cmp	r3, #21
 8003a38:	d8f6      	bhi.n	8003a28 <_printf_i+0x28>
 8003a3a:	a101      	add	r1, pc, #4	; (adr r1, 8003a40 <_printf_i+0x40>)
 8003a3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a40:	08003a99 	.word	0x08003a99
 8003a44:	08003aad 	.word	0x08003aad
 8003a48:	08003a29 	.word	0x08003a29
 8003a4c:	08003a29 	.word	0x08003a29
 8003a50:	08003a29 	.word	0x08003a29
 8003a54:	08003a29 	.word	0x08003a29
 8003a58:	08003aad 	.word	0x08003aad
 8003a5c:	08003a29 	.word	0x08003a29
 8003a60:	08003a29 	.word	0x08003a29
 8003a64:	08003a29 	.word	0x08003a29
 8003a68:	08003a29 	.word	0x08003a29
 8003a6c:	08003bb3 	.word	0x08003bb3
 8003a70:	08003ad9 	.word	0x08003ad9
 8003a74:	08003b6d 	.word	0x08003b6d
 8003a78:	08003a29 	.word	0x08003a29
 8003a7c:	08003a29 	.word	0x08003a29
 8003a80:	08003bd5 	.word	0x08003bd5
 8003a84:	08003a29 	.word	0x08003a29
 8003a88:	08003ad9 	.word	0x08003ad9
 8003a8c:	08003a29 	.word	0x08003a29
 8003a90:	08003a29 	.word	0x08003a29
 8003a94:	08003b75 	.word	0x08003b75
 8003a98:	682b      	ldr	r3, [r5, #0]
 8003a9a:	1d1a      	adds	r2, r3, #4
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	602a      	str	r2, [r5, #0]
 8003aa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003aa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0a0      	b.n	8003bee <_printf_i+0x1ee>
 8003aac:	6820      	ldr	r0, [r4, #0]
 8003aae:	682b      	ldr	r3, [r5, #0]
 8003ab0:	0607      	lsls	r7, r0, #24
 8003ab2:	f103 0104 	add.w	r1, r3, #4
 8003ab6:	6029      	str	r1, [r5, #0]
 8003ab8:	d501      	bpl.n	8003abe <_printf_i+0xbe>
 8003aba:	681e      	ldr	r6, [r3, #0]
 8003abc:	e003      	b.n	8003ac6 <_printf_i+0xc6>
 8003abe:	0646      	lsls	r6, r0, #25
 8003ac0:	d5fb      	bpl.n	8003aba <_printf_i+0xba>
 8003ac2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003ac6:	2e00      	cmp	r6, #0
 8003ac8:	da03      	bge.n	8003ad2 <_printf_i+0xd2>
 8003aca:	232d      	movs	r3, #45	; 0x2d
 8003acc:	4276      	negs	r6, r6
 8003ace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ad2:	230a      	movs	r3, #10
 8003ad4:	4859      	ldr	r0, [pc, #356]	; (8003c3c <_printf_i+0x23c>)
 8003ad6:	e012      	b.n	8003afe <_printf_i+0xfe>
 8003ad8:	682b      	ldr	r3, [r5, #0]
 8003ada:	6820      	ldr	r0, [r4, #0]
 8003adc:	1d19      	adds	r1, r3, #4
 8003ade:	6029      	str	r1, [r5, #0]
 8003ae0:	0605      	lsls	r5, r0, #24
 8003ae2:	d501      	bpl.n	8003ae8 <_printf_i+0xe8>
 8003ae4:	681e      	ldr	r6, [r3, #0]
 8003ae6:	e002      	b.n	8003aee <_printf_i+0xee>
 8003ae8:	0641      	lsls	r1, r0, #25
 8003aea:	d5fb      	bpl.n	8003ae4 <_printf_i+0xe4>
 8003aec:	881e      	ldrh	r6, [r3, #0]
 8003aee:	2f6f      	cmp	r7, #111	; 0x6f
 8003af0:	bf0c      	ite	eq
 8003af2:	2308      	moveq	r3, #8
 8003af4:	230a      	movne	r3, #10
 8003af6:	4851      	ldr	r0, [pc, #324]	; (8003c3c <_printf_i+0x23c>)
 8003af8:	2100      	movs	r1, #0
 8003afa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003afe:	6865      	ldr	r5, [r4, #4]
 8003b00:	2d00      	cmp	r5, #0
 8003b02:	bfa8      	it	ge
 8003b04:	6821      	ldrge	r1, [r4, #0]
 8003b06:	60a5      	str	r5, [r4, #8]
 8003b08:	bfa4      	itt	ge
 8003b0a:	f021 0104 	bicge.w	r1, r1, #4
 8003b0e:	6021      	strge	r1, [r4, #0]
 8003b10:	b90e      	cbnz	r6, 8003b16 <_printf_i+0x116>
 8003b12:	2d00      	cmp	r5, #0
 8003b14:	d04b      	beq.n	8003bae <_printf_i+0x1ae>
 8003b16:	4615      	mov	r5, r2
 8003b18:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b1c:	fb03 6711 	mls	r7, r3, r1, r6
 8003b20:	5dc7      	ldrb	r7, [r0, r7]
 8003b22:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b26:	4637      	mov	r7, r6
 8003b28:	42bb      	cmp	r3, r7
 8003b2a:	460e      	mov	r6, r1
 8003b2c:	d9f4      	bls.n	8003b18 <_printf_i+0x118>
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	d10b      	bne.n	8003b4a <_printf_i+0x14a>
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	07de      	lsls	r6, r3, #31
 8003b36:	d508      	bpl.n	8003b4a <_printf_i+0x14a>
 8003b38:	6923      	ldr	r3, [r4, #16]
 8003b3a:	6861      	ldr	r1, [r4, #4]
 8003b3c:	4299      	cmp	r1, r3
 8003b3e:	bfde      	ittt	le
 8003b40:	2330      	movle	r3, #48	; 0x30
 8003b42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b4a:	1b52      	subs	r2, r2, r5
 8003b4c:	6122      	str	r2, [r4, #16]
 8003b4e:	464b      	mov	r3, r9
 8003b50:	4621      	mov	r1, r4
 8003b52:	4640      	mov	r0, r8
 8003b54:	f8cd a000 	str.w	sl, [sp]
 8003b58:	aa03      	add	r2, sp, #12
 8003b5a:	f7ff fedf 	bl	800391c <_printf_common>
 8003b5e:	3001      	adds	r0, #1
 8003b60:	d14a      	bne.n	8003bf8 <_printf_i+0x1f8>
 8003b62:	f04f 30ff 	mov.w	r0, #4294967295
 8003b66:	b004      	add	sp, #16
 8003b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	f043 0320 	orr.w	r3, r3, #32
 8003b72:	6023      	str	r3, [r4, #0]
 8003b74:	2778      	movs	r7, #120	; 0x78
 8003b76:	4832      	ldr	r0, [pc, #200]	; (8003c40 <_printf_i+0x240>)
 8003b78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	6829      	ldr	r1, [r5, #0]
 8003b80:	061f      	lsls	r7, r3, #24
 8003b82:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b86:	d402      	bmi.n	8003b8e <_printf_i+0x18e>
 8003b88:	065f      	lsls	r7, r3, #25
 8003b8a:	bf48      	it	mi
 8003b8c:	b2b6      	uxthmi	r6, r6
 8003b8e:	07df      	lsls	r7, r3, #31
 8003b90:	bf48      	it	mi
 8003b92:	f043 0320 	orrmi.w	r3, r3, #32
 8003b96:	6029      	str	r1, [r5, #0]
 8003b98:	bf48      	it	mi
 8003b9a:	6023      	strmi	r3, [r4, #0]
 8003b9c:	b91e      	cbnz	r6, 8003ba6 <_printf_i+0x1a6>
 8003b9e:	6823      	ldr	r3, [r4, #0]
 8003ba0:	f023 0320 	bic.w	r3, r3, #32
 8003ba4:	6023      	str	r3, [r4, #0]
 8003ba6:	2310      	movs	r3, #16
 8003ba8:	e7a6      	b.n	8003af8 <_printf_i+0xf8>
 8003baa:	4824      	ldr	r0, [pc, #144]	; (8003c3c <_printf_i+0x23c>)
 8003bac:	e7e4      	b.n	8003b78 <_printf_i+0x178>
 8003bae:	4615      	mov	r5, r2
 8003bb0:	e7bd      	b.n	8003b2e <_printf_i+0x12e>
 8003bb2:	682b      	ldr	r3, [r5, #0]
 8003bb4:	6826      	ldr	r6, [r4, #0]
 8003bb6:	1d18      	adds	r0, r3, #4
 8003bb8:	6961      	ldr	r1, [r4, #20]
 8003bba:	6028      	str	r0, [r5, #0]
 8003bbc:	0635      	lsls	r5, r6, #24
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	d501      	bpl.n	8003bc6 <_printf_i+0x1c6>
 8003bc2:	6019      	str	r1, [r3, #0]
 8003bc4:	e002      	b.n	8003bcc <_printf_i+0x1cc>
 8003bc6:	0670      	lsls	r0, r6, #25
 8003bc8:	d5fb      	bpl.n	8003bc2 <_printf_i+0x1c2>
 8003bca:	8019      	strh	r1, [r3, #0]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	4615      	mov	r5, r2
 8003bd0:	6123      	str	r3, [r4, #16]
 8003bd2:	e7bc      	b.n	8003b4e <_printf_i+0x14e>
 8003bd4:	682b      	ldr	r3, [r5, #0]
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	1d1a      	adds	r2, r3, #4
 8003bda:	602a      	str	r2, [r5, #0]
 8003bdc:	681d      	ldr	r5, [r3, #0]
 8003bde:	6862      	ldr	r2, [r4, #4]
 8003be0:	4628      	mov	r0, r5
 8003be2:	f000 f97f 	bl	8003ee4 <memchr>
 8003be6:	b108      	cbz	r0, 8003bec <_printf_i+0x1ec>
 8003be8:	1b40      	subs	r0, r0, r5
 8003bea:	6060      	str	r0, [r4, #4]
 8003bec:	6863      	ldr	r3, [r4, #4]
 8003bee:	6123      	str	r3, [r4, #16]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bf6:	e7aa      	b.n	8003b4e <_printf_i+0x14e>
 8003bf8:	462a      	mov	r2, r5
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	4640      	mov	r0, r8
 8003bfe:	6923      	ldr	r3, [r4, #16]
 8003c00:	47d0      	blx	sl
 8003c02:	3001      	adds	r0, #1
 8003c04:	d0ad      	beq.n	8003b62 <_printf_i+0x162>
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	079b      	lsls	r3, r3, #30
 8003c0a:	d413      	bmi.n	8003c34 <_printf_i+0x234>
 8003c0c:	68e0      	ldr	r0, [r4, #12]
 8003c0e:	9b03      	ldr	r3, [sp, #12]
 8003c10:	4298      	cmp	r0, r3
 8003c12:	bfb8      	it	lt
 8003c14:	4618      	movlt	r0, r3
 8003c16:	e7a6      	b.n	8003b66 <_printf_i+0x166>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	4632      	mov	r2, r6
 8003c1c:	4649      	mov	r1, r9
 8003c1e:	4640      	mov	r0, r8
 8003c20:	47d0      	blx	sl
 8003c22:	3001      	adds	r0, #1
 8003c24:	d09d      	beq.n	8003b62 <_printf_i+0x162>
 8003c26:	3501      	adds	r5, #1
 8003c28:	68e3      	ldr	r3, [r4, #12]
 8003c2a:	9903      	ldr	r1, [sp, #12]
 8003c2c:	1a5b      	subs	r3, r3, r1
 8003c2e:	42ab      	cmp	r3, r5
 8003c30:	dcf2      	bgt.n	8003c18 <_printf_i+0x218>
 8003c32:	e7eb      	b.n	8003c0c <_printf_i+0x20c>
 8003c34:	2500      	movs	r5, #0
 8003c36:	f104 0619 	add.w	r6, r4, #25
 8003c3a:	e7f5      	b.n	8003c28 <_printf_i+0x228>
 8003c3c:	08004071 	.word	0x08004071
 8003c40:	08004082 	.word	0x08004082

08003c44 <__sflush_r>:
 8003c44:	898a      	ldrh	r2, [r1, #12]
 8003c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c48:	4605      	mov	r5, r0
 8003c4a:	0710      	lsls	r0, r2, #28
 8003c4c:	460c      	mov	r4, r1
 8003c4e:	d457      	bmi.n	8003d00 <__sflush_r+0xbc>
 8003c50:	684b      	ldr	r3, [r1, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	dc04      	bgt.n	8003c60 <__sflush_r+0x1c>
 8003c56:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	dc01      	bgt.n	8003c60 <__sflush_r+0x1c>
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c62:	2e00      	cmp	r6, #0
 8003c64:	d0fa      	beq.n	8003c5c <__sflush_r+0x18>
 8003c66:	2300      	movs	r3, #0
 8003c68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c6c:	682f      	ldr	r7, [r5, #0]
 8003c6e:	6a21      	ldr	r1, [r4, #32]
 8003c70:	602b      	str	r3, [r5, #0]
 8003c72:	d032      	beq.n	8003cda <__sflush_r+0x96>
 8003c74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c76:	89a3      	ldrh	r3, [r4, #12]
 8003c78:	075a      	lsls	r2, r3, #29
 8003c7a:	d505      	bpl.n	8003c88 <__sflush_r+0x44>
 8003c7c:	6863      	ldr	r3, [r4, #4]
 8003c7e:	1ac0      	subs	r0, r0, r3
 8003c80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c82:	b10b      	cbz	r3, 8003c88 <__sflush_r+0x44>
 8003c84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c86:	1ac0      	subs	r0, r0, r3
 8003c88:	2300      	movs	r3, #0
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c8e:	4628      	mov	r0, r5
 8003c90:	6a21      	ldr	r1, [r4, #32]
 8003c92:	47b0      	blx	r6
 8003c94:	1c43      	adds	r3, r0, #1
 8003c96:	89a3      	ldrh	r3, [r4, #12]
 8003c98:	d106      	bne.n	8003ca8 <__sflush_r+0x64>
 8003c9a:	6829      	ldr	r1, [r5, #0]
 8003c9c:	291d      	cmp	r1, #29
 8003c9e:	d82b      	bhi.n	8003cf8 <__sflush_r+0xb4>
 8003ca0:	4a28      	ldr	r2, [pc, #160]	; (8003d44 <__sflush_r+0x100>)
 8003ca2:	410a      	asrs	r2, r1
 8003ca4:	07d6      	lsls	r6, r2, #31
 8003ca6:	d427      	bmi.n	8003cf8 <__sflush_r+0xb4>
 8003ca8:	2200      	movs	r2, #0
 8003caa:	6062      	str	r2, [r4, #4]
 8003cac:	6922      	ldr	r2, [r4, #16]
 8003cae:	04d9      	lsls	r1, r3, #19
 8003cb0:	6022      	str	r2, [r4, #0]
 8003cb2:	d504      	bpl.n	8003cbe <__sflush_r+0x7a>
 8003cb4:	1c42      	adds	r2, r0, #1
 8003cb6:	d101      	bne.n	8003cbc <__sflush_r+0x78>
 8003cb8:	682b      	ldr	r3, [r5, #0]
 8003cba:	b903      	cbnz	r3, 8003cbe <__sflush_r+0x7a>
 8003cbc:	6560      	str	r0, [r4, #84]	; 0x54
 8003cbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cc0:	602f      	str	r7, [r5, #0]
 8003cc2:	2900      	cmp	r1, #0
 8003cc4:	d0ca      	beq.n	8003c5c <__sflush_r+0x18>
 8003cc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cca:	4299      	cmp	r1, r3
 8003ccc:	d002      	beq.n	8003cd4 <__sflush_r+0x90>
 8003cce:	4628      	mov	r0, r5
 8003cd0:	f7ff fbee 	bl	80034b0 <_free_r>
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	6360      	str	r0, [r4, #52]	; 0x34
 8003cd8:	e7c1      	b.n	8003c5e <__sflush_r+0x1a>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	4628      	mov	r0, r5
 8003cde:	47b0      	blx	r6
 8003ce0:	1c41      	adds	r1, r0, #1
 8003ce2:	d1c8      	bne.n	8003c76 <__sflush_r+0x32>
 8003ce4:	682b      	ldr	r3, [r5, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0c5      	beq.n	8003c76 <__sflush_r+0x32>
 8003cea:	2b1d      	cmp	r3, #29
 8003cec:	d001      	beq.n	8003cf2 <__sflush_r+0xae>
 8003cee:	2b16      	cmp	r3, #22
 8003cf0:	d101      	bne.n	8003cf6 <__sflush_r+0xb2>
 8003cf2:	602f      	str	r7, [r5, #0]
 8003cf4:	e7b2      	b.n	8003c5c <__sflush_r+0x18>
 8003cf6:	89a3      	ldrh	r3, [r4, #12]
 8003cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cfc:	81a3      	strh	r3, [r4, #12]
 8003cfe:	e7ae      	b.n	8003c5e <__sflush_r+0x1a>
 8003d00:	690f      	ldr	r7, [r1, #16]
 8003d02:	2f00      	cmp	r7, #0
 8003d04:	d0aa      	beq.n	8003c5c <__sflush_r+0x18>
 8003d06:	0793      	lsls	r3, r2, #30
 8003d08:	bf18      	it	ne
 8003d0a:	2300      	movne	r3, #0
 8003d0c:	680e      	ldr	r6, [r1, #0]
 8003d0e:	bf08      	it	eq
 8003d10:	694b      	ldreq	r3, [r1, #20]
 8003d12:	1bf6      	subs	r6, r6, r7
 8003d14:	600f      	str	r7, [r1, #0]
 8003d16:	608b      	str	r3, [r1, #8]
 8003d18:	2e00      	cmp	r6, #0
 8003d1a:	dd9f      	ble.n	8003c5c <__sflush_r+0x18>
 8003d1c:	4633      	mov	r3, r6
 8003d1e:	463a      	mov	r2, r7
 8003d20:	4628      	mov	r0, r5
 8003d22:	6a21      	ldr	r1, [r4, #32]
 8003d24:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003d28:	47e0      	blx	ip
 8003d2a:	2800      	cmp	r0, #0
 8003d2c:	dc06      	bgt.n	8003d3c <__sflush_r+0xf8>
 8003d2e:	89a3      	ldrh	r3, [r4, #12]
 8003d30:	f04f 30ff 	mov.w	r0, #4294967295
 8003d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d38:	81a3      	strh	r3, [r4, #12]
 8003d3a:	e790      	b.n	8003c5e <__sflush_r+0x1a>
 8003d3c:	4407      	add	r7, r0
 8003d3e:	1a36      	subs	r6, r6, r0
 8003d40:	e7ea      	b.n	8003d18 <__sflush_r+0xd4>
 8003d42:	bf00      	nop
 8003d44:	dfbffffe 	.word	0xdfbffffe

08003d48 <_fflush_r>:
 8003d48:	b538      	push	{r3, r4, r5, lr}
 8003d4a:	690b      	ldr	r3, [r1, #16]
 8003d4c:	4605      	mov	r5, r0
 8003d4e:	460c      	mov	r4, r1
 8003d50:	b913      	cbnz	r3, 8003d58 <_fflush_r+0x10>
 8003d52:	2500      	movs	r5, #0
 8003d54:	4628      	mov	r0, r5
 8003d56:	bd38      	pop	{r3, r4, r5, pc}
 8003d58:	b118      	cbz	r0, 8003d62 <_fflush_r+0x1a>
 8003d5a:	6a03      	ldr	r3, [r0, #32]
 8003d5c:	b90b      	cbnz	r3, 8003d62 <_fflush_r+0x1a>
 8003d5e:	f7ff faa1 	bl	80032a4 <__sinit>
 8003d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0f3      	beq.n	8003d52 <_fflush_r+0xa>
 8003d6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d6c:	07d0      	lsls	r0, r2, #31
 8003d6e:	d404      	bmi.n	8003d7a <_fflush_r+0x32>
 8003d70:	0599      	lsls	r1, r3, #22
 8003d72:	d402      	bmi.n	8003d7a <_fflush_r+0x32>
 8003d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d76:	f7ff fb99 	bl	80034ac <__retarget_lock_acquire_recursive>
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	f7ff ff61 	bl	8003c44 <__sflush_r>
 8003d82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d84:	4605      	mov	r5, r0
 8003d86:	07da      	lsls	r2, r3, #31
 8003d88:	d4e4      	bmi.n	8003d54 <_fflush_r+0xc>
 8003d8a:	89a3      	ldrh	r3, [r4, #12]
 8003d8c:	059b      	lsls	r3, r3, #22
 8003d8e:	d4e1      	bmi.n	8003d54 <_fflush_r+0xc>
 8003d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d92:	f7ff fb8c 	bl	80034ae <__retarget_lock_release_recursive>
 8003d96:	e7dd      	b.n	8003d54 <_fflush_r+0xc>

08003d98 <__swbuf_r>:
 8003d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9a:	460e      	mov	r6, r1
 8003d9c:	4614      	mov	r4, r2
 8003d9e:	4605      	mov	r5, r0
 8003da0:	b118      	cbz	r0, 8003daa <__swbuf_r+0x12>
 8003da2:	6a03      	ldr	r3, [r0, #32]
 8003da4:	b90b      	cbnz	r3, 8003daa <__swbuf_r+0x12>
 8003da6:	f7ff fa7d 	bl	80032a4 <__sinit>
 8003daa:	69a3      	ldr	r3, [r4, #24]
 8003dac:	60a3      	str	r3, [r4, #8]
 8003dae:	89a3      	ldrh	r3, [r4, #12]
 8003db0:	071a      	lsls	r2, r3, #28
 8003db2:	d525      	bpl.n	8003e00 <__swbuf_r+0x68>
 8003db4:	6923      	ldr	r3, [r4, #16]
 8003db6:	b31b      	cbz	r3, 8003e00 <__swbuf_r+0x68>
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	6922      	ldr	r2, [r4, #16]
 8003dbc:	b2f6      	uxtb	r6, r6
 8003dbe:	1a98      	subs	r0, r3, r2
 8003dc0:	6963      	ldr	r3, [r4, #20]
 8003dc2:	4637      	mov	r7, r6
 8003dc4:	4283      	cmp	r3, r0
 8003dc6:	dc04      	bgt.n	8003dd2 <__swbuf_r+0x3a>
 8003dc8:	4621      	mov	r1, r4
 8003dca:	4628      	mov	r0, r5
 8003dcc:	f7ff ffbc 	bl	8003d48 <_fflush_r>
 8003dd0:	b9e0      	cbnz	r0, 8003e0c <__swbuf_r+0x74>
 8003dd2:	68a3      	ldr	r3, [r4, #8]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	60a3      	str	r3, [r4, #8]
 8003dd8:	6823      	ldr	r3, [r4, #0]
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	6022      	str	r2, [r4, #0]
 8003dde:	701e      	strb	r6, [r3, #0]
 8003de0:	6962      	ldr	r2, [r4, #20]
 8003de2:	1c43      	adds	r3, r0, #1
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d004      	beq.n	8003df2 <__swbuf_r+0x5a>
 8003de8:	89a3      	ldrh	r3, [r4, #12]
 8003dea:	07db      	lsls	r3, r3, #31
 8003dec:	d506      	bpl.n	8003dfc <__swbuf_r+0x64>
 8003dee:	2e0a      	cmp	r6, #10
 8003df0:	d104      	bne.n	8003dfc <__swbuf_r+0x64>
 8003df2:	4621      	mov	r1, r4
 8003df4:	4628      	mov	r0, r5
 8003df6:	f7ff ffa7 	bl	8003d48 <_fflush_r>
 8003dfa:	b938      	cbnz	r0, 8003e0c <__swbuf_r+0x74>
 8003dfc:	4638      	mov	r0, r7
 8003dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e00:	4621      	mov	r1, r4
 8003e02:	4628      	mov	r0, r5
 8003e04:	f000 f806 	bl	8003e14 <__swsetup_r>
 8003e08:	2800      	cmp	r0, #0
 8003e0a:	d0d5      	beq.n	8003db8 <__swbuf_r+0x20>
 8003e0c:	f04f 37ff 	mov.w	r7, #4294967295
 8003e10:	e7f4      	b.n	8003dfc <__swbuf_r+0x64>
	...

08003e14 <__swsetup_r>:
 8003e14:	b538      	push	{r3, r4, r5, lr}
 8003e16:	4b2a      	ldr	r3, [pc, #168]	; (8003ec0 <__swsetup_r+0xac>)
 8003e18:	4605      	mov	r5, r0
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	460c      	mov	r4, r1
 8003e1e:	b118      	cbz	r0, 8003e28 <__swsetup_r+0x14>
 8003e20:	6a03      	ldr	r3, [r0, #32]
 8003e22:	b90b      	cbnz	r3, 8003e28 <__swsetup_r+0x14>
 8003e24:	f7ff fa3e 	bl	80032a4 <__sinit>
 8003e28:	89a3      	ldrh	r3, [r4, #12]
 8003e2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e2e:	0718      	lsls	r0, r3, #28
 8003e30:	d422      	bmi.n	8003e78 <__swsetup_r+0x64>
 8003e32:	06d9      	lsls	r1, r3, #27
 8003e34:	d407      	bmi.n	8003e46 <__swsetup_r+0x32>
 8003e36:	2309      	movs	r3, #9
 8003e38:	602b      	str	r3, [r5, #0]
 8003e3a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e42:	81a3      	strh	r3, [r4, #12]
 8003e44:	e034      	b.n	8003eb0 <__swsetup_r+0x9c>
 8003e46:	0758      	lsls	r0, r3, #29
 8003e48:	d512      	bpl.n	8003e70 <__swsetup_r+0x5c>
 8003e4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e4c:	b141      	cbz	r1, 8003e60 <__swsetup_r+0x4c>
 8003e4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e52:	4299      	cmp	r1, r3
 8003e54:	d002      	beq.n	8003e5c <__swsetup_r+0x48>
 8003e56:	4628      	mov	r0, r5
 8003e58:	f7ff fb2a 	bl	80034b0 <_free_r>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	6363      	str	r3, [r4, #52]	; 0x34
 8003e60:	89a3      	ldrh	r3, [r4, #12]
 8003e62:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e66:	81a3      	strh	r3, [r4, #12]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	6063      	str	r3, [r4, #4]
 8003e6c:	6923      	ldr	r3, [r4, #16]
 8003e6e:	6023      	str	r3, [r4, #0]
 8003e70:	89a3      	ldrh	r3, [r4, #12]
 8003e72:	f043 0308 	orr.w	r3, r3, #8
 8003e76:	81a3      	strh	r3, [r4, #12]
 8003e78:	6923      	ldr	r3, [r4, #16]
 8003e7a:	b94b      	cbnz	r3, 8003e90 <__swsetup_r+0x7c>
 8003e7c:	89a3      	ldrh	r3, [r4, #12]
 8003e7e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e86:	d003      	beq.n	8003e90 <__swsetup_r+0x7c>
 8003e88:	4621      	mov	r1, r4
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	f000 f85d 	bl	8003f4a <__smakebuf_r>
 8003e90:	89a0      	ldrh	r0, [r4, #12]
 8003e92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e96:	f010 0301 	ands.w	r3, r0, #1
 8003e9a:	d00a      	beq.n	8003eb2 <__swsetup_r+0x9e>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60a3      	str	r3, [r4, #8]
 8003ea0:	6963      	ldr	r3, [r4, #20]
 8003ea2:	425b      	negs	r3, r3
 8003ea4:	61a3      	str	r3, [r4, #24]
 8003ea6:	6923      	ldr	r3, [r4, #16]
 8003ea8:	b943      	cbnz	r3, 8003ebc <__swsetup_r+0xa8>
 8003eaa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003eae:	d1c4      	bne.n	8003e3a <__swsetup_r+0x26>
 8003eb0:	bd38      	pop	{r3, r4, r5, pc}
 8003eb2:	0781      	lsls	r1, r0, #30
 8003eb4:	bf58      	it	pl
 8003eb6:	6963      	ldrpl	r3, [r4, #20]
 8003eb8:	60a3      	str	r3, [r4, #8]
 8003eba:	e7f4      	b.n	8003ea6 <__swsetup_r+0x92>
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	e7f7      	b.n	8003eb0 <__swsetup_r+0x9c>
 8003ec0:	20000064 	.word	0x20000064

08003ec4 <_sbrk_r>:
 8003ec4:	b538      	push	{r3, r4, r5, lr}
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	4d05      	ldr	r5, [pc, #20]	; (8003ee0 <_sbrk_r+0x1c>)
 8003eca:	4604      	mov	r4, r0
 8003ecc:	4608      	mov	r0, r1
 8003ece:	602b      	str	r3, [r5, #0]
 8003ed0:	f7fc ffca 	bl	8000e68 <_sbrk>
 8003ed4:	1c43      	adds	r3, r0, #1
 8003ed6:	d102      	bne.n	8003ede <_sbrk_r+0x1a>
 8003ed8:	682b      	ldr	r3, [r5, #0]
 8003eda:	b103      	cbz	r3, 8003ede <_sbrk_r+0x1a>
 8003edc:	6023      	str	r3, [r4, #0]
 8003ede:	bd38      	pop	{r3, r4, r5, pc}
 8003ee0:	200002c0 	.word	0x200002c0

08003ee4 <memchr>:
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	b510      	push	{r4, lr}
 8003ee8:	b2c9      	uxtb	r1, r1
 8003eea:	4402      	add	r2, r0
 8003eec:	4293      	cmp	r3, r2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	d101      	bne.n	8003ef6 <memchr+0x12>
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	e003      	b.n	8003efe <memchr+0x1a>
 8003ef6:	7804      	ldrb	r4, [r0, #0]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	428c      	cmp	r4, r1
 8003efc:	d1f6      	bne.n	8003eec <memchr+0x8>
 8003efe:	bd10      	pop	{r4, pc}

08003f00 <__swhatbuf_r>:
 8003f00:	b570      	push	{r4, r5, r6, lr}
 8003f02:	460c      	mov	r4, r1
 8003f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f08:	4615      	mov	r5, r2
 8003f0a:	2900      	cmp	r1, #0
 8003f0c:	461e      	mov	r6, r3
 8003f0e:	b096      	sub	sp, #88	; 0x58
 8003f10:	da0c      	bge.n	8003f2c <__swhatbuf_r+0x2c>
 8003f12:	89a3      	ldrh	r3, [r4, #12]
 8003f14:	2100      	movs	r1, #0
 8003f16:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003f1a:	bf0c      	ite	eq
 8003f1c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003f20:	2340      	movne	r3, #64	; 0x40
 8003f22:	2000      	movs	r0, #0
 8003f24:	6031      	str	r1, [r6, #0]
 8003f26:	602b      	str	r3, [r5, #0]
 8003f28:	b016      	add	sp, #88	; 0x58
 8003f2a:	bd70      	pop	{r4, r5, r6, pc}
 8003f2c:	466a      	mov	r2, sp
 8003f2e:	f000 f849 	bl	8003fc4 <_fstat_r>
 8003f32:	2800      	cmp	r0, #0
 8003f34:	dbed      	blt.n	8003f12 <__swhatbuf_r+0x12>
 8003f36:	9901      	ldr	r1, [sp, #4]
 8003f38:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003f3c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003f40:	4259      	negs	r1, r3
 8003f42:	4159      	adcs	r1, r3
 8003f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f48:	e7eb      	b.n	8003f22 <__swhatbuf_r+0x22>

08003f4a <__smakebuf_r>:
 8003f4a:	898b      	ldrh	r3, [r1, #12]
 8003f4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f4e:	079d      	lsls	r5, r3, #30
 8003f50:	4606      	mov	r6, r0
 8003f52:	460c      	mov	r4, r1
 8003f54:	d507      	bpl.n	8003f66 <__smakebuf_r+0x1c>
 8003f56:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f5a:	6023      	str	r3, [r4, #0]
 8003f5c:	6123      	str	r3, [r4, #16]
 8003f5e:	2301      	movs	r3, #1
 8003f60:	6163      	str	r3, [r4, #20]
 8003f62:	b002      	add	sp, #8
 8003f64:	bd70      	pop	{r4, r5, r6, pc}
 8003f66:	466a      	mov	r2, sp
 8003f68:	ab01      	add	r3, sp, #4
 8003f6a:	f7ff ffc9 	bl	8003f00 <__swhatbuf_r>
 8003f6e:	9900      	ldr	r1, [sp, #0]
 8003f70:	4605      	mov	r5, r0
 8003f72:	4630      	mov	r0, r6
 8003f74:	f7ff fb04 	bl	8003580 <_malloc_r>
 8003f78:	b948      	cbnz	r0, 8003f8e <__smakebuf_r+0x44>
 8003f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f7e:	059a      	lsls	r2, r3, #22
 8003f80:	d4ef      	bmi.n	8003f62 <__smakebuf_r+0x18>
 8003f82:	f023 0303 	bic.w	r3, r3, #3
 8003f86:	f043 0302 	orr.w	r3, r3, #2
 8003f8a:	81a3      	strh	r3, [r4, #12]
 8003f8c:	e7e3      	b.n	8003f56 <__smakebuf_r+0xc>
 8003f8e:	89a3      	ldrh	r3, [r4, #12]
 8003f90:	6020      	str	r0, [r4, #0]
 8003f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f96:	81a3      	strh	r3, [r4, #12]
 8003f98:	9b00      	ldr	r3, [sp, #0]
 8003f9a:	6120      	str	r0, [r4, #16]
 8003f9c:	6163      	str	r3, [r4, #20]
 8003f9e:	9b01      	ldr	r3, [sp, #4]
 8003fa0:	b15b      	cbz	r3, 8003fba <__smakebuf_r+0x70>
 8003fa2:	4630      	mov	r0, r6
 8003fa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fa8:	f000 f81e 	bl	8003fe8 <_isatty_r>
 8003fac:	b128      	cbz	r0, 8003fba <__smakebuf_r+0x70>
 8003fae:	89a3      	ldrh	r3, [r4, #12]
 8003fb0:	f023 0303 	bic.w	r3, r3, #3
 8003fb4:	f043 0301 	orr.w	r3, r3, #1
 8003fb8:	81a3      	strh	r3, [r4, #12]
 8003fba:	89a3      	ldrh	r3, [r4, #12]
 8003fbc:	431d      	orrs	r5, r3
 8003fbe:	81a5      	strh	r5, [r4, #12]
 8003fc0:	e7cf      	b.n	8003f62 <__smakebuf_r+0x18>
	...

08003fc4 <_fstat_r>:
 8003fc4:	b538      	push	{r3, r4, r5, lr}
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	4d06      	ldr	r5, [pc, #24]	; (8003fe4 <_fstat_r+0x20>)
 8003fca:	4604      	mov	r4, r0
 8003fcc:	4608      	mov	r0, r1
 8003fce:	4611      	mov	r1, r2
 8003fd0:	602b      	str	r3, [r5, #0]
 8003fd2:	f7fc ff23 	bl	8000e1c <_fstat>
 8003fd6:	1c43      	adds	r3, r0, #1
 8003fd8:	d102      	bne.n	8003fe0 <_fstat_r+0x1c>
 8003fda:	682b      	ldr	r3, [r5, #0]
 8003fdc:	b103      	cbz	r3, 8003fe0 <_fstat_r+0x1c>
 8003fde:	6023      	str	r3, [r4, #0]
 8003fe0:	bd38      	pop	{r3, r4, r5, pc}
 8003fe2:	bf00      	nop
 8003fe4:	200002c0 	.word	0x200002c0

08003fe8 <_isatty_r>:
 8003fe8:	b538      	push	{r3, r4, r5, lr}
 8003fea:	2300      	movs	r3, #0
 8003fec:	4d05      	ldr	r5, [pc, #20]	; (8004004 <_isatty_r+0x1c>)
 8003fee:	4604      	mov	r4, r0
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	602b      	str	r3, [r5, #0]
 8003ff4:	f7fc ff21 	bl	8000e3a <_isatty>
 8003ff8:	1c43      	adds	r3, r0, #1
 8003ffa:	d102      	bne.n	8004002 <_isatty_r+0x1a>
 8003ffc:	682b      	ldr	r3, [r5, #0]
 8003ffe:	b103      	cbz	r3, 8004002 <_isatty_r+0x1a>
 8004000:	6023      	str	r3, [r4, #0]
 8004002:	bd38      	pop	{r3, r4, r5, pc}
 8004004:	200002c0 	.word	0x200002c0

08004008 <_init>:
 8004008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400a:	bf00      	nop
 800400c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400e:	bc08      	pop	{r3}
 8004010:	469e      	mov	lr, r3
 8004012:	4770      	bx	lr

08004014 <_fini>:
 8004014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004016:	bf00      	nop
 8004018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401a:	bc08      	pop	{r3}
 800401c:	469e      	mov	lr, r3
 800401e:	4770      	bx	lr
