
HAL_I2C_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080027b8  080027b8  000127b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800281c  0800281c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800281c  0800281c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800281c  0800281c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800281c  0800281c  0001281c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002820  08002820  00012820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000005c  08002880  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20000220  08002880  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   000073eb  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019c7  00000000  00000000  000274b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  00028e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000677  00000000  00000000  00029710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000171d5  00000000  00000000  00029d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ab43  00000000  00000000  00040f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008217e  00000000  00000000  0004ba9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024c4  00000000  00000000  000cdc20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000d00e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080027a0 	.word	0x080027a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080027a0 	.word	0x080027a0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LCD_I2C_PulseEnable>:
 #define D5 5
 #define D6 6
 #define D7 7

 void LCD_I2C_PulseEnable(LCD_I2C_Struct *LCD_I2C, uint8_t data)
 {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	460b      	mov	r3, r1
 8000166:	70fb      	strb	r3, [r7, #3]
    i2c1write (data | LCD_I2C->_En);   // En HIGH
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	7fda      	ldrb	r2, [r3, #31]
 800016c:	78fb      	ldrb	r3, [r7, #3]
 800016e:	4313      	orrs	r3, r2
 8000170:	b2db      	uxtb	r3, r3
 8000172:	4618      	mov	r0, r3
 8000174:	f000 f9f2 	bl	800055c <i2c1write>
    i2c1write (data & ~LCD_I2C->_En);  // En LOW
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	7fdb      	ldrb	r3, [r3, #31]
 800017c:	b25b      	sxtb	r3, r3
 800017e:	43db      	mvns	r3, r3
 8000180:	b25a      	sxtb	r2, r3
 8000182:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000186:	4013      	ands	r3, r2
 8000188:	b25b      	sxtb	r3, r3
 800018a:	b2db      	uxtb	r3, r3
 800018c:	4618      	mov	r0, r3
 800018e:	f000 f9e5 	bl	800055c <i2c1write>
 }
 8000192:	bf00      	nop
 8000194:	3708      	adds	r7, #8
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}

0800019a <LCD_I2C_write4bits>:

 void LCD_I2C_write4bits(LCD_I2C_Struct *LCD_I2C, uint8_t value, uint8_t mode )
 {
 800019a:	b580      	push	{r7, lr}
 800019c:	b084      	sub	sp, #16
 800019e:	af00      	add	r7, sp, #0
 80001a0:	6078      	str	r0, [r7, #4]
 80001a2:	460b      	mov	r3, r1
 80001a4:	70fb      	strb	r3, [r7, #3]
 80001a6:	4613      	mov	r3, r2
 80001a8:	70bb      	strb	r3, [r7, #2]

    uint8_t pinMapValue = 0;
 80001aa:	2300      	movs	r3, #0
 80001ac:	73fb      	strb	r3, [r7, #15]

    // Map the value to LCD pin mapping
    // --------------------------------
    uint8_t i = 0;
 80001ae:	2300      	movs	r3, #0
 80001b0:	73bb      	strb	r3, [r7, #14]
    for (; i < 4; i++ )
 80001b2:	e012      	b.n	80001da <LCD_I2C_write4bits+0x40>
    {
       if ( ( value & 0x1 ) == 1 )
 80001b4:	78fb      	ldrb	r3, [r7, #3]
 80001b6:	f003 0301 	and.w	r3, r3, #1
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d007      	beq.n	80001ce <LCD_I2C_write4bits+0x34>
       {
          pinMapValue |= LCD_I2C->_data_pins[i];
 80001be:	7bbb      	ldrb	r3, [r7, #14]
 80001c0:	687a      	ldr	r2, [r7, #4]
 80001c2:	4413      	add	r3, r2
 80001c4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80001c8:	7bfb      	ldrb	r3, [r7, #15]
 80001ca:	4313      	orrs	r3, r2
 80001cc:	73fb      	strb	r3, [r7, #15]
       }
       value = ( value >> 1 );
 80001ce:	78fb      	ldrb	r3, [r7, #3]
 80001d0:	085b      	lsrs	r3, r3, #1
 80001d2:	70fb      	strb	r3, [r7, #3]
    for (; i < 4; i++ )
 80001d4:	7bbb      	ldrb	r3, [r7, #14]
 80001d6:	3301      	adds	r3, #1
 80001d8:	73bb      	strb	r3, [r7, #14]
 80001da:	7bbb      	ldrb	r3, [r7, #14]
 80001dc:	2b03      	cmp	r3, #3
 80001de:	d9e9      	bls.n	80001b4 <LCD_I2C_write4bits+0x1a>
    }

    // Is it a command or data
    // -----------------------
    if ( mode == DATA )
 80001e0:	78bb      	ldrb	r3, [r7, #2]
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	d103      	bne.n	80001ee <LCD_I2C_write4bits+0x54>
    {
       mode = LCD_I2C->_Rs;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80001ec:	70bb      	strb	r3, [r7, #2]
    }

    pinMapValue |= mode | LCD_I2C->_backlightStsMask;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	7f9a      	ldrb	r2, [r3, #30]
 80001f2:	78bb      	ldrb	r3, [r7, #2]
 80001f4:	4313      	orrs	r3, r2
 80001f6:	b2da      	uxtb	r2, r3
 80001f8:	7bfb      	ldrb	r3, [r7, #15]
 80001fa:	4313      	orrs	r3, r2
 80001fc:	73fb      	strb	r3, [r7, #15]
    LCD_I2C_PulseEnable (LCD_I2C, pinMapValue );
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	4619      	mov	r1, r3
 8000202:	6878      	ldr	r0, [r7, #4]
 8000204:	f7ff ffaa 	bl	800015c <LCD_I2C_PulseEnable>
 }
 8000208:	bf00      	nop
 800020a:	3710      	adds	r7, #16
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}

08000210 <LCD_I2C_begin>:

 void LCD_I2C_begin(LCD_I2C_Struct *LCD_I2C, uint8_t cols, uint8_t rows)
 {
 8000210:	b590      	push	{r4, r7, lr}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	460b      	mov	r3, r1
 800021a:	70fb      	strb	r3, [r7, #3]
 800021c:	4613      	mov	r3, r2
 800021e:	70bb      	strb	r3, [r7, #2]
    LCD_I2C_init(LCD_I2C);    // Initialise the I2C expander interface
 8000220:	6878      	ldr	r0, [r7, #4]
 8000222:	f000 f909 	bl	8000438 <LCD_I2C_init>
    LCD_I2C->base.begin(((LCD_Struct *)LCD_I2C), cols, rows, LCD_5x8DOTS);
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	699c      	ldr	r4, [r3, #24]
 800022a:	78ba      	ldrb	r2, [r7, #2]
 800022c:	78f9      	ldrb	r1, [r7, #3]
 800022e:	2300      	movs	r3, #0
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	47a0      	blx	r4
 }
 8000234:	bf00      	nop
 8000236:	370c      	adds	r7, #12
 8000238:	46bd      	mov	sp, r7
 800023a:	bd90      	pop	{r4, r7, pc}

0800023c <LCD_I2C_send>:

 void LCD_I2C_send(LCD_I2C_Struct *LCD_I2C, uint8_t value, uint8_t mode)
 {
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	460b      	mov	r3, r1
 8000246:	70fb      	strb	r3, [r7, #3]
 8000248:	4613      	mov	r3, r2
 800024a:	70bb      	strb	r3, [r7, #2]
    // No need to use the delay routines since the time taken to write takes
    // longer that what is needed both for toggling and enable pin an to execute
    // the command.

    if ( mode == FOUR_BITS )
 800024c:	78bb      	ldrb	r3, [r7, #2]
 800024e:	2b02      	cmp	r3, #2
 8000250:	d109      	bne.n	8000266 <LCD_I2C_send+0x2a>
    {
       LCD_I2C_write4bits(LCD_I2C, (value & 0x0F), COMMAND );
 8000252:	78fb      	ldrb	r3, [r7, #3]
 8000254:	f003 030f 	and.w	r3, r3, #15
 8000258:	b2db      	uxtb	r3, r3
 800025a:	2200      	movs	r2, #0
 800025c:	4619      	mov	r1, r3
 800025e:	6878      	ldr	r0, [r7, #4]
 8000260:	f7ff ff9b 	bl	800019a <LCD_I2C_write4bits>
    else
    {
       LCD_I2C_write4bits(LCD_I2C, (value >> 4), mode );
       LCD_I2C_write4bits(LCD_I2C, (value & 0x0F), mode);
    }
 }
 8000264:	e010      	b.n	8000288 <LCD_I2C_send+0x4c>
       LCD_I2C_write4bits(LCD_I2C, (value >> 4), mode );
 8000266:	78fb      	ldrb	r3, [r7, #3]
 8000268:	091b      	lsrs	r3, r3, #4
 800026a:	b2db      	uxtb	r3, r3
 800026c:	78ba      	ldrb	r2, [r7, #2]
 800026e:	4619      	mov	r1, r3
 8000270:	6878      	ldr	r0, [r7, #4]
 8000272:	f7ff ff92 	bl	800019a <LCD_I2C_write4bits>
       LCD_I2C_write4bits(LCD_I2C, (value & 0x0F), mode);
 8000276:	78fb      	ldrb	r3, [r7, #3]
 8000278:	f003 030f 	and.w	r3, r3, #15
 800027c:	b2db      	uxtb	r3, r3
 800027e:	78ba      	ldrb	r2, [r7, #2]
 8000280:	4619      	mov	r1, r3
 8000282:	6878      	ldr	r0, [r7, #4]
 8000284:	f7ff ff89 	bl	800019a <LCD_I2C_write4bits>
 }
 8000288:	bf00      	nop
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}

08000290 <LCD_I2C_setBacklight>:

 void LCD_I2C_setBacklight (LCD_I2C_Struct *LCD_I2C, uint8_t value )
 {
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	460b      	mov	r3, r1
 800029a:	70fb      	strb	r3, [r7, #3]
    // Check if backlight is available
    // ----------------------------------------------------
    if ( LCD_I2C->_backlightPinMask != 0x0 )
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	7f5b      	ldrb	r3, [r3, #29]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d01c      	beq.n	80002de <LCD_I2C_setBacklight+0x4e>
    {
       // Check for polarity to configure mask accordingly
       // ----------------------------------------------------------
       if  (((LCD_I2C->base._polarity == POSITIVE) && (value > 0)) ||
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	795b      	ldrb	r3, [r3, #5]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d102      	bne.n	80002b2 <LCD_I2C_setBacklight+0x22>
 80002ac:	78fb      	ldrb	r3, [r7, #3]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d106      	bne.n	80002c0 <LCD_I2C_setBacklight+0x30>
            ((LCD_I2C->base._polarity == NEGATIVE ) && ( value == 0 )))
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	795b      	ldrb	r3, [r3, #5]
       if  (((LCD_I2C->base._polarity == POSITIVE) && (value > 0)) ||
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d107      	bne.n	80002ca <LCD_I2C_setBacklight+0x3a>
            ((LCD_I2C->base._polarity == NEGATIVE ) && ( value == 0 )))
 80002ba:	78fb      	ldrb	r3, [r7, #3]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d104      	bne.n	80002ca <LCD_I2C_setBacklight+0x3a>
       {
          LCD_I2C->_backlightStsMask = LCD_I2C->_backlightPinMask & LCD_BACKLIGHT;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	7f5a      	ldrb	r2, [r3, #29]
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	779a      	strb	r2, [r3, #30]
 80002c8:	e002      	b.n	80002d0 <LCD_I2C_setBacklight+0x40>
       }
       else
       {
          LCD_I2C->_backlightStsMask = LCD_I2C->_backlightPinMask & LCD_NOBACKLIGHT;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2200      	movs	r2, #0
 80002ce:	779a      	strb	r2, [r3, #30]
       }
       LCD_I2C->base.write((LCD_Struct *)LCD_I2C, LCD_I2C->_backlightStsMask);
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	687a      	ldr	r2, [r7, #4]
 80002d6:	7f92      	ldrb	r2, [r2, #30]
 80002d8:	4611      	mov	r1, r2
 80002da:	6878      	ldr	r0, [r7, #4]
 80002dc:	4798      	blx	r3
    }
 }
 80002de:	bf00      	nop
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}

080002e6 <LCD_I2C_setBacklightPin>:

 void LCD_I2C_setBacklightPin (LCD_I2C_Struct *LCD_I2C, uint8_t value, t_backlighPol pol )
 {
 80002e6:	b480      	push	{r7}
 80002e8:	b083      	sub	sp, #12
 80002ea:	af00      	add	r7, sp, #0
 80002ec:	6078      	str	r0, [r7, #4]
 80002ee:	460b      	mov	r3, r1
 80002f0:	70fb      	strb	r3, [r7, #3]
 80002f2:	4613      	mov	r3, r2
 80002f4:	70bb      	strb	r3, [r7, #2]
    LCD_I2C->_backlightPinMask = ( 1 << value );
 80002f6:	78fb      	ldrb	r3, [r7, #3]
 80002f8:	2201      	movs	r2, #1
 80002fa:	fa02 f303 	lsl.w	r3, r2, r3
 80002fe:	b2da      	uxtb	r2, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	775a      	strb	r2, [r3, #29]
    LCD_I2C->base._polarity = pol;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	78ba      	ldrb	r2, [r7, #2]
 8000308:	715a      	strb	r2, [r3, #5]
    //LCD_I2C_setBacklight(LCD_I2C, BACKLIGHT_OFF);
 }
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr

08000314 <LCD_I2C_config>:

 void LCD_I2C_config (LCD_I2C_Struct *LCD_I2C, uint8_t lcd_Addr, uint8_t En, uint8_t Rw, uint8_t Rs,
                                 uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7 )
 {
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	4608      	mov	r0, r1
 800031e:	4611      	mov	r1, r2
 8000320:	461a      	mov	r2, r3
 8000322:	4603      	mov	r3, r0
 8000324:	70fb      	strb	r3, [r7, #3]
 8000326:	460b      	mov	r3, r1
 8000328:	70bb      	strb	r3, [r7, #2]
 800032a:	4613      	mov	r3, r2
 800032c:	707b      	strb	r3, [r7, #1]
    LCD_I2C->_Addr = lcd_Addr;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	78fa      	ldrb	r2, [r7, #3]
 8000332:	771a      	strb	r2, [r3, #28]

    LCD_I2C->_backlightPinMask = 0;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	2200      	movs	r2, #0
 8000338:	775a      	strb	r2, [r3, #29]
    LCD_I2C->_backlightStsMask = LCD_NOBACKLIGHT;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	2200      	movs	r2, #0
 800033e:	779a      	strb	r2, [r3, #30]
    LCD_I2C->base._polarity = POSITIVE;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2200      	movs	r2, #0
 8000344:	715a      	strb	r2, [r3, #5]

    LCD_I2C->_En = ( 1 << En );
 8000346:	78bb      	ldrb	r3, [r7, #2]
 8000348:	2201      	movs	r2, #1
 800034a:	fa02 f303 	lsl.w	r3, r2, r3
 800034e:	b2da      	uxtb	r2, r3
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	77da      	strb	r2, [r3, #31]
    LCD_I2C->_Rw = ( 1 << Rw );
 8000354:	787b      	ldrb	r3, [r7, #1]
 8000356:	2201      	movs	r2, #1
 8000358:	fa02 f303 	lsl.w	r3, r2, r3
 800035c:	b2da      	uxtb	r2, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f883 2020 	strb.w	r2, [r3, #32]
    LCD_I2C->_Rs = ( 1 << Rs );
 8000364:	7c3b      	ldrb	r3, [r7, #16]
 8000366:	2201      	movs	r2, #1
 8000368:	fa02 f303 	lsl.w	r3, r2, r3
 800036c:	b2da      	uxtb	r2, r3
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    // Initialise pin mapping
    LCD_I2C->_data_pins[0] = ( 1 << d4 );
 8000374:	7d3b      	ldrb	r3, [r7, #20]
 8000376:	2201      	movs	r2, #1
 8000378:	fa02 f303 	lsl.w	r3, r2, r3
 800037c:	b2da      	uxtb	r2, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    LCD_I2C->_data_pins[1] = ( 1 << d5 );
 8000384:	7e3b      	ldrb	r3, [r7, #24]
 8000386:	2201      	movs	r2, #1
 8000388:	fa02 f303 	lsl.w	r3, r2, r3
 800038c:	b2da      	uxtb	r2, r3
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    LCD_I2C->_data_pins[2] = ( 1 << d6 );
 8000394:	7f3b      	ldrb	r3, [r7, #28]
 8000396:	2201      	movs	r2, #1
 8000398:	fa02 f303 	lsl.w	r3, r2, r3
 800039c:	b2da      	uxtb	r2, r3
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    LCD_I2C->_data_pins[3] = ( 1 << d7 );
 80003a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80003a8:	2201      	movs	r2, #1
 80003aa:	fa02 f303 	lsl.w	r3, r2, r3
 80003ae:	b2da      	uxtb	r2, r3
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 }
 80003b6:	bf00      	nop
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr

080003c0 <new_LCD_I2C_Struct>:

 LCD_I2C_Struct *new_LCD_I2C_Struct(uint8_t lcd_Addr, uint8_t backlighPin, t_backlighPol pol)
 {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08a      	sub	sp, #40	; 0x28
 80003c4:	af06      	add	r7, sp, #24
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
 80003ca:	460b      	mov	r3, r1
 80003cc:	71bb      	strb	r3, [r7, #6]
 80003ce:	4613      	mov	r3, r2
 80003d0:	717b      	strb	r3, [r7, #5]
    //LCD_Struct *LCD = new_LCD_Struct();
    LCD_I2C_Struct *LCD_I2C = (LCD_I2C_Struct *)malloc(sizeof(LCD_I2C_Struct));
 80003d2:	2028      	movs	r0, #40	; 0x28
 80003d4:	f002 f8ec 	bl	80025b0 <malloc>
 80003d8:	4603      	mov	r3, r0
 80003da:	60fb      	str	r3, [r7, #12]
    base_LCD_Struct((LCD_Struct *)LCD_I2C);
 80003dc:	68f8      	ldr	r0, [r7, #12]
 80003de:	f000 fa85 	bl	80008ec <base_LCD_Struct>
    //LCD_I2C->base = LCD;
    ((LCD_Struct *)LCD_I2C)->send = &LCD_I2C_send;
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	4a11      	ldr	r2, [pc, #68]	; (800042c <new_LCD_I2C_Struct+0x6c>)
 80003e6:	609a      	str	r2, [r3, #8]
    ((LCD_Struct *)LCD_I2C)->setBacklight = &LCD_I2C_setBacklight;
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	4a11      	ldr	r2, [pc, #68]	; (8000430 <new_LCD_I2C_Struct+0x70>)
 80003ec:	611a      	str	r2, [r3, #16]
    ((LCD_Struct *)LCD_I2C)->setBacklightPin = &LCD_I2C_setBacklightPin;
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	4a10      	ldr	r2, [pc, #64]	; (8000434 <new_LCD_I2C_Struct+0x74>)
 80003f2:	615a      	str	r2, [r3, #20]

    LCD_I2C_config(LCD_I2C, lcd_Addr, EN, RW, RS, D4, D5, D6, D7);
 80003f4:	79f9      	ldrb	r1, [r7, #7]
 80003f6:	2307      	movs	r3, #7
 80003f8:	9304      	str	r3, [sp, #16]
 80003fa:	2306      	movs	r3, #6
 80003fc:	9303      	str	r3, [sp, #12]
 80003fe:	2305      	movs	r3, #5
 8000400:	9302      	str	r3, [sp, #8]
 8000402:	2304      	movs	r3, #4
 8000404:	9301      	str	r3, [sp, #4]
 8000406:	2300      	movs	r3, #0
 8000408:	9300      	str	r3, [sp, #0]
 800040a:	2301      	movs	r3, #1
 800040c:	2202      	movs	r2, #2
 800040e:	68f8      	ldr	r0, [r7, #12]
 8000410:	f7ff ff80 	bl	8000314 <LCD_I2C_config>
    LCD_I2C_setBacklightPin(LCD_I2C, backlighPin, pol);
 8000414:	797a      	ldrb	r2, [r7, #5]
 8000416:	79bb      	ldrb	r3, [r7, #6]
 8000418:	4619      	mov	r1, r3
 800041a:	68f8      	ldr	r0, [r7, #12]
 800041c:	f7ff ff63 	bl	80002e6 <LCD_I2C_setBacklightPin>

    return LCD_I2C;
 8000420:	68fb      	ldr	r3, [r7, #12]
 }
 8000422:	4618      	mov	r0, r3
 8000424:	3710      	adds	r7, #16
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	0800023d 	.word	0x0800023d
 8000430:	08000291 	.word	0x08000291
 8000434:	080002e7 	.word	0x080002e7

08000438 <LCD_I2C_init>:

int LCD_I2C_init(LCD_I2C_Struct *LCD_I2C)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
   int status = 0;
 8000440:	2300      	movs	r3, #0
 8000442:	60fb      	str	r3, [r7, #12]

   // initialize the backpack IO expander
   // and display functions.
   // ------------------------------------------------------------------------
   if ( i2c1begin( LCD_I2C->_Addr ) == 1 )
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	7f1b      	ldrb	r3, [r3, #28]
 8000448:	4618      	mov	r0, r3
 800044a:	f000 f875 	bl	8000538 <i2c1begin>
 800044e:	4603      	mov	r3, r0
 8000450:	2b01      	cmp	r3, #1
 8000452:	d107      	bne.n	8000464 <LCD_I2C_init+0x2c>
   {
      // _i2cio.portMode ( OUTPUT );  // Set the entire IO extender to OUTPUT
      // I2C_LowLevel_Init(I2C1, 100000, 0x00);
      LCD_I2C->base._displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	2200      	movs	r2, #0
 8000458:	701a      	strb	r2, [r3, #0]
      status = 1;
 800045a:	2301      	movs	r3, #1
 800045c:	60fb      	str	r3, [r7, #12]
      //_i2cio.write(0);  // Set the entire port to LOW
      i2c1write(0);
 800045e:	2000      	movs	r0, #0
 8000460:	f000 f87c 	bl	800055c <i2c1write>
   }
   return ( status );
 8000464:	68fb      	ldr	r3, [r7, #12]
}
 8000466:	4618      	mov	r0, r3
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}

0800046e <LCD_I2C_clear>:

void LCD_I2C_clear(LCD_I2C_Struct *LCD_I2C)
{
 800046e:	b580      	push	{r7, lr}
 8000470:	b082      	sub	sp, #8
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
   LCD_clear((LCD_Struct *)LCD_I2C);
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f000 f8a0 	bl	80005bc <LCD_clear>
}
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <LCD_I2C_printStr>:
{
   return LCD_print((LCD_Struct *)LCD_I2C, c);
}

size_t LCD_I2C_printStr(LCD_I2C_Struct *LCD_I2C, const char *str)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	6039      	str	r1, [r7, #0]
   return LCD_printStr((LCD_Struct *)LCD_I2C, (const char *)str);
 800048e:	6839      	ldr	r1, [r7, #0]
 8000490:	6878      	ldr	r0, [r7, #4]
 8000492:	f000 f948 	bl	8000726 <LCD_printStr>
 8000496:	4603      	mov	r3, r0
}
 8000498:	4618      	mov	r0, r3
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <MX_I2C1_Init>:

// =============================================
 static I2C_HandleTypeDef hi2c1;

 static void MX_I2C1_Init(void)
 {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
   /* USER CODE END I2C1_Init 0 */

   /* USER CODE BEGIN I2C1_Init 1 */

   /* USER CODE END I2C1_Init 1 */
   hi2c1.Instance = I2C1;
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <MX_I2C1_Init+0x50>)
 80004a6:	4a13      	ldr	r2, [pc, #76]	; (80004f4 <MX_I2C1_Init+0x54>)
 80004a8:	601a      	str	r2, [r3, #0]
   hi2c1.Init.ClockSpeed = 100000;
 80004aa:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <MX_I2C1_Init+0x50>)
 80004ac:	4a12      	ldr	r2, [pc, #72]	; (80004f8 <MX_I2C1_Init+0x58>)
 80004ae:	605a      	str	r2, [r3, #4]
   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004b0:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <MX_I2C1_Init+0x50>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
   hi2c1.Init.OwnAddress1 = 0;
 80004b6:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <MX_I2C1_Init+0x50>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	60da      	str	r2, [r3, #12]
   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <MX_I2C1_Init+0x50>)
 80004be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004c2:	611a      	str	r2, [r3, #16]
   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004c4:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <MX_I2C1_Init+0x50>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	615a      	str	r2, [r3, #20]
   hi2c1.Init.OwnAddress2 = 0;
 80004ca:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <MX_I2C1_Init+0x50>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	619a      	str	r2, [r3, #24]
   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004d0:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <MX_I2C1_Init+0x50>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	61da      	str	r2, [r3, #28]
   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004d6:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <MX_I2C1_Init+0x50>)
 80004d8:	2200      	movs	r2, #0
 80004da:	621a      	str	r2, [r3, #32]
   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004dc:	4804      	ldr	r0, [pc, #16]	; (80004f0 <MX_I2C1_Init+0x50>)
 80004de:	f000 ffcf 	bl	8001480 <HAL_I2C_Init>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_I2C1_Init+0x4c>
   {
     Error_Handler();
 80004e8:	f000 fbc4 	bl	8000c74 <Error_Handler>
   }
   /* USER CODE BEGIN I2C1_Init 2 */

   /* USER CODE END I2C1_Init 2 */

 }
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000078 	.word	0x20000078
 80004f4:	40005400 	.word	0x40005400
 80004f8:	000186a0 	.word	0x000186a0

080004fc <I2C1_Write>:

 HAL_StatusTypeDef I2C1_Write(const uint8_t* buf, uint32_t nbuf,  uint8_t SlaveAddress)
 {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af02      	add	r7, sp, #8
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	4613      	mov	r3, r2
 8000508:	71fb      	strb	r3, [r7, #7]
	 return HAL_I2C_Master_Transmit(&hi2c1, SlaveAddress, buf, 1, HAL_MAX_DELAY);
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	b299      	uxth	r1, r3
 800050e:	f04f 33ff 	mov.w	r3, #4294967295
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2301      	movs	r3, #1
 8000516:	68fa      	ldr	r2, [r7, #12]
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <I2C1_Write+0x2c>)
 800051a:	f001 f8f5 	bl	8001708 <HAL_I2C_Master_Transmit>
 800051e:	4603      	mov	r3, r0
 }
 8000520:	4618      	mov	r0, r3
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000078 	.word	0x20000078

0800052c <I2C1_Init>:

 // LCD Use
 uint8_t i2cioSlaveAddr = 0x00;

 void I2C1_Init()
 {
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
    //I2C_LowLevel_Init(I2C1, 400000, 0x00);
    MX_I2C1_Init();
 8000530:	f7ff ffb6 	bl	80004a0 <MX_I2C1_Init>
 }
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}

08000538 <i2c1begin>:

 uint8_t i2c1begin(uint8_t slaveAddr)
 {
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
    i2cioSlaveAddr = slaveAddr;
 8000542:	4a05      	ldr	r2, [pc, #20]	; (8000558 <i2c1begin+0x20>)
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	7013      	strb	r3, [r2, #0]
    I2C1_Init();
 8000548:	f7ff fff0 	bl	800052c <I2C1_Init>
    return 1;
 800054c:	2301      	movs	r3, #1
 }
 800054e:	4618      	mov	r0, r3
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	200000cc 	.word	0x200000cc

0800055c <i2c1write>:

 void i2c1write(uint8_t data)
 {
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
    //I2C_Write(I2C1, &data, 1, i2cioSlaveAddr << 1);
	 I2C1_Write(&data, 1, i2cioSlaveAddr << 1);
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <i2c1write+0x24>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	b2da      	uxtb	r2, r3
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	2101      	movs	r1, #1
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ffc2 	bl	80004fc <I2C1_Write>
 }
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	200000cc 	.word	0x200000cc

08000584 <delayMicroseconds>:
#endif

#include "LCD.h"

void delayMicroseconds(uint8_t micro)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 800058e:	2001      	movs	r0, #1
 8000590:	f000 fcd2 	bl	8000f38 <HAL_Delay>
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <LCD_command>:

void LCD_command(LCD_Struct *LCD, uint8_t value)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	70fb      	strb	r3, [r7, #3]
   LCD->send(LCD, value, COMMAND);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	78f9      	ldrb	r1, [r7, #3]
 80005ae:	2200      	movs	r2, #0
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	4798      	blx	r3
   //send(value, COMMAND);
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <LCD_clear>:
   LCD_command(LCD, LCD_RETURNHOME);             // set cursor position to zero
   delayMicroseconds(HOME_CLEAR_EXEC);  // This command is time consuming
}

void LCD_clear(LCD_Struct *LCD)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
   LCD_command(LCD, LCD_CLEARDISPLAY);             // clear display, set cursor position to zero
 80005c4:	2101      	movs	r1, #1
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f7ff ffe8 	bl	800059c <LCD_command>
   delayMicroseconds(HOME_CLEAR_EXEC);    // this command is time consuming
 80005cc:	20d0      	movs	r0, #208	; 0xd0
 80005ce:	f7ff ffd9 	bl	8000584 <delayMicroseconds>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <LCD_setCursor>:

void LCD_setCursor(LCD_Struct *LCD, uint8_t col, uint8_t row)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	460b      	mov	r3, r1
 80005e6:	70fb      	strb	r3, [r7, #3]
 80005e8:	4613      	mov	r3, r2
 80005ea:	70bb      	strb	r3, [r7, #2]
   const uint8_t row_offsetsDef[]   = { 0x00, 0x40, 0x14, 0x54 }; // For regular LCDs
 80005ec:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <LCD_setCursor+0x8c>)
 80005ee:	60fb      	str	r3, [r7, #12]
   const uint8_t row_offsetsLarge[] = { 0x00, 0x40, 0x10, 0x50 }; // For 16x4 LCDs
 80005f0:	4b1e      	ldr	r3, [pc, #120]	; (800066c <LCD_setCursor+0x90>)
 80005f2:	60bb      	str	r3, [r7, #8]

   if ( row >= LCD->_numlines )
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	78db      	ldrb	r3, [r3, #3]
 80005f8:	78ba      	ldrb	r2, [r7, #2]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d303      	bcc.n	8000606 <LCD_setCursor+0x2a>
   {
      row = LCD->_numlines-1;    // rows start at 0
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	78db      	ldrb	r3, [r3, #3]
 8000602:	3b01      	subs	r3, #1
 8000604:	70bb      	strb	r3, [r7, #2]
   }

   // 16x4 LCDs have special memory map layout
   // ----------------------------------------
   if ( LCD->_cols == 16 && LCD->_numlines == 4 )
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	791b      	ldrb	r3, [r3, #4]
 800060a:	2b10      	cmp	r3, #16
 800060c:	d115      	bne.n	800063a <LCD_setCursor+0x5e>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	78db      	ldrb	r3, [r3, #3]
 8000612:	2b04      	cmp	r3, #4
 8000614:	d111      	bne.n	800063a <LCD_setCursor+0x5e>
   {
      LCD_command(LCD, LCD_SETDDRAMADDR | (col + row_offsetsLarge[row]));
 8000616:	78bb      	ldrb	r3, [r7, #2]
 8000618:	3310      	adds	r3, #16
 800061a:	443b      	add	r3, r7
 800061c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	4413      	add	r3, r2
 8000624:	b2db      	uxtb	r3, r3
 8000626:	b25b      	sxtb	r3, r3
 8000628:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800062c:	b25b      	sxtb	r3, r3
 800062e:	b2db      	uxtb	r3, r3
 8000630:	4619      	mov	r1, r3
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f7ff ffb2 	bl	800059c <LCD_command>
 8000638:	e011      	b.n	800065e <LCD_setCursor+0x82>
   }
   else
   {
      LCD_command(LCD, LCD_SETDDRAMADDR | (col + row_offsetsDef[row]));
 800063a:	78bb      	ldrb	r3, [r7, #2]
 800063c:	3310      	adds	r3, #16
 800063e:	443b      	add	r3, r7
 8000640:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8000644:	78fb      	ldrb	r3, [r7, #3]
 8000646:	4413      	add	r3, r2
 8000648:	b2db      	uxtb	r3, r3
 800064a:	b25b      	sxtb	r3, r3
 800064c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000650:	b25b      	sxtb	r3, r3
 8000652:	b2db      	uxtb	r3, r3
 8000654:	4619      	mov	r1, r3
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f7ff ffa0 	bl	800059c <LCD_command>
   }

}
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	54144000 	.word	0x54144000
 800066c:	50104000 	.word	0x50104000

08000670 <LCD_display>:
   LCD->_displaycontrol &= ~LCD_DISPLAYON;
   LCD_command(LCD, LCD_DISPLAYCONTROL | LCD->_displaycontrol);
}

void LCD_display(LCD_Struct *LCD)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
   LCD->_displaycontrol |= LCD_DISPLAYON;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	785b      	ldrb	r3, [r3, #1]
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	b2da      	uxtb	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	705a      	strb	r2, [r3, #1]
   LCD_command(LCD, LCD_DISPLAYCONTROL | LCD->_displaycontrol);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	785b      	ldrb	r3, [r3, #1]
 800068a:	f043 0308 	orr.w	r3, r3, #8
 800068e:	b2db      	uxtb	r3, r3
 8000690:	4619      	mov	r1, r3
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f7ff ff82 	bl	800059c <LCD_command>
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <LCD_createChar>:
   LCD_command(LCD, LCD_ENTRYMODESET | LCD->_displaymode);
}

// Write to CGRAM of new characters
void LCD_createChar(LCD_Struct *LCD, uint8_t location, uint8_t charmap[])
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	460b      	mov	r3, r1
 80006aa:	607a      	str	r2, [r7, #4]
 80006ac:	72fb      	strb	r3, [r7, #11]
   location &= 0x7;            // we only have 8 locations 0-7
 80006ae:	7afb      	ldrb	r3, [r7, #11]
 80006b0:	f003 0307 	and.w	r3, r3, #7
 80006b4:	72fb      	strb	r3, [r7, #11]

   LCD_command(LCD, LCD_SETCGRAMADDR | (location << 3));
 80006b6:	7afb      	ldrb	r3, [r7, #11]
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	b25b      	sxtb	r3, r3
 80006bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006c0:	b25b      	sxtb	r3, r3
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4619      	mov	r1, r3
 80006c6:	68f8      	ldr	r0, [r7, #12]
 80006c8:	f7ff ff68 	bl	800059c <LCD_command>
   delayMicroseconds(30);
 80006cc:	201e      	movs	r0, #30
 80006ce:	f7ff ff59 	bl	8000584 <delayMicroseconds>

   uint8_t i = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	75fb      	strb	r3, [r7, #23]
   for (; i < 8; i++)
 80006d6:	e00e      	b.n	80006f6 <LCD_createChar+0x56>
   {
      LCD->write(LCD, charmap[i]);      // call the virtual write method
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	7dfa      	ldrb	r2, [r7, #23]
 80006de:	6879      	ldr	r1, [r7, #4]
 80006e0:	440a      	add	r2, r1
 80006e2:	7812      	ldrb	r2, [r2, #0]
 80006e4:	4611      	mov	r1, r2
 80006e6:	68f8      	ldr	r0, [r7, #12]
 80006e8:	4798      	blx	r3
      delayMicroseconds(40);
 80006ea:	2028      	movs	r0, #40	; 0x28
 80006ec:	f7ff ff4a 	bl	8000584 <delayMicroseconds>
   for (; i < 8; i++)
 80006f0:	7dfb      	ldrb	r3, [r7, #23]
 80006f2:	3301      	adds	r3, #1
 80006f4:	75fb      	strb	r3, [r7, #23]
 80006f6:	7dfb      	ldrb	r3, [r7, #23]
 80006f8:	2b07      	cmp	r3, #7
 80006fa:	d9ed      	bls.n	80006d8 <LCD_createChar+0x38>
   }
}
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <LCD_write>:

void LCD_write(LCD_Struct *LCD, uint8_t value)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b082      	sub	sp, #8
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
 800070e:	460b      	mov	r3, r1
 8000710:	70fb      	strb	r3, [r7, #3]
   LCD->send(LCD, value, DATA);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	78f9      	ldrb	r1, [r7, #3]
 8000718:	2201      	movs	r2, #1
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	4798      	blx	r3
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <LCD_printStr>:

size_t LCD_printStr(LCD_Struct *LCD, const char *str)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b084      	sub	sp, #16
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
 800072e:	6039      	str	r1, [r7, #0]
   size_t length = strlen(str);
 8000730:	6838      	ldr	r0, [r7, #0]
 8000732:	f7ff fd0b 	bl	800014c <strlen>
 8000736:	60f8      	str	r0, [r7, #12]
   size_t count = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
   while(length--)
 800073c:	e00a      	b.n	8000754 <LCD_printStr+0x2e>
   {
      LCD_print(LCD, *str++);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	1c5a      	adds	r2, r3, #1
 8000742:	603a      	str	r2, [r7, #0]
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	4619      	mov	r1, r3
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f000 f80d 	bl	8000768 <LCD_print>
      count++;
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	3301      	adds	r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
   while(length--)
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	1e5a      	subs	r2, r3, #1
 8000758:	60fa      	str	r2, [r7, #12]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d1ef      	bne.n	800073e <LCD_printStr+0x18>
   }
   return count;
 800075e:	68bb      	ldr	r3, [r7, #8]
}
 8000760:	4618      	mov	r0, r3
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <LCD_print>:

size_t LCD_print(LCD_Struct *LCD, const char c)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	460b      	mov	r3, r1
 8000772:	70fb      	strb	r3, [r7, #3]
   LCD_write(LCD, (uint8_t)c);
 8000774:	78fb      	ldrb	r3, [r7, #3]
 8000776:	4619      	mov	r1, r3
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff ffc4 	bl	8000706 <LCD_write>
   return 1;
 800077e:	2301      	movs	r3, #1
}
 8000780:	4618      	mov	r0, r3
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <LCD_backlight>:
   LCD->_displaycontrol |= LCD_DISPLAYON;
   LCD_command(LCD_DISPLAYCONTROL | LCD->_displaycontrol);
}*/

void LCD_backlight (LCD_Struct *LCD)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
   LCD->setBacklight(LCD, 120);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	691b      	ldr	r3, [r3, #16]
 8000794:	2178      	movs	r1, #120	; 0x78
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	4798      	blx	r3
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <LCD_begin>:
// Note, however, that resetting the Arduino doesn't reset the LCD, so we
// can't assume that its in that state when a application starts (and the
// LiquidCrystal constructor is called).
// A call to begin() will reinitialize the LCD.
void LCD_begin(LCD_Struct *LCD, uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
 80007aa:	4608      	mov	r0, r1
 80007ac:	4611      	mov	r1, r2
 80007ae:	461a      	mov	r2, r3
 80007b0:	4603      	mov	r3, r0
 80007b2:	70fb      	strb	r3, [r7, #3]
 80007b4:	460b      	mov	r3, r1
 80007b6:	70bb      	strb	r3, [r7, #2]
 80007b8:	4613      	mov	r3, r2
 80007ba:	707b      	strb	r3, [r7, #1]
   if (lines > 1)
 80007bc:	78bb      	ldrb	r3, [r7, #2]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d906      	bls.n	80007d0 <LCD_begin+0x2e>
   {
      LCD->_displayfunction |= LCD_2LINE;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	701a      	strb	r2, [r3, #0]
   }
   LCD->_numlines = lines;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	78ba      	ldrb	r2, [r7, #2]
 80007d4:	70da      	strb	r2, [r3, #3]
   LCD->_cols = cols;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	78fa      	ldrb	r2, [r7, #3]
 80007da:	711a      	strb	r2, [r3, #4]

   // for some 1 line displays you can select a 10 pixel high font
   // ------------------------------------------------------------
   if ((dotsize != LCD_5x8DOTS) && (lines == 1))
 80007dc:	787b      	ldrb	r3, [r7, #1]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d009      	beq.n	80007f6 <LCD_begin+0x54>
 80007e2:	78bb      	ldrb	r3, [r7, #2]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d106      	bne.n	80007f6 <LCD_begin+0x54>
   {
      LCD->_displayfunction |= LCD_5x10DOTS;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	701a      	strb	r2, [r3, #0]
   // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
   // according to datasheet, we need at least 40ms after power rises above 2.7V
   // before sending commands. Arduino can turn on way before 4.5V so we'll wait
   // 50
   // ---------------------------------------------------------------------------
   HAL_Delay (100); // 100ms delay
 80007f6:	2064      	movs	r0, #100	; 0x64
 80007f8:	f000 fb9e 	bl	8000f38 <HAL_Delay>
   //put the LCD into 4 bit or 8 bit mode
   // -------------------------------------
   if (! (LCD->_displayfunction & LCD_8BITMODE))
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	f003 0310 	and.w	r3, r3, #16
 8000804:	2b00      	cmp	r3, #0
 8000806:	d124      	bne.n	8000852 <LCD_begin+0xb0>
      // this is according to the hitachi HD44780 datasheet
      // figure 24, pg 46

      // we start in 8bit mode, try to set 4 bit mode
      // Special case of "Function Set"
      LCD->send(LCD, 0x03, FOUR_BITS);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	2202      	movs	r2, #2
 800080e:	2103      	movs	r1, #3
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	4798      	blx	r3
      //delayMicroseconds(4500); // wait min 4.1ms
      HAL_Delay(5);
 8000814:	2005      	movs	r0, #5
 8000816:	f000 fb8f 	bl	8000f38 <HAL_Delay>

      // second try
      LCD->send (LCD, 0x03, FOUR_BITS );
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	2202      	movs	r2, #2
 8000820:	2103      	movs	r1, #3
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	4798      	blx	r3
      delayMicroseconds(150); // wait min 100us
 8000826:	2096      	movs	r0, #150	; 0x96
 8000828:	f7ff feac 	bl	8000584 <delayMicroseconds>

      // third go!
      LCD->send(LCD, 0x03, FOUR_BITS );
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	2202      	movs	r2, #2
 8000832:	2103      	movs	r1, #3
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	4798      	blx	r3
      delayMicroseconds(150); // wait min of 100us
 8000838:	2096      	movs	r0, #150	; 0x96
 800083a:	f7ff fea3 	bl	8000584 <delayMicroseconds>

      // finally, set to 4-bit interface
      LCD->send (LCD, 0x02, FOUR_BITS );
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	2202      	movs	r2, #2
 8000844:	2102      	movs	r1, #2
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	4798      	blx	r3
      delayMicroseconds(150); // wait min of 100us
 800084a:	2096      	movs	r0, #150	; 0x96
 800084c:	f7ff fe9a 	bl	8000584 <delayMicroseconds>
 8000850:	e023      	b.n	800089a <LCD_begin+0xf8>
   {
      // this is according to the hitachi HD44780 datasheet
      // page 45 figure 23

      // Send function set command sequence
      LCD_command(LCD, LCD_FUNCTIONSET | LCD->_displayfunction);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	f043 0320 	orr.w	r3, r3, #32
 800085a:	b2db      	uxtb	r3, r3
 800085c:	4619      	mov	r1, r3
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff fe9c 	bl	800059c <LCD_command>
      //delayMicroseconds(4500);  // wait more than 4.1ms
      HAL_Delay(5);
 8000864:	2005      	movs	r0, #5
 8000866:	f000 fb67 	bl	8000f38 <HAL_Delay>

      // second try
      LCD_command(LCD, LCD_FUNCTIONSET | LCD->_displayfunction);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	f043 0320 	orr.w	r3, r3, #32
 8000872:	b2db      	uxtb	r3, r3
 8000874:	4619      	mov	r1, r3
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f7ff fe90 	bl	800059c <LCD_command>
      delayMicroseconds(150);
 800087c:	2096      	movs	r0, #150	; 0x96
 800087e:	f7ff fe81 	bl	8000584 <delayMicroseconds>

      // third go
      LCD_command(LCD, LCD_FUNCTIONSET | LCD->_displayfunction);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	f043 0320 	orr.w	r3, r3, #32
 800088a:	b2db      	uxtb	r3, r3
 800088c:	4619      	mov	r1, r3
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff fe84 	bl	800059c <LCD_command>
      delayMicroseconds(150);
 8000894:	2096      	movs	r0, #150	; 0x96
 8000896:	f7ff fe75 	bl	8000584 <delayMicroseconds>

   }

   // finally, set # lines, font size, etc.
   LCD_command(LCD, LCD_FUNCTIONSET | LCD->_displayfunction);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	f043 0320 	orr.w	r3, r3, #32
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	4619      	mov	r1, r3
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f7ff fe78 	bl	800059c <LCD_command>
   delayMicroseconds ( 60 );  // wait more
 80008ac:	203c      	movs	r0, #60	; 0x3c
 80008ae:	f7ff fe69 	bl	8000584 <delayMicroseconds>

   // turn the display on with no cursor or blinking default
   LCD->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2204      	movs	r2, #4
 80008b6:	705a      	strb	r2, [r3, #1]
   LCD_display(LCD);
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff fed9 	bl	8000670 <LCD_display>

   // Initialize to default text direction (for romance languages)
   LCD->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2202      	movs	r2, #2
 80008c2:	709a      	strb	r2, [r3, #2]
   // set the entry mode
   LCD_command(LCD, LCD_ENTRYMODESET | LCD->_displaymode);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	789b      	ldrb	r3, [r3, #2]
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	4619      	mov	r1, r3
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f7ff fe63 	bl	800059c <LCD_command>
   LCD_backlight(LCD);
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ff56 	bl	8000788 <LCD_backlight>

   // clear the LCD
   LCD_clear(LCD);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff fe6d 	bl	80005bc <LCD_clear>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <base_LCD_Struct>:
   LCD->begin = &LCD_begin;
   return LCD;
}

void base_LCD_Struct(LCD_Struct * LCD)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
   // Set Functions
   LCD->write = &LCD_write;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a05      	ldr	r2, [pc, #20]	; (800090c <base_LCD_Struct+0x20>)
 80008f8:	60da      	str	r2, [r3, #12]
   LCD->begin = &LCD_begin;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a04      	ldr	r2, [pc, #16]	; (8000910 <base_LCD_Struct+0x24>)
 80008fe:	619a      	str	r2, [r3, #24]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	08000707 	.word	0x08000707
 8000910:	080007a3 	.word	0x080007a3

08000914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091a:	f000 faab 	bl	8000e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091e:	f000 f80b 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000922:	f000 f84f 	bl	80009c4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //RegisterCallback(UsbReceiveData);
  //uint8_t msgBuff[] = "USB Initialized\n\r";
  //Send_USB_Data(msgBuff, sizeof(msgBuff));
  LCD1();
 8000926:	f000 f8a5 	bl	8000a74 <LCD1>
  LCD2();
 800092a:	f000 f8c3 	bl	8000ab4 <LCD2>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //LCD_I2C_printStr(LCD_I2C, "Sample" );
	  HAL_Delay(500);
 800092e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000932:	f000 fb01 	bl	8000f38 <HAL_Delay>
 8000936:	e7fa      	b.n	800092e <main+0x1a>

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b090      	sub	sp, #64	; 0x40
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0318 	add.w	r3, r7, #24
 8000942:	2228      	movs	r2, #40	; 0x28
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f001 fee6 	bl	8002718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800095a:	2301      	movs	r3, #1
 800095c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800095e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000962:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000968:	2301      	movs	r3, #1
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096c:	2302      	movs	r3, #2
 800096e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000970:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000974:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000976:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800097a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097c:	f107 0318 	add.w	r3, r7, #24
 8000980:	4618      	mov	r0, r3
 8000982:	f001 fa19 	bl	8001db8 <HAL_RCC_OscConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800098c:	f000 f972 	bl	8000c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000990:	230f      	movs	r3, #15
 8000992:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000994:	2302      	movs	r3, #2
 8000996:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800099c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2101      	movs	r1, #1
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 fc86 	bl	80022bc <HAL_RCC_ClockConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009b6:	f000 f95d 	bl	8000c74 <Error_Handler>
  }
}
 80009ba:	bf00      	nop
 80009bc:	3740      	adds	r7, #64	; 0x40
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d8:	4b24      	ldr	r3, [pc, #144]	; (8000a6c <MX_GPIO_Init+0xa8>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a23      	ldr	r2, [pc, #140]	; (8000a6c <MX_GPIO_Init+0xa8>)
 80009de:	f043 0310 	orr.w	r3, r3, #16
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <MX_GPIO_Init+0xa8>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f003 0310 	and.w	r3, r3, #16
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f0:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <MX_GPIO_Init+0xa8>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	4a1d      	ldr	r2, [pc, #116]	; (8000a6c <MX_GPIO_Init+0xa8>)
 80009f6:	f043 0320 	orr.w	r3, r3, #32
 80009fa:	6193      	str	r3, [r2, #24]
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_GPIO_Init+0xa8>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f003 0320 	and.w	r3, r3, #32
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a08:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_GPIO_Init+0xa8>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	4a17      	ldr	r2, [pc, #92]	; (8000a6c <MX_GPIO_Init+0xa8>)
 8000a0e:	f043 0304 	orr.w	r3, r3, #4
 8000a12:	6193      	str	r3, [r2, #24]
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_GPIO_Init+0xa8>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f003 0304 	and.w	r3, r3, #4
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_GPIO_Init+0xa8>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	4a11      	ldr	r2, [pc, #68]	; (8000a6c <MX_GPIO_Init+0xa8>)
 8000a26:	f043 0308 	orr.w	r3, r3, #8
 8000a2a:	6193      	str	r3, [r2, #24]
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_GPIO_Init+0xa8>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f003 0308 	and.w	r3, r3, #8
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a3e:	480c      	ldr	r0, [pc, #48]	; (8000a70 <MX_GPIO_Init+0xac>)
 8000a40:	f000 fd06 	bl	8001450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOARD_LED_Pin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 8000a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2302      	movs	r3, #2
 8000a54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 0310 	add.w	r3, r7, #16
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_GPIO_Init+0xac>)
 8000a5e:	f000 fb73 	bl	8001148 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a62:	bf00      	nop
 8000a64:	3720      	adds	r7, #32
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40011000 	.word	0x40011000

08000a74 <LCD1>:
	  }

	Send_USB_Data(Buf, Len);
}

void LCD1() {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 8000a7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a7e:	f000 fa5b 	bl	8000f38 <HAL_Delay>
	//LCD_I2C_Struct *LCD_I2C = new_LCD_I2C_Struct(0x23, 3, POSITIVE);
	LCD_I2C_Struct *LCD_I2C = new_LCD_I2C_Struct(0x27, 3, POSITIVE);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2103      	movs	r1, #3
 8000a86:	2027      	movs	r0, #39	; 0x27
 8000a88:	f7ff fc9a 	bl	80003c0 <new_LCD_I2C_Struct>
 8000a8c:	6078      	str	r0, [r7, #4]

	LCD_I2C_begin(LCD_I2C, 16, 2);
 8000a8e:	2202      	movs	r2, #2
 8000a90:	2110      	movs	r1, #16
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff fbbc 	bl	8000210 <LCD_I2C_begin>

	LCD_I2C_clear(LCD_I2C);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff fce8 	bl	800046e <LCD_I2C_clear>
	LCD_I2C_printStr(LCD_I2C, "Hello World");
 8000a9e:	4904      	ldr	r1, [pc, #16]	; (8000ab0 <LCD1+0x3c>)
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff fcef 	bl	8000484 <LCD_I2C_printStr>


}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	080027b8 	.word	0x080027b8

08000ab4 <LCD2>:

void LCD2() {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
	LCD_I2C_Struct *LCD_I2C = new_LCD_I2C_Struct(0x23, 3, POSITIVE);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2103      	movs	r1, #3
 8000abe:	2023      	movs	r0, #35	; 0x23
 8000ac0:	f7ff fc7e 	bl	80003c0 <new_LCD_I2C_Struct>
 8000ac4:	6138      	str	r0, [r7, #16]
	//LCD_I2C_Struct *LCD_I2C2 = new_LCD_I2C_Struct(0x27, 3, POSITIVE);

	LCD_I2C_begin(LCD_I2C, 20, 4);
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	2114      	movs	r1, #20
 8000aca:	6938      	ldr	r0, [r7, #16]
 8000acc:	f7ff fba0 	bl	8000210 <LCD_I2C_begin>

	LCD_I2C_clear(LCD_I2C);
 8000ad0:	6938      	ldr	r0, [r7, #16]
 8000ad2:	f7ff fccc 	bl	800046e <LCD_I2C_clear>
	LCD_I2C_printStr(LCD_I2C, "Hello World");
 8000ad6:	4962      	ldr	r1, [pc, #392]	; (8000c60 <LCD2+0x1ac>)
 8000ad8:	6938      	ldr	r0, [r7, #16]
 8000ada:	f7ff fcd3 	bl	8000484 <LCD_I2C_printStr>

	LCD_setCursor(LCD_I2C, 7, 2);
 8000ade:	2202      	movs	r2, #2
 8000ae0:	2107      	movs	r1, #7
 8000ae2:	6938      	ldr	r0, [r7, #16]
 8000ae4:	f7ff fd7a 	bl	80005dc <LCD_setCursor>

	uint8_t customChar[8] = { 0b00000, 0b10000, 0b01000, 0b00100, 0b00010,
 8000ae8:	4a5e      	ldr	r2, [pc, #376]	; (8000c64 <LCD2+0x1b0>)
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000af0:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001, 0b00000, 0b00000 };

	uint8_t delayTime = 500;
 8000af4:	23f4      	movs	r3, #244	; 0xf4
 8000af6:	73fb      	strb	r3, [r7, #15]
	LCD_createChar(LCD_I2C, 1, customChar);
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	461a      	mov	r2, r3
 8000afc:	2101      	movs	r1, #1
 8000afe:	6938      	ldr	r0, [r7, #16]
 8000b00:	f7ff fdce 	bl	80006a0 <LCD_createChar>

	while (1) {
		int i;

		HAL_Delay(delayTime);
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 fa16 	bl	8000f38 <HAL_Delay>
		for (i = 1; i < 4; i++) {
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e05a      	b.n	8000bc8 <LCD2+0x114>
			LCD_setCursor(LCD_I2C, 1, i);
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	461a      	mov	r2, r3
 8000b18:	2101      	movs	r1, #1
 8000b1a:	6938      	ldr	r0, [r7, #16]
 8000b1c:	f7ff fd5e 	bl	80005dc <LCD_setCursor>

			LCD_write(LCD_I2C, 0b0001);
 8000b20:	2101      	movs	r1, #1
 8000b22:	6938      	ldr	r0, [r7, #16]
 8000b24:	f7ff fdef 	bl	8000706 <LCD_write>
			LCD_setCursor(LCD_I2C, 2, i);
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	2102      	movs	r1, #2
 8000b30:	6938      	ldr	r0, [r7, #16]
 8000b32:	f7ff fd53 	bl	80005dc <LCD_setCursor>
			LCD_write(LCD_I2C, 0b0001);
 8000b36:	2101      	movs	r1, #1
 8000b38:	6938      	ldr	r0, [r7, #16]
 8000b3a:	f7ff fde4 	bl	8000706 <LCD_write>
			LCD_setCursor(LCD_I2C, 3, i);
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	461a      	mov	r2, r3
 8000b44:	2103      	movs	r1, #3
 8000b46:	6938      	ldr	r0, [r7, #16]
 8000b48:	f7ff fd48 	bl	80005dc <LCD_setCursor>
			LCD_write(LCD_I2C, 0b0001);
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	6938      	ldr	r0, [r7, #16]
 8000b50:	f7ff fdd9 	bl	8000706 <LCD_write>
			LCD_setCursor(LCD_I2C, 4, i);
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	461a      	mov	r2, r3
 8000b5a:	2104      	movs	r1, #4
 8000b5c:	6938      	ldr	r0, [r7, #16]
 8000b5e:	f7ff fd3d 	bl	80005dc <LCD_setCursor>
			LCD_write(LCD_I2C, 0b0001);
 8000b62:	2101      	movs	r1, #1
 8000b64:	6938      	ldr	r0, [r7, #16]
 8000b66:	f7ff fdce 	bl	8000706 <LCD_write>
			LCD_setCursor(LCD_I2C, 5, i);
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	461a      	mov	r2, r3
 8000b70:	2105      	movs	r1, #5
 8000b72:	6938      	ldr	r0, [r7, #16]
 8000b74:	f7ff fd32 	bl	80005dc <LCD_setCursor>
			LCD_write(LCD_I2C, 0b0001);
 8000b78:	2101      	movs	r1, #1
 8000b7a:	6938      	ldr	r0, [r7, #16]
 8000b7c:	f7ff fdc3 	bl	8000706 <LCD_write>
			LCD_setCursor(LCD_I2C, 6, i);
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	461a      	mov	r2, r3
 8000b86:	2106      	movs	r1, #6
 8000b88:	6938      	ldr	r0, [r7, #16]
 8000b8a:	f7ff fd27 	bl	80005dc <LCD_setCursor>
			LCD_write(LCD_I2C, 0b0001);
 8000b8e:	2101      	movs	r1, #1
 8000b90:	6938      	ldr	r0, [r7, #16]
 8000b92:	f7ff fdb8 	bl	8000706 <LCD_write>
			LCD_setCursor(LCD_I2C, 7, i);
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	2107      	movs	r1, #7
 8000b9e:	6938      	ldr	r0, [r7, #16]
 8000ba0:	f7ff fd1c 	bl	80005dc <LCD_setCursor>
			LCD_write(LCD_I2C, 0b0001);
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	6938      	ldr	r0, [r7, #16]
 8000ba8:	f7ff fdad 	bl	8000706 <LCD_write>
			LCD_setCursor(LCD_I2C, 8, i);
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	2108      	movs	r1, #8
 8000bb4:	6938      	ldr	r0, [r7, #16]
 8000bb6:	f7ff fd11 	bl	80005dc <LCD_setCursor>
			LCD_write(LCD_I2C, 0b0001);
 8000bba:	2101      	movs	r1, #1
 8000bbc:	6938      	ldr	r0, [r7, #16]
 8000bbe:	f7ff fda2 	bl	8000706 <LCD_write>
		for (i = 1; i < 4; i++) {
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	2b03      	cmp	r3, #3
 8000bcc:	dda1      	ble.n	8000b12 <LCD2+0x5e>
		}

		HAL_Delay(delayTime);
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 f9b1 	bl	8000f38 <HAL_Delay>
		for (i = 1; i < 4; i++) {
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	e00d      	b.n	8000bf8 <LCD2+0x144>
			LCD_setCursor(LCD_I2C, 1, i);
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	461a      	mov	r2, r3
 8000be2:	2101      	movs	r1, #1
 8000be4:	6938      	ldr	r0, [r7, #16]
 8000be6:	f7ff fcf9 	bl	80005dc <LCD_setCursor>
			LCD_I2C_printStr(LCD_I2C, "||||||||");
 8000bea:	491f      	ldr	r1, [pc, #124]	; (8000c68 <LCD2+0x1b4>)
 8000bec:	6938      	ldr	r0, [r7, #16]
 8000bee:	f7ff fc49 	bl	8000484 <LCD_I2C_printStr>
		for (i = 1; i < 4; i++) {
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	ddee      	ble.n	8000bdc <LCD2+0x128>
		}

		//LCD_backlight(LCD_I2C);

		HAL_Delay(delayTime);
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f999 	bl	8000f38 <HAL_Delay>
		for (i = 1; i < 4; i++) {
 8000c06:	2301      	movs	r3, #1
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	e00d      	b.n	8000c28 <LCD2+0x174>
			LCD_setCursor(LCD_I2C, 1, i);
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	461a      	mov	r2, r3
 8000c12:	2101      	movs	r1, #1
 8000c14:	6938      	ldr	r0, [r7, #16]
 8000c16:	f7ff fce1 	bl	80005dc <LCD_setCursor>
			LCD_I2C_printStr(LCD_I2C, "////////");
 8000c1a:	4914      	ldr	r1, [pc, #80]	; (8000c6c <LCD2+0x1b8>)
 8000c1c:	6938      	ldr	r0, [r7, #16]
 8000c1e:	f7ff fc31 	bl	8000484 <LCD_I2C_printStr>
		for (i = 1; i < 4; i++) {
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3301      	adds	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	2b03      	cmp	r3, #3
 8000c2c:	ddee      	ble.n	8000c0c <LCD2+0x158>
		}

		HAL_Delay(delayTime);
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f000 f981 	bl	8000f38 <HAL_Delay>
		for (i = 1; i < 4; i++) {
 8000c36:	2301      	movs	r3, #1
 8000c38:	617b      	str	r3, [r7, #20]
 8000c3a:	e00d      	b.n	8000c58 <LCD2+0x1a4>
			LCD_setCursor(LCD_I2C, 1, i);
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	461a      	mov	r2, r3
 8000c42:	2101      	movs	r1, #1
 8000c44:	6938      	ldr	r0, [r7, #16]
 8000c46:	f7ff fcc9 	bl	80005dc <LCD_setCursor>
			LCD_I2C_printStr(LCD_I2C, "--------");
 8000c4a:	4909      	ldr	r1, [pc, #36]	; (8000c70 <LCD2+0x1bc>)
 8000c4c:	6938      	ldr	r0, [r7, #16]
 8000c4e:	f7ff fc19 	bl	8000484 <LCD_I2C_printStr>
		for (i = 1; i < 4; i++) {
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	3301      	adds	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	ddee      	ble.n	8000c3c <LCD2+0x188>
	while (1) {
 8000c5e:	e751      	b.n	8000b04 <LCD2+0x50>
 8000c60:	080027b8 	.word	0x080027b8
 8000c64:	080027e8 	.word	0x080027e8
 8000c68:	080027c4 	.word	0x080027c4
 8000c6c:	080027d0 	.word	0x080027d0
 8000c70:	080027dc 	.word	0x080027dc

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <Error_Handler+0x8>
	...

08000c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_MspInit+0x5c>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <HAL_MspInit+0x5c>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6193      	str	r3, [r2, #24]
 8000c92:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_MspInit+0x5c>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <HAL_MspInit+0x5c>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <HAL_MspInit+0x5c>)
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	61d3      	str	r3, [r2, #28]
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_MspInit+0x5c>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_MspInit+0x60>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_MspInit+0x60>)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010000 	.word	0x40010000

08000ce4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a15      	ldr	r2, [pc, #84]	; (8000d54 <HAL_I2C_MspInit+0x70>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d123      	bne.n	8000d4c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <HAL_I2C_MspInit+0x74>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <HAL_I2C_MspInit+0x74>)
 8000d0a:	f043 0308 	orr.w	r3, r3, #8
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_I2C_MspInit+0x74>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0308 	and.w	r3, r3, #8
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d1c:	23c0      	movs	r3, #192	; 0xc0
 8000d1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d20:	2312      	movs	r3, #18
 8000d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480b      	ldr	r0, [pc, #44]	; (8000d5c <HAL_I2C_MspInit+0x78>)
 8000d30:	f000 fa0a 	bl	8001148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_I2C_MspInit+0x74>)
 8000d36:	69db      	ldr	r3, [r3, #28]
 8000d38:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <HAL_I2C_MspInit+0x74>)
 8000d3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d3e:	61d3      	str	r3, [r2, #28]
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <HAL_I2C_MspInit+0x74>)
 8000d42:	69db      	ldr	r3, [r3, #28]
 8000d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d4c:	bf00      	nop
 8000d4e:	3720      	adds	r7, #32
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40005400 	.word	0x40005400
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40010c00 	.word	0x40010c00

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <NMI_Handler+0x4>

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <MemManage_Handler+0x4>

08000d72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr

08000d8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr

08000d96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr

08000da2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da6:	f000 f8ab 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db8:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <_sbrk+0x5c>)
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <_sbrk+0x60>)
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <_sbrk+0x64>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <_sbrk+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d207      	bcs.n	8000df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de0:	f001 fcb2 	bl	8002748 <__errno>
 8000de4:	4603      	mov	r3, r0
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20005000 	.word	0x20005000
 8000e10:	00000400 	.word	0x00000400
 8000e14:	200000d0 	.word	0x200000d0
 8000e18:	20000220 	.word	0x20000220

08000e1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e28:	f7ff fff8 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e2c:	480b      	ldr	r0, [pc, #44]	; (8000e5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e2e:	490c      	ldr	r1, [pc, #48]	; (8000e60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e30:	4a0c      	ldr	r2, [pc, #48]	; (8000e64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e34:	e002      	b.n	8000e3c <LoopCopyDataInit>

08000e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3a:	3304      	adds	r3, #4

08000e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e40:	d3f9      	bcc.n	8000e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e42:	4a09      	ldr	r2, [pc, #36]	; (8000e68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e44:	4c09      	ldr	r4, [pc, #36]	; (8000e6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e48:	e001      	b.n	8000e4e <LoopFillZerobss>

08000e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e4c:	3204      	adds	r2, #4

08000e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e50:	d3fb      	bcc.n	8000e4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e52:	f001 fc7f 	bl	8002754 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e56:	f7ff fd5d 	bl	8000914 <main>
  bx lr
 8000e5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e64:	08002824 	.word	0x08002824
  ldr r2, =_sbss
 8000e68:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e6c:	20000220 	.word	0x20000220

08000e70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC1_2_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <HAL_Init+0x28>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <HAL_Init+0x28>)
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e84:	2003      	movs	r0, #3
 8000e86:	f000 f92b 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8a:	200f      	movs	r0, #15
 8000e8c:	f000 f808 	bl	8000ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e90:	f7ff fef6 	bl	8000c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40022000 	.word	0x40022000

08000ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_InitTick+0x54>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_InitTick+0x58>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f935 	bl	800112e <HAL_SYSTICK_Config>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00e      	b.n	8000eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d80a      	bhi.n	8000eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f000 f90b 	bl	80010f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee0:	4a06      	ldr	r2, [pc, #24]	; (8000efc <HAL_InitTick+0x5c>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e000      	b.n	8000eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	20000004 	.word	0x20000004

08000f00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <HAL_IncTick+0x1c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <HAL_IncTick+0x20>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a03      	ldr	r2, [pc, #12]	; (8000f20 <HAL_IncTick+0x20>)
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	200000d4 	.word	0x200000d4

08000f24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b02      	ldr	r3, [pc, #8]	; (8000f34 <HAL_GetTick+0x10>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	200000d4 	.word	0x200000d4

08000f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f40:	f7ff fff0 	bl	8000f24 <HAL_GetTick>
 8000f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f50:	d005      	beq.n	8000f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_Delay+0x44>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f5e:	bf00      	nop
 8000f60:	f7ff ffe0 	bl	8000f24 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d8f7      	bhi.n	8000f60 <HAL_Delay+0x28>
  {
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000008 	.word	0x20000008

08000f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb2:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	60d3      	str	r3, [r2, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	f003 0307 	and.w	r3, r3, #7
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	db0a      	blt.n	800100e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	490c      	ldr	r1, [pc, #48]	; (8001030 <__NVIC_SetPriority+0x4c>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	0112      	lsls	r2, r2, #4
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	440b      	add	r3, r1
 8001008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800100c:	e00a      	b.n	8001024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4908      	ldr	r1, [pc, #32]	; (8001034 <__NVIC_SetPriority+0x50>)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	3b04      	subs	r3, #4
 800101c:	0112      	lsls	r2, r2, #4
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	440b      	add	r3, r1
 8001022:	761a      	strb	r2, [r3, #24]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000e100 	.word	0xe000e100
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f1c3 0307 	rsb	r3, r3, #7
 8001052:	2b04      	cmp	r3, #4
 8001054:	bf28      	it	cs
 8001056:	2304      	movcs	r3, #4
 8001058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3304      	adds	r3, #4
 800105e:	2b06      	cmp	r3, #6
 8001060:	d902      	bls.n	8001068 <NVIC_EncodePriority+0x30>
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3b03      	subs	r3, #3
 8001066:	e000      	b.n	800106a <NVIC_EncodePriority+0x32>
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	f04f 32ff 	mov.w	r2, #4294967295
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	401a      	ands	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001080:	f04f 31ff 	mov.w	r1, #4294967295
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	43d9      	mvns	r1, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	4313      	orrs	r3, r2
         );
}
 8001092:	4618      	mov	r0, r3
 8001094:	3724      	adds	r7, #36	; 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ac:	d301      	bcc.n	80010b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00f      	b.n	80010d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <SysTick_Config+0x40>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ba:	210f      	movs	r1, #15
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f7ff ff90 	bl	8000fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <SysTick_Config+0x40>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <SysTick_Config+0x40>)
 80010cc:	2207      	movs	r2, #7
 80010ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	e000e010 	.word	0xe000e010

080010e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff49 	bl	8000f80 <__NVIC_SetPriorityGrouping>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001108:	f7ff ff5e 	bl	8000fc8 <__NVIC_GetPriorityGrouping>
 800110c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff ff90 	bl	8001038 <NVIC_EncodePriority>
 8001118:	4602      	mov	r2, r0
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff5f 	bl	8000fe4 <__NVIC_SetPriority>
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffb0 	bl	800109c <SysTick_Config>
 800113c:	4603      	mov	r3, r0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001148:	b480      	push	{r7}
 800114a:	b08b      	sub	sp, #44	; 0x2c
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115a:	e169      	b.n	8001430 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800115c:	2201      	movs	r2, #1
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	429a      	cmp	r2, r3
 8001176:	f040 8158 	bne.w	800142a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4a9a      	ldr	r2, [pc, #616]	; (80013e8 <HAL_GPIO_Init+0x2a0>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d05e      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 8001184:	4a98      	ldr	r2, [pc, #608]	; (80013e8 <HAL_GPIO_Init+0x2a0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d875      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 800118a:	4a98      	ldr	r2, [pc, #608]	; (80013ec <HAL_GPIO_Init+0x2a4>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d058      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 8001190:	4a96      	ldr	r2, [pc, #600]	; (80013ec <HAL_GPIO_Init+0x2a4>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d86f      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 8001196:	4a96      	ldr	r2, [pc, #600]	; (80013f0 <HAL_GPIO_Init+0x2a8>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d052      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 800119c:	4a94      	ldr	r2, [pc, #592]	; (80013f0 <HAL_GPIO_Init+0x2a8>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d869      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 80011a2:	4a94      	ldr	r2, [pc, #592]	; (80013f4 <HAL_GPIO_Init+0x2ac>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d04c      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 80011a8:	4a92      	ldr	r2, [pc, #584]	; (80013f4 <HAL_GPIO_Init+0x2ac>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d863      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 80011ae:	4a92      	ldr	r2, [pc, #584]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d046      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 80011b4:	4a90      	ldr	r2, [pc, #576]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d85d      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 80011ba:	2b12      	cmp	r3, #18
 80011bc:	d82a      	bhi.n	8001214 <HAL_GPIO_Init+0xcc>
 80011be:	2b12      	cmp	r3, #18
 80011c0:	d859      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 80011c2:	a201      	add	r2, pc, #4	; (adr r2, 80011c8 <HAL_GPIO_Init+0x80>)
 80011c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c8:	08001243 	.word	0x08001243
 80011cc:	0800121d 	.word	0x0800121d
 80011d0:	0800122f 	.word	0x0800122f
 80011d4:	08001271 	.word	0x08001271
 80011d8:	08001277 	.word	0x08001277
 80011dc:	08001277 	.word	0x08001277
 80011e0:	08001277 	.word	0x08001277
 80011e4:	08001277 	.word	0x08001277
 80011e8:	08001277 	.word	0x08001277
 80011ec:	08001277 	.word	0x08001277
 80011f0:	08001277 	.word	0x08001277
 80011f4:	08001277 	.word	0x08001277
 80011f8:	08001277 	.word	0x08001277
 80011fc:	08001277 	.word	0x08001277
 8001200:	08001277 	.word	0x08001277
 8001204:	08001277 	.word	0x08001277
 8001208:	08001277 	.word	0x08001277
 800120c:	08001225 	.word	0x08001225
 8001210:	08001239 	.word	0x08001239
 8001214:	4a79      	ldr	r2, [pc, #484]	; (80013fc <HAL_GPIO_Init+0x2b4>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d013      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800121a:	e02c      	b.n	8001276 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	623b      	str	r3, [r7, #32]
          break;
 8001222:	e029      	b.n	8001278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	3304      	adds	r3, #4
 800122a:	623b      	str	r3, [r7, #32]
          break;
 800122c:	e024      	b.n	8001278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	3308      	adds	r3, #8
 8001234:	623b      	str	r3, [r7, #32]
          break;
 8001236:	e01f      	b.n	8001278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	330c      	adds	r3, #12
 800123e:	623b      	str	r3, [r7, #32]
          break;
 8001240:	e01a      	b.n	8001278 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d102      	bne.n	8001250 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800124a:	2304      	movs	r3, #4
 800124c:	623b      	str	r3, [r7, #32]
          break;
 800124e:	e013      	b.n	8001278 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d105      	bne.n	8001264 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001258:	2308      	movs	r3, #8
 800125a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	69fa      	ldr	r2, [r7, #28]
 8001260:	611a      	str	r2, [r3, #16]
          break;
 8001262:	e009      	b.n	8001278 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001264:	2308      	movs	r3, #8
 8001266:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69fa      	ldr	r2, [r7, #28]
 800126c:	615a      	str	r2, [r3, #20]
          break;
 800126e:	e003      	b.n	8001278 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
          break;
 8001274:	e000      	b.n	8001278 <HAL_GPIO_Init+0x130>
          break;
 8001276:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	2bff      	cmp	r3, #255	; 0xff
 800127c:	d801      	bhi.n	8001282 <HAL_GPIO_Init+0x13a>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	e001      	b.n	8001286 <HAL_GPIO_Init+0x13e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3304      	adds	r3, #4
 8001286:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	2bff      	cmp	r3, #255	; 0xff
 800128c:	d802      	bhi.n	8001294 <HAL_GPIO_Init+0x14c>
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	e002      	b.n	800129a <HAL_GPIO_Init+0x152>
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	3b08      	subs	r3, #8
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	210f      	movs	r1, #15
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	401a      	ands	r2, r3
 80012ac:	6a39      	ldr	r1, [r7, #32]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	fa01 f303 	lsl.w	r3, r1, r3
 80012b4:	431a      	orrs	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 80b1 	beq.w	800142a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012c8:	4b4d      	ldr	r3, [pc, #308]	; (8001400 <HAL_GPIO_Init+0x2b8>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a4c      	ldr	r2, [pc, #304]	; (8001400 <HAL_GPIO_Init+0x2b8>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b4a      	ldr	r3, [pc, #296]	; (8001400 <HAL_GPIO_Init+0x2b8>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012e0:	4a48      	ldr	r2, [pc, #288]	; (8001404 <HAL_GPIO_Init+0x2bc>)
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	3302      	adds	r3, #2
 80012e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	220f      	movs	r2, #15
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	4013      	ands	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a40      	ldr	r2, [pc, #256]	; (8001408 <HAL_GPIO_Init+0x2c0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d013      	beq.n	8001334 <HAL_GPIO_Init+0x1ec>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a3f      	ldr	r2, [pc, #252]	; (800140c <HAL_GPIO_Init+0x2c4>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d00d      	beq.n	8001330 <HAL_GPIO_Init+0x1e8>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a3e      	ldr	r2, [pc, #248]	; (8001410 <HAL_GPIO_Init+0x2c8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d007      	beq.n	800132c <HAL_GPIO_Init+0x1e4>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a3d      	ldr	r2, [pc, #244]	; (8001414 <HAL_GPIO_Init+0x2cc>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d101      	bne.n	8001328 <HAL_GPIO_Init+0x1e0>
 8001324:	2303      	movs	r3, #3
 8001326:	e006      	b.n	8001336 <HAL_GPIO_Init+0x1ee>
 8001328:	2304      	movs	r3, #4
 800132a:	e004      	b.n	8001336 <HAL_GPIO_Init+0x1ee>
 800132c:	2302      	movs	r3, #2
 800132e:	e002      	b.n	8001336 <HAL_GPIO_Init+0x1ee>
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <HAL_GPIO_Init+0x1ee>
 8001334:	2300      	movs	r3, #0
 8001336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001338:	f002 0203 	and.w	r2, r2, #3
 800133c:	0092      	lsls	r2, r2, #2
 800133e:	4093      	lsls	r3, r2
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001346:	492f      	ldr	r1, [pc, #188]	; (8001404 <HAL_GPIO_Init+0x2bc>)
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	089b      	lsrs	r3, r3, #2
 800134c:	3302      	adds	r3, #2
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001360:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	492c      	ldr	r1, [pc, #176]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	608b      	str	r3, [r1, #8]
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800136e:	4b2a      	ldr	r3, [pc, #168]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	43db      	mvns	r3, r3
 8001376:	4928      	ldr	r1, [pc, #160]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001378:	4013      	ands	r3, r2
 800137a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d006      	beq.n	8001396 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001388:	4b23      	ldr	r3, [pc, #140]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	4922      	ldr	r1, [pc, #136]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	60cb      	str	r3, [r1, #12]
 8001394:	e006      	b.n	80013a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001396:	4b20      	ldr	r3, [pc, #128]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001398:	68da      	ldr	r2, [r3, #12]
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	43db      	mvns	r3, r3
 800139e:	491e      	ldr	r1, [pc, #120]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d006      	beq.n	80013be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	4918      	ldr	r1, [pc, #96]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
 80013bc:	e006      	b.n	80013cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	4914      	ldr	r1, [pc, #80]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d021      	beq.n	800141c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	490e      	ldr	r1, [pc, #56]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	600b      	str	r3, [r1, #0]
 80013e4:	e021      	b.n	800142a <HAL_GPIO_Init+0x2e2>
 80013e6:	bf00      	nop
 80013e8:	10320000 	.word	0x10320000
 80013ec:	10310000 	.word	0x10310000
 80013f0:	10220000 	.word	0x10220000
 80013f4:	10210000 	.word	0x10210000
 80013f8:	10120000 	.word	0x10120000
 80013fc:	10110000 	.word	0x10110000
 8001400:	40021000 	.word	0x40021000
 8001404:	40010000 	.word	0x40010000
 8001408:	40010800 	.word	0x40010800
 800140c:	40010c00 	.word	0x40010c00
 8001410:	40011000 	.word	0x40011000
 8001414:	40011400 	.word	0x40011400
 8001418:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_GPIO_Init+0x304>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	43db      	mvns	r3, r3
 8001424:	4909      	ldr	r1, [pc, #36]	; (800144c <HAL_GPIO_Init+0x304>)
 8001426:	4013      	ands	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	3301      	adds	r3, #1
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	fa22 f303 	lsr.w	r3, r2, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	f47f ae8e 	bne.w	800115c <HAL_GPIO_Init+0x14>
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	372c      	adds	r7, #44	; 0x2c
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	40010400 	.word	0x40010400

08001450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	807b      	strh	r3, [r7, #2]
 800145c:	4613      	mov	r3, r2
 800145e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001460:	787b      	ldrb	r3, [r7, #1]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001466:	887a      	ldrh	r2, [r7, #2]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800146c:	e003      	b.n	8001476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800146e:	887b      	ldrh	r3, [r7, #2]
 8001470:	041a      	lsls	r2, r3, #16
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	611a      	str	r2, [r3, #16]
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e12b      	b.n	80016ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d106      	bne.n	80014ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fc1c 	bl	8000ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2224      	movs	r2, #36	; 0x24
 80014b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0201 	bic.w	r2, r2, #1
 80014c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014e4:	f001 f832 	bl	800254c <HAL_RCC_GetPCLK1Freq>
 80014e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	4a81      	ldr	r2, [pc, #516]	; (80016f4 <HAL_I2C_Init+0x274>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d807      	bhi.n	8001504 <HAL_I2C_Init+0x84>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4a80      	ldr	r2, [pc, #512]	; (80016f8 <HAL_I2C_Init+0x278>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	bf94      	ite	ls
 80014fc:	2301      	movls	r3, #1
 80014fe:	2300      	movhi	r3, #0
 8001500:	b2db      	uxtb	r3, r3
 8001502:	e006      	b.n	8001512 <HAL_I2C_Init+0x92>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4a7d      	ldr	r2, [pc, #500]	; (80016fc <HAL_I2C_Init+0x27c>)
 8001508:	4293      	cmp	r3, r2
 800150a:	bf94      	ite	ls
 800150c:	2301      	movls	r3, #1
 800150e:	2300      	movhi	r3, #0
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e0e7      	b.n	80016ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4a78      	ldr	r2, [pc, #480]	; (8001700 <HAL_I2C_Init+0x280>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	0c9b      	lsrs	r3, r3, #18
 8001524:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	430a      	orrs	r2, r1
 8001538:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	4a6a      	ldr	r2, [pc, #424]	; (80016f4 <HAL_I2C_Init+0x274>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d802      	bhi.n	8001554 <HAL_I2C_Init+0xd4>
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	3301      	adds	r3, #1
 8001552:	e009      	b.n	8001568 <HAL_I2C_Init+0xe8>
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	4a69      	ldr	r2, [pc, #420]	; (8001704 <HAL_I2C_Init+0x284>)
 8001560:	fba2 2303 	umull	r2, r3, r2, r3
 8001564:	099b      	lsrs	r3, r3, #6
 8001566:	3301      	adds	r3, #1
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6812      	ldr	r2, [r2, #0]
 800156c:	430b      	orrs	r3, r1
 800156e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800157a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	495c      	ldr	r1, [pc, #368]	; (80016f4 <HAL_I2C_Init+0x274>)
 8001584:	428b      	cmp	r3, r1
 8001586:	d819      	bhi.n	80015bc <HAL_I2C_Init+0x13c>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	1e59      	subs	r1, r3, #1
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	fbb1 f3f3 	udiv	r3, r1, r3
 8001596:	1c59      	adds	r1, r3, #1
 8001598:	f640 73fc 	movw	r3, #4092	; 0xffc
 800159c:	400b      	ands	r3, r1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00a      	beq.n	80015b8 <HAL_I2C_Init+0x138>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	1e59      	subs	r1, r3, #1
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80015b0:	3301      	adds	r3, #1
 80015b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b6:	e051      	b.n	800165c <HAL_I2C_Init+0x1dc>
 80015b8:	2304      	movs	r3, #4
 80015ba:	e04f      	b.n	800165c <HAL_I2C_Init+0x1dc>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d111      	bne.n	80015e8 <HAL_I2C_Init+0x168>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	1e58      	subs	r0, r3, #1
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6859      	ldr	r1, [r3, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	440b      	add	r3, r1
 80015d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015d6:	3301      	adds	r3, #1
 80015d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015dc:	2b00      	cmp	r3, #0
 80015de:	bf0c      	ite	eq
 80015e0:	2301      	moveq	r3, #1
 80015e2:	2300      	movne	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	e012      	b.n	800160e <HAL_I2C_Init+0x18e>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	1e58      	subs	r0, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6859      	ldr	r1, [r3, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	0099      	lsls	r1, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80015fe:	3301      	adds	r3, #1
 8001600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001604:	2b00      	cmp	r3, #0
 8001606:	bf0c      	ite	eq
 8001608:	2301      	moveq	r3, #1
 800160a:	2300      	movne	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_I2C_Init+0x196>
 8001612:	2301      	movs	r3, #1
 8001614:	e022      	b.n	800165c <HAL_I2C_Init+0x1dc>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10e      	bne.n	800163c <HAL_I2C_Init+0x1bc>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1e58      	subs	r0, r3, #1
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6859      	ldr	r1, [r3, #4]
 8001626:	460b      	mov	r3, r1
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	440b      	add	r3, r1
 800162c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001630:	3301      	adds	r3, #1
 8001632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800163a:	e00f      	b.n	800165c <HAL_I2C_Init+0x1dc>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	1e58      	subs	r0, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	0099      	lsls	r1, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001652:	3301      	adds	r3, #1
 8001654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001658:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	6809      	ldr	r1, [r1, #0]
 8001660:	4313      	orrs	r3, r2
 8001662:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69da      	ldr	r2, [r3, #28]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800168a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6911      	ldr	r1, [r2, #16]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	68d2      	ldr	r2, [r2, #12]
 8001696:	4311      	orrs	r1, r2
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	430b      	orrs	r3, r1
 800169e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695a      	ldr	r2, [r3, #20]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0201 	orr.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2220      	movs	r2, #32
 80016d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	000186a0 	.word	0x000186a0
 80016f8:	001e847f 	.word	0x001e847f
 80016fc:	003d08ff 	.word	0x003d08ff
 8001700:	431bde83 	.word	0x431bde83
 8001704:	10624dd3 	.word	0x10624dd3

08001708 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af02      	add	r7, sp, #8
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	461a      	mov	r2, r3
 8001714:	460b      	mov	r3, r1
 8001716:	817b      	strh	r3, [r7, #10]
 8001718:	4613      	mov	r3, r2
 800171a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff fc02 	bl	8000f24 <HAL_GetTick>
 8001720:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b20      	cmp	r3, #32
 800172c:	f040 80e0 	bne.w	80018f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2319      	movs	r3, #25
 8001736:	2201      	movs	r2, #1
 8001738:	4970      	ldr	r1, [pc, #448]	; (80018fc <HAL_I2C_Master_Transmit+0x1f4>)
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 f964 	bl	8001a08 <I2C_WaitOnFlagUntilTimeout>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001746:	2302      	movs	r3, #2
 8001748:	e0d3      	b.n	80018f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001750:	2b01      	cmp	r3, #1
 8001752:	d101      	bne.n	8001758 <HAL_I2C_Master_Transmit+0x50>
 8001754:	2302      	movs	r3, #2
 8001756:	e0cc      	b.n	80018f2 <HAL_I2C_Master_Transmit+0x1ea>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b01      	cmp	r3, #1
 800176c:	d007      	beq.n	800177e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f042 0201 	orr.w	r2, r2, #1
 800177c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800178c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2221      	movs	r2, #33	; 0x21
 8001792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2210      	movs	r2, #16
 800179a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	893a      	ldrh	r2, [r7, #8]
 80017ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4a50      	ldr	r2, [pc, #320]	; (8001900 <HAL_I2C_Master_Transmit+0x1f8>)
 80017be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017c0:	8979      	ldrh	r1, [r7, #10]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	6a3a      	ldr	r2, [r7, #32]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 f89c 	bl	8001904 <I2C_MasterRequestWrite>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e08d      	b.n	80018f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017ec:	e066      	b.n	80018bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	6a39      	ldr	r1, [r7, #32]
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 fa22 	bl	8001c3c <I2C_WaitOnTXEFlagUntilTimeout>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00d      	beq.n	800181a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	2b04      	cmp	r3, #4
 8001804:	d107      	bne.n	8001816 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001814:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e06b      	b.n	80018f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	781a      	ldrb	r2, [r3, #0]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001834:	b29b      	uxth	r3, r3
 8001836:	3b01      	subs	r3, #1
 8001838:	b29a      	uxth	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001842:	3b01      	subs	r3, #1
 8001844:	b29a      	uxth	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b04      	cmp	r3, #4
 8001856:	d11b      	bne.n	8001890 <HAL_I2C_Master_Transmit+0x188>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185c:	2b00      	cmp	r3, #0
 800185e:	d017      	beq.n	8001890 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	781a      	ldrb	r2, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800187a:	b29b      	uxth	r3, r3
 800187c:	3b01      	subs	r3, #1
 800187e:	b29a      	uxth	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001888:	3b01      	subs	r3, #1
 800188a:	b29a      	uxth	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	6a39      	ldr	r1, [r7, #32]
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f000 fa19 	bl	8001ccc <I2C_WaitOnBTFFlagUntilTimeout>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00d      	beq.n	80018bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d107      	bne.n	80018b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e01a      	b.n	80018f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d194      	bne.n	80017ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2220      	movs	r2, #32
 80018d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	e000      	b.n	80018f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80018f0:	2302      	movs	r3, #2
  }
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	00100002 	.word	0x00100002
 8001900:	ffff0000 	.word	0xffff0000

08001904 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af02      	add	r7, sp, #8
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	460b      	mov	r3, r1
 8001912:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	2b08      	cmp	r3, #8
 800191e:	d006      	beq.n	800192e <I2C_MasterRequestWrite+0x2a>
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d003      	beq.n	800192e <I2C_MasterRequestWrite+0x2a>
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800192c:	d108      	bne.n	8001940 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	e00b      	b.n	8001958 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	2b12      	cmp	r3, #18
 8001946:	d107      	bne.n	8001958 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001956:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f000 f84f 	bl	8001a08 <I2C_WaitOnFlagUntilTimeout>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00d      	beq.n	800198c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800197e:	d103      	bne.n	8001988 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001986:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e035      	b.n	80019f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001994:	d108      	bne.n	80019a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001996:	897b      	ldrh	r3, [r7, #10]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	461a      	mov	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80019a4:	611a      	str	r2, [r3, #16]
 80019a6:	e01b      	b.n	80019e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019a8:	897b      	ldrh	r3, [r7, #10]
 80019aa:	11db      	asrs	r3, r3, #7
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	f003 0306 	and.w	r3, r3, #6
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	f063 030f 	orn	r3, r3, #15
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	490e      	ldr	r1, [pc, #56]	; (8001a00 <I2C_MasterRequestWrite+0xfc>)
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 f898 	bl	8001afc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e010      	b.n	80019f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019d6:	897b      	ldrh	r3, [r7, #10]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	4907      	ldr	r1, [pc, #28]	; (8001a04 <I2C_MasterRequestWrite+0x100>)
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 f888 	bl	8001afc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	00010008 	.word	0x00010008
 8001a04:	00010002 	.word	0x00010002

08001a08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	4613      	mov	r3, r2
 8001a16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a18:	e048      	b.n	8001aac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a20:	d044      	beq.n	8001aac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a22:	f7ff fa7f 	bl	8000f24 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d302      	bcc.n	8001a38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d139      	bne.n	8001aac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	0c1b      	lsrs	r3, r3, #16
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d10d      	bne.n	8001a5e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	43da      	mvns	r2, r3
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	bf0c      	ite	eq
 8001a54:	2301      	moveq	r3, #1
 8001a56:	2300      	movne	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	e00c      	b.n	8001a78 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	43da      	mvns	r2, r3
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf0c      	ite	eq
 8001a70:	2301      	moveq	r3, #1
 8001a72:	2300      	movne	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d116      	bne.n	8001aac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2220      	movs	r2, #32
 8001a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	f043 0220 	orr.w	r2, r3, #32
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e023      	b.n	8001af4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	0c1b      	lsrs	r3, r3, #16
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d10d      	bne.n	8001ad2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	43da      	mvns	r2, r3
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	bf0c      	ite	eq
 8001ac8:	2301      	moveq	r3, #1
 8001aca:	2300      	movne	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	461a      	mov	r2, r3
 8001ad0:	e00c      	b.n	8001aec <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	43da      	mvns	r2, r3
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	4013      	ands	r3, r2
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	bf0c      	ite	eq
 8001ae4:	2301      	moveq	r3, #1
 8001ae6:	2300      	movne	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	461a      	mov	r2, r3
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d093      	beq.n	8001a1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
 8001b08:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b0a:	e071      	b.n	8001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1a:	d123      	bne.n	8001b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b2a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	f043 0204 	orr.w	r2, r3, #4
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e067      	b.n	8001c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b6a:	d041      	beq.n	8001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b6c:	f7ff f9da 	bl	8000f24 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d302      	bcc.n	8001b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d136      	bne.n	8001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	0c1b      	lsrs	r3, r3, #16
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d10c      	bne.n	8001ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	43da      	mvns	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	4013      	ands	r3, r2
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	bf14      	ite	ne
 8001b9e:	2301      	movne	r3, #1
 8001ba0:	2300      	moveq	r3, #0
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	e00b      	b.n	8001bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	43da      	mvns	r2, r3
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	bf14      	ite	ne
 8001bb8:	2301      	movne	r3, #1
 8001bba:	2300      	moveq	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d016      	beq.n	8001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	f043 0220 	orr.w	r2, r3, #32
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e021      	b.n	8001c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	0c1b      	lsrs	r3, r3, #16
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d10c      	bne.n	8001c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	43da      	mvns	r2, r3
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	4013      	ands	r3, r2
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf14      	ite	ne
 8001c0c:	2301      	movne	r3, #1
 8001c0e:	2300      	moveq	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	e00b      	b.n	8001c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bf14      	ite	ne
 8001c26:	2301      	movne	r3, #1
 8001c28:	2300      	moveq	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f47f af6d 	bne.w	8001b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c48:	e034      	b.n	8001cb4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 f886 	bl	8001d5c <I2C_IsAcknowledgeFailed>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e034      	b.n	8001cc4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c60:	d028      	beq.n	8001cb4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c62:	f7ff f95f 	bl	8000f24 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d302      	bcc.n	8001c78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d11d      	bne.n	8001cb4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c82:	2b80      	cmp	r3, #128	; 0x80
 8001c84:	d016      	beq.n	8001cb4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	f043 0220 	orr.w	r2, r3, #32
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e007      	b.n	8001cc4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cbe:	2b80      	cmp	r3, #128	; 0x80
 8001cc0:	d1c3      	bne.n	8001c4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cd8:	e034      	b.n	8001d44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 f83e 	bl	8001d5c <I2C_IsAcknowledgeFailed>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e034      	b.n	8001d54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf0:	d028      	beq.n	8001d44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf2:	f7ff f917 	bl	8000f24 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d302      	bcc.n	8001d08 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d11d      	bne.n	8001d44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d016      	beq.n	8001d44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	f043 0220 	orr.w	r2, r3, #32
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e007      	b.n	8001d54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d1c3      	bne.n	8001cda <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d72:	d11b      	bne.n	8001dac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2220      	movs	r2, #32
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	f043 0204 	orr.w	r2, r3, #4
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e272      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 8087 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dd8:	4b92      	ldr	r3, [pc, #584]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d00c      	beq.n	8001dfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001de4:	4b8f      	ldr	r3, [pc, #572]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 030c 	and.w	r3, r3, #12
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d112      	bne.n	8001e16 <HAL_RCC_OscConfig+0x5e>
 8001df0:	4b8c      	ldr	r3, [pc, #560]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dfc:	d10b      	bne.n	8001e16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfe:	4b89      	ldr	r3, [pc, #548]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d06c      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x12c>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d168      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e24c      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e1e:	d106      	bne.n	8001e2e <HAL_RCC_OscConfig+0x76>
 8001e20:	4b80      	ldr	r3, [pc, #512]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a7f      	ldr	r2, [pc, #508]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	e02e      	b.n	8001e8c <HAL_RCC_OscConfig+0xd4>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x98>
 8001e36:	4b7b      	ldr	r3, [pc, #492]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a7a      	ldr	r2, [pc, #488]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	4b78      	ldr	r3, [pc, #480]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a77      	ldr	r2, [pc, #476]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	e01d      	b.n	8001e8c <HAL_RCC_OscConfig+0xd4>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0xbc>
 8001e5a:	4b72      	ldr	r3, [pc, #456]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a71      	ldr	r2, [pc, #452]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	4b6f      	ldr	r3, [pc, #444]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a6e      	ldr	r2, [pc, #440]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e00b      	b.n	8001e8c <HAL_RCC_OscConfig+0xd4>
 8001e74:	4b6b      	ldr	r3, [pc, #428]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a6a      	ldr	r2, [pc, #424]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	4b68      	ldr	r3, [pc, #416]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a67      	ldr	r2, [pc, #412]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d013      	beq.n	8001ebc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7ff f846 	bl	8000f24 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e9c:	f7ff f842 	bl	8000f24 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b64      	cmp	r3, #100	; 0x64
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e200      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eae:	4b5d      	ldr	r3, [pc, #372]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0xe4>
 8001eba:	e014      	b.n	8001ee6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f832 	bl	8000f24 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec4:	f7ff f82e 	bl	8000f24 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b64      	cmp	r3, #100	; 0x64
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e1ec      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed6:	4b53      	ldr	r3, [pc, #332]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x10c>
 8001ee2:	e000      	b.n	8001ee6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d063      	beq.n	8001fba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ef2:	4b4c      	ldr	r3, [pc, #304]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00b      	beq.n	8001f16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001efe:	4b49      	ldr	r3, [pc, #292]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d11c      	bne.n	8001f44 <HAL_RCC_OscConfig+0x18c>
 8001f0a:	4b46      	ldr	r3, [pc, #280]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d116      	bne.n	8001f44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f16:	4b43      	ldr	r3, [pc, #268]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d005      	beq.n	8001f2e <HAL_RCC_OscConfig+0x176>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d001      	beq.n	8001f2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e1c0      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2e:	4b3d      	ldr	r3, [pc, #244]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4939      	ldr	r1, [pc, #228]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f42:	e03a      	b.n	8001fba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d020      	beq.n	8001f8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f4c:	4b36      	ldr	r3, [pc, #216]	; (8002028 <HAL_RCC_OscConfig+0x270>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7fe ffe7 	bl	8000f24 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5a:	f7fe ffe3 	bl	8000f24 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e1a1      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6c:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f78:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4927      	ldr	r1, [pc, #156]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	600b      	str	r3, [r1, #0]
 8001f8c:	e015      	b.n	8001fba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f8e:	4b26      	ldr	r3, [pc, #152]	; (8002028 <HAL_RCC_OscConfig+0x270>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7fe ffc6 	bl	8000f24 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9c:	f7fe ffc2 	bl	8000f24 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e180      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fae:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d03a      	beq.n	800203c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d019      	beq.n	8002002 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fce:	4b17      	ldr	r3, [pc, #92]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd4:	f7fe ffa6 	bl	8000f24 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fdc:	f7fe ffa2 	bl	8000f24 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e160      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fee:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	f000 faba 	bl	8002574 <RCC_Delay>
 8002000:	e01c      	b.n	800203c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002002:	4b0a      	ldr	r3, [pc, #40]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002008:	f7fe ff8c 	bl	8000f24 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800200e:	e00f      	b.n	8002030 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002010:	f7fe ff88 	bl	8000f24 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d908      	bls.n	8002030 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e146      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000
 8002028:	42420000 	.word	0x42420000
 800202c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002030:	4b92      	ldr	r3, [pc, #584]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1e9      	bne.n	8002010 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80a6 	beq.w	8002196 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204e:	4b8b      	ldr	r3, [pc, #556]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10d      	bne.n	8002076 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	4b88      	ldr	r3, [pc, #544]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	4a87      	ldr	r2, [pc, #540]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002064:	61d3      	str	r3, [r2, #28]
 8002066:	4b85      	ldr	r3, [pc, #532]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002072:	2301      	movs	r3, #1
 8002074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002076:	4b82      	ldr	r3, [pc, #520]	; (8002280 <HAL_RCC_OscConfig+0x4c8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d118      	bne.n	80020b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002082:	4b7f      	ldr	r3, [pc, #508]	; (8002280 <HAL_RCC_OscConfig+0x4c8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a7e      	ldr	r2, [pc, #504]	; (8002280 <HAL_RCC_OscConfig+0x4c8>)
 8002088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800208e:	f7fe ff49 	bl	8000f24 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002096:	f7fe ff45 	bl	8000f24 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b64      	cmp	r3, #100	; 0x64
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e103      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a8:	4b75      	ldr	r3, [pc, #468]	; (8002280 <HAL_RCC_OscConfig+0x4c8>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d106      	bne.n	80020ca <HAL_RCC_OscConfig+0x312>
 80020bc:	4b6f      	ldr	r3, [pc, #444]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	4a6e      	ldr	r2, [pc, #440]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	6213      	str	r3, [r2, #32]
 80020c8:	e02d      	b.n	8002126 <HAL_RCC_OscConfig+0x36e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10c      	bne.n	80020ec <HAL_RCC_OscConfig+0x334>
 80020d2:	4b6a      	ldr	r3, [pc, #424]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	4a69      	ldr	r2, [pc, #420]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	6213      	str	r3, [r2, #32]
 80020de:	4b67      	ldr	r3, [pc, #412]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4a66      	ldr	r2, [pc, #408]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	f023 0304 	bic.w	r3, r3, #4
 80020e8:	6213      	str	r3, [r2, #32]
 80020ea:	e01c      	b.n	8002126 <HAL_RCC_OscConfig+0x36e>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b05      	cmp	r3, #5
 80020f2:	d10c      	bne.n	800210e <HAL_RCC_OscConfig+0x356>
 80020f4:	4b61      	ldr	r3, [pc, #388]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	4a60      	ldr	r2, [pc, #384]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	6213      	str	r3, [r2, #32]
 8002100:	4b5e      	ldr	r3, [pc, #376]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	4a5d      	ldr	r2, [pc, #372]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6213      	str	r3, [r2, #32]
 800210c:	e00b      	b.n	8002126 <HAL_RCC_OscConfig+0x36e>
 800210e:	4b5b      	ldr	r3, [pc, #364]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	4a5a      	ldr	r2, [pc, #360]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	6213      	str	r3, [r2, #32]
 800211a:	4b58      	ldr	r3, [pc, #352]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	4a57      	ldr	r2, [pc, #348]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002120:	f023 0304 	bic.w	r3, r3, #4
 8002124:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d015      	beq.n	800215a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212e:	f7fe fef9 	bl	8000f24 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002134:	e00a      	b.n	800214c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7fe fef5 	bl	8000f24 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	; 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e0b1      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214c:	4b4b      	ldr	r3, [pc, #300]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0ee      	beq.n	8002136 <HAL_RCC_OscConfig+0x37e>
 8002158:	e014      	b.n	8002184 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215a:	f7fe fee3 	bl	8000f24 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002160:	e00a      	b.n	8002178 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002162:	f7fe fedf 	bl	8000f24 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002170:	4293      	cmp	r3, r2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e09b      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002178:	4b40      	ldr	r3, [pc, #256]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1ee      	bne.n	8002162 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002184:	7dfb      	ldrb	r3, [r7, #23]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d105      	bne.n	8002196 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218a:	4b3c      	ldr	r3, [pc, #240]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	4a3b      	ldr	r2, [pc, #236]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002194:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 8087 	beq.w	80022ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a0:	4b36      	ldr	r3, [pc, #216]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d061      	beq.n	8002270 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d146      	bne.n	8002242 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b4:	4b33      	ldr	r3, [pc, #204]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ba:	f7fe feb3 	bl	8000f24 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c2:	f7fe feaf 	bl	8000f24 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e06d      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d4:	4b29      	ldr	r3, [pc, #164]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f0      	bne.n	80021c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e8:	d108      	bne.n	80021fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ea:	4b24      	ldr	r3, [pc, #144]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	4921      	ldr	r1, [pc, #132]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021fc:	4b1f      	ldr	r3, [pc, #124]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a19      	ldr	r1, [r3, #32]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	430b      	orrs	r3, r1
 800220e:	491b      	ldr	r1, [pc, #108]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002214:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221a:	f7fe fe83 	bl	8000f24 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002222:	f7fe fe7f 	bl	8000f24 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e03d      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x46a>
 8002240:	e035      	b.n	80022ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7fe fe6c 	bl	8000f24 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002250:	f7fe fe68 	bl	8000f24 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e026      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_RCC_OscConfig+0x4c4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x498>
 800226e:	e01e      	b.n	80022ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d107      	bne.n	8002288 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e019      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
 800227c:	40021000 	.word	0x40021000
 8002280:	40007000 	.word	0x40007000
 8002284:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002288:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_RCC_OscConfig+0x500>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	429a      	cmp	r2, r3
 800229a:	d106      	bne.n	80022aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d001      	beq.n	80022ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000

080022bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0d0      	b.n	8002472 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022d0:	4b6a      	ldr	r3, [pc, #424]	; (800247c <HAL_RCC_ClockConfig+0x1c0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d910      	bls.n	8002300 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022de:	4b67      	ldr	r3, [pc, #412]	; (800247c <HAL_RCC_ClockConfig+0x1c0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 0207 	bic.w	r2, r3, #7
 80022e6:	4965      	ldr	r1, [pc, #404]	; (800247c <HAL_RCC_ClockConfig+0x1c0>)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ee:	4b63      	ldr	r3, [pc, #396]	; (800247c <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d001      	beq.n	8002300 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0b8      	b.n	8002472 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d020      	beq.n	800234e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002318:	4b59      	ldr	r3, [pc, #356]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	4a58      	ldr	r2, [pc, #352]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002322:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002330:	4b53      	ldr	r3, [pc, #332]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4a52      	ldr	r2, [pc, #328]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800233a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800233c:	4b50      	ldr	r3, [pc, #320]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	494d      	ldr	r1, [pc, #308]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	4313      	orrs	r3, r2
 800234c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d040      	beq.n	80023dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d107      	bne.n	8002372 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	4b47      	ldr	r3, [pc, #284]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d115      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e07f      	b.n	8002472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d107      	bne.n	800238a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237a:	4b41      	ldr	r3, [pc, #260]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d109      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e073      	b.n	8002472 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238a:	4b3d      	ldr	r3, [pc, #244]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e06b      	b.n	8002472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800239a:	4b39      	ldr	r3, [pc, #228]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f023 0203 	bic.w	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4936      	ldr	r1, [pc, #216]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ac:	f7fe fdba 	bl	8000f24 <HAL_GetTick>
 80023b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b2:	e00a      	b.n	80023ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b4:	f7fe fdb6 	bl	8000f24 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e053      	b.n	8002472 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	4b2d      	ldr	r3, [pc, #180]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 020c 	and.w	r2, r3, #12
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	429a      	cmp	r2, r3
 80023da:	d1eb      	bne.n	80023b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023dc:	4b27      	ldr	r3, [pc, #156]	; (800247c <HAL_RCC_ClockConfig+0x1c0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d210      	bcs.n	800240c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b24      	ldr	r3, [pc, #144]	; (800247c <HAL_RCC_ClockConfig+0x1c0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 0207 	bic.w	r2, r3, #7
 80023f2:	4922      	ldr	r1, [pc, #136]	; (800247c <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fa:	4b20      	ldr	r3, [pc, #128]	; (800247c <HAL_RCC_ClockConfig+0x1c0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e032      	b.n	8002472 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002418:	4b19      	ldr	r3, [pc, #100]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4916      	ldr	r1, [pc, #88]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	4313      	orrs	r3, r2
 8002428:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d009      	beq.n	800244a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002436:	4b12      	ldr	r3, [pc, #72]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	490e      	ldr	r1, [pc, #56]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	4313      	orrs	r3, r2
 8002448:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800244a:	f000 f821 	bl	8002490 <HAL_RCC_GetSysClockFreq>
 800244e:	4602      	mov	r2, r0
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	490a      	ldr	r1, [pc, #40]	; (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 800245c:	5ccb      	ldrb	r3, [r1, r3]
 800245e:	fa22 f303 	lsr.w	r3, r2, r3
 8002462:	4a09      	ldr	r2, [pc, #36]	; (8002488 <HAL_RCC_ClockConfig+0x1cc>)
 8002464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <HAL_RCC_ClockConfig+0x1d0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe fd18 	bl	8000ea0 <HAL_InitTick>

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40022000 	.word	0x40022000
 8002480:	40021000 	.word	0x40021000
 8002484:	080027f0 	.word	0x080027f0
 8002488:	20000000 	.word	0x20000000
 800248c:	20000004 	.word	0x20000004

08002490 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	2300      	movs	r3, #0
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024aa:	4b1e      	ldr	r3, [pc, #120]	; (8002524 <HAL_RCC_GetSysClockFreq+0x94>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d002      	beq.n	80024c0 <HAL_RCC_GetSysClockFreq+0x30>
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d003      	beq.n	80024c6 <HAL_RCC_GetSysClockFreq+0x36>
 80024be:	e027      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024c0:	4b19      	ldr	r3, [pc, #100]	; (8002528 <HAL_RCC_GetSysClockFreq+0x98>)
 80024c2:	613b      	str	r3, [r7, #16]
      break;
 80024c4:	e027      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	0c9b      	lsrs	r3, r3, #18
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	4a17      	ldr	r2, [pc, #92]	; (800252c <HAL_RCC_GetSysClockFreq+0x9c>)
 80024d0:	5cd3      	ldrb	r3, [r2, r3]
 80024d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d010      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024de:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_RCC_GetSysClockFreq+0x94>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	0c5b      	lsrs	r3, r3, #17
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	4a11      	ldr	r2, [pc, #68]	; (8002530 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024ea:	5cd3      	ldrb	r3, [r2, r3]
 80024ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a0d      	ldr	r2, [pc, #52]	; (8002528 <HAL_RCC_GetSysClockFreq+0x98>)
 80024f2:	fb03 f202 	mul.w	r2, r3, r2
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	e004      	b.n	800250a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a0c      	ldr	r2, [pc, #48]	; (8002534 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002504:	fb02 f303 	mul.w	r3, r2, r3
 8002508:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	613b      	str	r3, [r7, #16]
      break;
 800250e:	e002      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <HAL_RCC_GetSysClockFreq+0x98>)
 8002512:	613b      	str	r3, [r7, #16]
      break;
 8002514:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002516:	693b      	ldr	r3, [r7, #16]
}
 8002518:	4618      	mov	r0, r3
 800251a:	371c      	adds	r7, #28
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40021000 	.word	0x40021000
 8002528:	007a1200 	.word	0x007a1200
 800252c:	08002808 	.word	0x08002808
 8002530:	08002818 	.word	0x08002818
 8002534:	003d0900 	.word	0x003d0900

08002538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800253c:	4b02      	ldr	r3, [pc, #8]	; (8002548 <HAL_RCC_GetHCLKFreq+0x10>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr
 8002548:	20000000 	.word	0x20000000

0800254c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002550:	f7ff fff2 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 8002554:	4602      	mov	r2, r0
 8002556:	4b05      	ldr	r3, [pc, #20]	; (800256c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	0a1b      	lsrs	r3, r3, #8
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	4903      	ldr	r1, [pc, #12]	; (8002570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002562:	5ccb      	ldrb	r3, [r1, r3]
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002568:	4618      	mov	r0, r3
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021000 	.word	0x40021000
 8002570:	08002800 	.word	0x08002800

08002574 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800257c:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <RCC_Delay+0x34>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <RCC_Delay+0x38>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	0a5b      	lsrs	r3, r3, #9
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	fb02 f303 	mul.w	r3, r2, r3
 800258e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002590:	bf00      	nop
  }
  while (Delay --);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1e5a      	subs	r2, r3, #1
 8002596:	60fa      	str	r2, [r7, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1f9      	bne.n	8002590 <RCC_Delay+0x1c>
}
 800259c:	bf00      	nop
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	20000000 	.word	0x20000000
 80025ac:	10624dd3 	.word	0x10624dd3

080025b0 <malloc>:
 80025b0:	4b02      	ldr	r3, [pc, #8]	; (80025bc <malloc+0xc>)
 80025b2:	4601      	mov	r1, r0
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	f000 b823 	b.w	8002600 <_malloc_r>
 80025ba:	bf00      	nop
 80025bc:	20000058 	.word	0x20000058

080025c0 <sbrk_aligned>:
 80025c0:	b570      	push	{r4, r5, r6, lr}
 80025c2:	4e0e      	ldr	r6, [pc, #56]	; (80025fc <sbrk_aligned+0x3c>)
 80025c4:	460c      	mov	r4, r1
 80025c6:	6831      	ldr	r1, [r6, #0]
 80025c8:	4605      	mov	r5, r0
 80025ca:	b911      	cbnz	r1, 80025d2 <sbrk_aligned+0x12>
 80025cc:	f000 f8ac 	bl	8002728 <_sbrk_r>
 80025d0:	6030      	str	r0, [r6, #0]
 80025d2:	4621      	mov	r1, r4
 80025d4:	4628      	mov	r0, r5
 80025d6:	f000 f8a7 	bl	8002728 <_sbrk_r>
 80025da:	1c43      	adds	r3, r0, #1
 80025dc:	d00a      	beq.n	80025f4 <sbrk_aligned+0x34>
 80025de:	1cc4      	adds	r4, r0, #3
 80025e0:	f024 0403 	bic.w	r4, r4, #3
 80025e4:	42a0      	cmp	r0, r4
 80025e6:	d007      	beq.n	80025f8 <sbrk_aligned+0x38>
 80025e8:	1a21      	subs	r1, r4, r0
 80025ea:	4628      	mov	r0, r5
 80025ec:	f000 f89c 	bl	8002728 <_sbrk_r>
 80025f0:	3001      	adds	r0, #1
 80025f2:	d101      	bne.n	80025f8 <sbrk_aligned+0x38>
 80025f4:	f04f 34ff 	mov.w	r4, #4294967295
 80025f8:	4620      	mov	r0, r4
 80025fa:	bd70      	pop	{r4, r5, r6, pc}
 80025fc:	200000dc 	.word	0x200000dc

08002600 <_malloc_r>:
 8002600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002604:	1ccd      	adds	r5, r1, #3
 8002606:	f025 0503 	bic.w	r5, r5, #3
 800260a:	3508      	adds	r5, #8
 800260c:	2d0c      	cmp	r5, #12
 800260e:	bf38      	it	cc
 8002610:	250c      	movcc	r5, #12
 8002612:	2d00      	cmp	r5, #0
 8002614:	4607      	mov	r7, r0
 8002616:	db01      	blt.n	800261c <_malloc_r+0x1c>
 8002618:	42a9      	cmp	r1, r5
 800261a:	d905      	bls.n	8002628 <_malloc_r+0x28>
 800261c:	230c      	movs	r3, #12
 800261e:	2600      	movs	r6, #0
 8002620:	603b      	str	r3, [r7, #0]
 8002622:	4630      	mov	r0, r6
 8002624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002628:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80026fc <_malloc_r+0xfc>
 800262c:	f000 f868 	bl	8002700 <__malloc_lock>
 8002630:	f8d8 3000 	ldr.w	r3, [r8]
 8002634:	461c      	mov	r4, r3
 8002636:	bb5c      	cbnz	r4, 8002690 <_malloc_r+0x90>
 8002638:	4629      	mov	r1, r5
 800263a:	4638      	mov	r0, r7
 800263c:	f7ff ffc0 	bl	80025c0 <sbrk_aligned>
 8002640:	1c43      	adds	r3, r0, #1
 8002642:	4604      	mov	r4, r0
 8002644:	d155      	bne.n	80026f2 <_malloc_r+0xf2>
 8002646:	f8d8 4000 	ldr.w	r4, [r8]
 800264a:	4626      	mov	r6, r4
 800264c:	2e00      	cmp	r6, #0
 800264e:	d145      	bne.n	80026dc <_malloc_r+0xdc>
 8002650:	2c00      	cmp	r4, #0
 8002652:	d048      	beq.n	80026e6 <_malloc_r+0xe6>
 8002654:	6823      	ldr	r3, [r4, #0]
 8002656:	4631      	mov	r1, r6
 8002658:	4638      	mov	r0, r7
 800265a:	eb04 0903 	add.w	r9, r4, r3
 800265e:	f000 f863 	bl	8002728 <_sbrk_r>
 8002662:	4581      	cmp	r9, r0
 8002664:	d13f      	bne.n	80026e6 <_malloc_r+0xe6>
 8002666:	6821      	ldr	r1, [r4, #0]
 8002668:	4638      	mov	r0, r7
 800266a:	1a6d      	subs	r5, r5, r1
 800266c:	4629      	mov	r1, r5
 800266e:	f7ff ffa7 	bl	80025c0 <sbrk_aligned>
 8002672:	3001      	adds	r0, #1
 8002674:	d037      	beq.n	80026e6 <_malloc_r+0xe6>
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	442b      	add	r3, r5
 800267a:	6023      	str	r3, [r4, #0]
 800267c:	f8d8 3000 	ldr.w	r3, [r8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d038      	beq.n	80026f6 <_malloc_r+0xf6>
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	42a2      	cmp	r2, r4
 8002688:	d12b      	bne.n	80026e2 <_malloc_r+0xe2>
 800268a:	2200      	movs	r2, #0
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	e00f      	b.n	80026b0 <_malloc_r+0xb0>
 8002690:	6822      	ldr	r2, [r4, #0]
 8002692:	1b52      	subs	r2, r2, r5
 8002694:	d41f      	bmi.n	80026d6 <_malloc_r+0xd6>
 8002696:	2a0b      	cmp	r2, #11
 8002698:	d917      	bls.n	80026ca <_malloc_r+0xca>
 800269a:	1961      	adds	r1, r4, r5
 800269c:	42a3      	cmp	r3, r4
 800269e:	6025      	str	r5, [r4, #0]
 80026a0:	bf18      	it	ne
 80026a2:	6059      	strne	r1, [r3, #4]
 80026a4:	6863      	ldr	r3, [r4, #4]
 80026a6:	bf08      	it	eq
 80026a8:	f8c8 1000 	streq.w	r1, [r8]
 80026ac:	5162      	str	r2, [r4, r5]
 80026ae:	604b      	str	r3, [r1, #4]
 80026b0:	4638      	mov	r0, r7
 80026b2:	f104 060b 	add.w	r6, r4, #11
 80026b6:	f000 f829 	bl	800270c <__malloc_unlock>
 80026ba:	f026 0607 	bic.w	r6, r6, #7
 80026be:	1d23      	adds	r3, r4, #4
 80026c0:	1af2      	subs	r2, r6, r3
 80026c2:	d0ae      	beq.n	8002622 <_malloc_r+0x22>
 80026c4:	1b9b      	subs	r3, r3, r6
 80026c6:	50a3      	str	r3, [r4, r2]
 80026c8:	e7ab      	b.n	8002622 <_malloc_r+0x22>
 80026ca:	42a3      	cmp	r3, r4
 80026cc:	6862      	ldr	r2, [r4, #4]
 80026ce:	d1dd      	bne.n	800268c <_malloc_r+0x8c>
 80026d0:	f8c8 2000 	str.w	r2, [r8]
 80026d4:	e7ec      	b.n	80026b0 <_malloc_r+0xb0>
 80026d6:	4623      	mov	r3, r4
 80026d8:	6864      	ldr	r4, [r4, #4]
 80026da:	e7ac      	b.n	8002636 <_malloc_r+0x36>
 80026dc:	4634      	mov	r4, r6
 80026de:	6876      	ldr	r6, [r6, #4]
 80026e0:	e7b4      	b.n	800264c <_malloc_r+0x4c>
 80026e2:	4613      	mov	r3, r2
 80026e4:	e7cc      	b.n	8002680 <_malloc_r+0x80>
 80026e6:	230c      	movs	r3, #12
 80026e8:	4638      	mov	r0, r7
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	f000 f80e 	bl	800270c <__malloc_unlock>
 80026f0:	e797      	b.n	8002622 <_malloc_r+0x22>
 80026f2:	6025      	str	r5, [r4, #0]
 80026f4:	e7dc      	b.n	80026b0 <_malloc_r+0xb0>
 80026f6:	605b      	str	r3, [r3, #4]
 80026f8:	deff      	udf	#255	; 0xff
 80026fa:	bf00      	nop
 80026fc:	200000d8 	.word	0x200000d8

08002700 <__malloc_lock>:
 8002700:	4801      	ldr	r0, [pc, #4]	; (8002708 <__malloc_lock+0x8>)
 8002702:	f000 b84b 	b.w	800279c <__retarget_lock_acquire_recursive>
 8002706:	bf00      	nop
 8002708:	2000021c 	.word	0x2000021c

0800270c <__malloc_unlock>:
 800270c:	4801      	ldr	r0, [pc, #4]	; (8002714 <__malloc_unlock+0x8>)
 800270e:	f000 b846 	b.w	800279e <__retarget_lock_release_recursive>
 8002712:	bf00      	nop
 8002714:	2000021c 	.word	0x2000021c

08002718 <memset>:
 8002718:	4603      	mov	r3, r0
 800271a:	4402      	add	r2, r0
 800271c:	4293      	cmp	r3, r2
 800271e:	d100      	bne.n	8002722 <memset+0xa>
 8002720:	4770      	bx	lr
 8002722:	f803 1b01 	strb.w	r1, [r3], #1
 8002726:	e7f9      	b.n	800271c <memset+0x4>

08002728 <_sbrk_r>:
 8002728:	b538      	push	{r3, r4, r5, lr}
 800272a:	2300      	movs	r3, #0
 800272c:	4d05      	ldr	r5, [pc, #20]	; (8002744 <_sbrk_r+0x1c>)
 800272e:	4604      	mov	r4, r0
 8002730:	4608      	mov	r0, r1
 8002732:	602b      	str	r3, [r5, #0]
 8002734:	f7fe fb3c 	bl	8000db0 <_sbrk>
 8002738:	1c43      	adds	r3, r0, #1
 800273a:	d102      	bne.n	8002742 <_sbrk_r+0x1a>
 800273c:	682b      	ldr	r3, [r5, #0]
 800273e:	b103      	cbz	r3, 8002742 <_sbrk_r+0x1a>
 8002740:	6023      	str	r3, [r4, #0]
 8002742:	bd38      	pop	{r3, r4, r5, pc}
 8002744:	20000218 	.word	0x20000218

08002748 <__errno>:
 8002748:	4b01      	ldr	r3, [pc, #4]	; (8002750 <__errno+0x8>)
 800274a:	6818      	ldr	r0, [r3, #0]
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000058 	.word	0x20000058

08002754 <__libc_init_array>:
 8002754:	b570      	push	{r4, r5, r6, lr}
 8002756:	2600      	movs	r6, #0
 8002758:	4d0c      	ldr	r5, [pc, #48]	; (800278c <__libc_init_array+0x38>)
 800275a:	4c0d      	ldr	r4, [pc, #52]	; (8002790 <__libc_init_array+0x3c>)
 800275c:	1b64      	subs	r4, r4, r5
 800275e:	10a4      	asrs	r4, r4, #2
 8002760:	42a6      	cmp	r6, r4
 8002762:	d109      	bne.n	8002778 <__libc_init_array+0x24>
 8002764:	f000 f81c 	bl	80027a0 <_init>
 8002768:	2600      	movs	r6, #0
 800276a:	4d0a      	ldr	r5, [pc, #40]	; (8002794 <__libc_init_array+0x40>)
 800276c:	4c0a      	ldr	r4, [pc, #40]	; (8002798 <__libc_init_array+0x44>)
 800276e:	1b64      	subs	r4, r4, r5
 8002770:	10a4      	asrs	r4, r4, #2
 8002772:	42a6      	cmp	r6, r4
 8002774:	d105      	bne.n	8002782 <__libc_init_array+0x2e>
 8002776:	bd70      	pop	{r4, r5, r6, pc}
 8002778:	f855 3b04 	ldr.w	r3, [r5], #4
 800277c:	4798      	blx	r3
 800277e:	3601      	adds	r6, #1
 8002780:	e7ee      	b.n	8002760 <__libc_init_array+0xc>
 8002782:	f855 3b04 	ldr.w	r3, [r5], #4
 8002786:	4798      	blx	r3
 8002788:	3601      	adds	r6, #1
 800278a:	e7f2      	b.n	8002772 <__libc_init_array+0x1e>
 800278c:	0800281c 	.word	0x0800281c
 8002790:	0800281c 	.word	0x0800281c
 8002794:	0800281c 	.word	0x0800281c
 8002798:	08002820 	.word	0x08002820

0800279c <__retarget_lock_acquire_recursive>:
 800279c:	4770      	bx	lr

0800279e <__retarget_lock_release_recursive>:
 800279e:	4770      	bx	lr

080027a0 <_init>:
 80027a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a2:	bf00      	nop
 80027a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027a6:	bc08      	pop	{r3}
 80027a8:	469e      	mov	lr, r3
 80027aa:	4770      	bx	lr

080027ac <_fini>:
 80027ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ae:	bf00      	nop
 80027b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b2:	bc08      	pop	{r3}
 80027b4:	469e      	mov	lr, r3
 80027b6:	4770      	bx	lr
