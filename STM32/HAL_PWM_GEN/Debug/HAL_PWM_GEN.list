
HAL_PWM_GEN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004288  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08004394  08004394  00014394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004514  08004514  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004514  08004514  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004514  08004514  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004514  08004514  00014514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004518  08004518  00014518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800451c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  2000005c  08004578  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08004578  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bd56  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c1e  00000000  00000000  0002be1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c18  00000000  00000000  0002da40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000981  00000000  00000000  0002e658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016f7c  00000000  00000000  0002efd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d8d0  00000000  00000000  00045f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008888c  00000000  00000000  00053825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003838  00000000  00000000  000dc0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000df8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800437c 	.word	0x0800437c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800437c 	.word	0x0800437c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b09c      	sub	sp, #112	; 0x70
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int32_t CH1_DC = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 fc39 	bl	80009cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f84f 	bl	80001fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f9a3 	bl	80004a8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000162:	f000 f891 	bl	8000288 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000166:	f000 f975 	bl	8000454 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800016a:	f000 f8fd 	bl	8000368 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800016e:	481d      	ldr	r0, [pc, #116]	; (80001e4 <main+0x98>)
 8000170:	f001 fc64 	bl	8001a3c <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000174:	2100      	movs	r1, #0
 8000176:	481b      	ldr	r0, [pc, #108]	; (80001e4 <main+0x98>)
 8000178:	f001 fe04 	bl	8001d84 <HAL_TIM_IC_Start_IT>


  TIM3->CCR1 = 500;
 800017c:	4b1a      	ldr	r3, [pc, #104]	; (80001e8 <main+0x9c>)
 800017e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000182:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000184:	2100      	movs	r1, #0
 8000186:	4819      	ldr	r0, [pc, #100]	; (80001ec <main+0xa0>)
 8000188:	f001 fd02 	bl	8001b90 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart1, &recvd_data, 1);
 800018c:	2201      	movs	r2, #1
 800018e:	4918      	ldr	r1, [pc, #96]	; (80001f0 <main+0xa4>)
 8000190:	4818      	ldr	r0, [pc, #96]	; (80001f4 <main+0xa8>)
 8000192:	f002 fe0c 	bl	8002dae <HAL_UART_Receive_IT>

  uint8_t transmit_buffer[100];
  memset(transmit_buffer, 0, 100);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	2264      	movs	r2, #100	; 0x64
 800019a:	2100      	movs	r1, #0
 800019c:	4618      	mov	r0, r3
 800019e:	f003 fc5b 	bl	8003a58 <memset>
  uint32_t length = snprintf(transmit_buffer, 100, "Start");
 80001a2:	1d3b      	adds	r3, r7, #4
 80001a4:	4a14      	ldr	r2, [pc, #80]	; (80001f8 <main+0xac>)
 80001a6:	2164      	movs	r1, #100	; 0x64
 80001a8:	4618      	mov	r0, r3
 80001aa:	f003 fc21 	bl	80039f0 <sniprintf>
 80001ae:	4603      	mov	r3, r0
 80001b0:	66bb      	str	r3, [r7, #104]	; 0x68
  transmit_buffer[length++] = '\n';
 80001b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80001b4:	1c5a      	adds	r2, r3, #1
 80001b6:	66ba      	str	r2, [r7, #104]	; 0x68
 80001b8:	3370      	adds	r3, #112	; 0x70
 80001ba:	443b      	add	r3, r7
 80001bc:	220a      	movs	r2, #10
 80001be:	f803 2c6c 	strb.w	r2, [r3, #-108]
  transmit_buffer[length++] = '\r';
 80001c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80001c4:	1c5a      	adds	r2, r3, #1
 80001c6:	66ba      	str	r2, [r7, #104]	; 0x68
 80001c8:	3370      	adds	r3, #112	; 0x70
 80001ca:	443b      	add	r3, r7
 80001cc:	220d      	movs	r2, #13
 80001ce:	f803 2c6c 	strb.w	r2, [r3, #-108]
  HAL_UART_Transmit(&huart1, transmit_buffer, length, HAL_MAX_DELAY);
 80001d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80001d4:	b29a      	uxth	r2, r3
 80001d6:	1d39      	adds	r1, r7, #4
 80001d8:	f04f 33ff 	mov.w	r3, #4294967295
 80001dc:	4805      	ldr	r0, [pc, #20]	; (80001f4 <main+0xa8>)
 80001de:	f002 fd63 	bl	8002ca8 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e2:	e7fe      	b.n	80001e2 <main+0x96>
 80001e4:	20000078 	.word	0x20000078
 80001e8:	40000400 	.word	0x40000400
 80001ec:	200000c0 	.word	0x200000c0
 80001f0:	20000150 	.word	0x20000150
 80001f4:	20000108 	.word	0x20000108
 80001f8:	08004394 	.word	0x08004394

080001fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b090      	sub	sp, #64	; 0x40
 8000200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000202:	f107 0318 	add.w	r3, r7, #24
 8000206:	2228      	movs	r2, #40	; 0x28
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f003 fc24 	bl	8003a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
 800021c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021e:	2301      	movs	r3, #1
 8000220:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000226:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022c:	2301      	movs	r3, #1
 800022e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000230:	2302      	movs	r3, #2
 8000232:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000238:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800023a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800023e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000240:	f107 0318 	add.w	r3, r7, #24
 8000244:	4618      	mov	r0, r3
 8000246:	f000 ff99 	bl	800117c <HAL_RCC_OscConfig>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000250:	f000 fa2a 	bl	80006a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000254:	230f      	movs	r3, #15
 8000256:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000258:	2302      	movs	r3, #2
 800025a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	2102      	movs	r1, #2
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fa06 	bl	8001680 <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800027a:	f000 fa15 	bl	80006a8 <Error_Handler>
  }
}
 800027e:	bf00      	nop
 8000280:	3740      	adds	r7, #64	; 0x40
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
	...

08000288 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b08a      	sub	sp, #40	; 0x28
 800028c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800028e:	f107 0318 	add.w	r3, r7, #24
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800029c:	f107 0310 	add.w	r3, r7, #16
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80002a6:	463b      	mov	r3, r7
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002b2:	4b2c      	ldr	r3, [pc, #176]	; (8000364 <MX_TIM2_Init+0xdc>)
 80002b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002ba:	4b2a      	ldr	r3, [pc, #168]	; (8000364 <MX_TIM2_Init+0xdc>)
 80002bc:	2200      	movs	r2, #0
 80002be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002c0:	4b28      	ldr	r3, [pc, #160]	; (8000364 <MX_TIM2_Init+0xdc>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80002c6:	4b27      	ldr	r3, [pc, #156]	; (8000364 <MX_TIM2_Init+0xdc>)
 80002c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ce:	4b25      	ldr	r3, [pc, #148]	; (8000364 <MX_TIM2_Init+0xdc>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80002d4:	4b23      	ldr	r3, [pc, #140]	; (8000364 <MX_TIM2_Init+0xdc>)
 80002d6:	2280      	movs	r2, #128	; 0x80
 80002d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002da:	4822      	ldr	r0, [pc, #136]	; (8000364 <MX_TIM2_Init+0xdc>)
 80002dc:	f001 fb5e 	bl	800199c <HAL_TIM_Base_Init>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80002e6:	f000 f9df 	bl	80006a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002ee:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002f0:	f107 0318 	add.w	r3, r7, #24
 80002f4:	4619      	mov	r1, r3
 80002f6:	481b      	ldr	r0, [pc, #108]	; (8000364 <MX_TIM2_Init+0xdc>)
 80002f8:	f001 ffae 	bl	8002258 <HAL_TIM_ConfigClockSource>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000302:	f000 f9d1 	bl	80006a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000306:	4817      	ldr	r0, [pc, #92]	; (8000364 <MX_TIM2_Init+0xdc>)
 8000308:	f001 fce4 	bl	8001cd4 <HAL_TIM_IC_Init>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000312:	f000 f9c9 	bl	80006a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000316:	2300      	movs	r3, #0
 8000318:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800031e:	f107 0310 	add.w	r3, r7, #16
 8000322:	4619      	mov	r1, r3
 8000324:	480f      	ldr	r0, [pc, #60]	; (8000364 <MX_TIM2_Init+0xdc>)
 8000326:	f002 fc11 	bl	8002b4c <HAL_TIMEx_MasterConfigSynchronization>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000330:	f000 f9ba 	bl	80006a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000334:	2300      	movs	r3, #0
 8000336:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000338:	2301      	movs	r3, #1
 800033a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000344:	463b      	mov	r3, r7
 8000346:	2200      	movs	r2, #0
 8000348:	4619      	mov	r1, r3
 800034a:	4806      	ldr	r0, [pc, #24]	; (8000364 <MX_TIM2_Init+0xdc>)
 800034c:	f001 fe26 	bl	8001f9c <HAL_TIM_IC_ConfigChannel>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000356:	f000 f9a7 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800035a:	bf00      	nop
 800035c:	3728      	adds	r7, #40	; 0x28
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000078 	.word	0x20000078

08000368 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b08e      	sub	sp, #56	; 0x38
 800036c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800036e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800037c:	f107 0320 	add.w	r3, r7, #32
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
 8000390:	60da      	str	r2, [r3, #12]
 8000392:	611a      	str	r2, [r3, #16]
 8000394:	615a      	str	r2, [r3, #20]
 8000396:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000398:	4b2c      	ldr	r3, [pc, #176]	; (800044c <MX_TIM3_Init+0xe4>)
 800039a:	4a2d      	ldr	r2, [pc, #180]	; (8000450 <MX_TIM3_Init+0xe8>)
 800039c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800039e:	4b2b      	ldr	r3, [pc, #172]	; (800044c <MX_TIM3_Init+0xe4>)
 80003a0:	2247      	movs	r2, #71	; 0x47
 80003a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a4:	4b29      	ldr	r3, [pc, #164]	; (800044c <MX_TIM3_Init+0xe4>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80003aa:	4b28      	ldr	r3, [pc, #160]	; (800044c <MX_TIM3_Init+0xe4>)
 80003ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b2:	4b26      	ldr	r3, [pc, #152]	; (800044c <MX_TIM3_Init+0xe4>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003b8:	4b24      	ldr	r3, [pc, #144]	; (800044c <MX_TIM3_Init+0xe4>)
 80003ba:	2280      	movs	r2, #128	; 0x80
 80003bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003be:	4823      	ldr	r0, [pc, #140]	; (800044c <MX_TIM3_Init+0xe4>)
 80003c0:	f001 faec 	bl	800199c <HAL_TIM_Base_Init>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80003ca:	f000 f96d 	bl	80006a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003d8:	4619      	mov	r1, r3
 80003da:	481c      	ldr	r0, [pc, #112]	; (800044c <MX_TIM3_Init+0xe4>)
 80003dc:	f001 ff3c 	bl	8002258 <HAL_TIM_ConfigClockSource>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80003e6:	f000 f95f 	bl	80006a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003ea:	4818      	ldr	r0, [pc, #96]	; (800044c <MX_TIM3_Init+0xe4>)
 80003ec:	f001 fb78 	bl	8001ae0 <HAL_TIM_PWM_Init>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80003f6:	f000 f957 	bl	80006a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003fa:	2300      	movs	r3, #0
 80003fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003fe:	2300      	movs	r3, #0
 8000400:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000402:	f107 0320 	add.w	r3, r7, #32
 8000406:	4619      	mov	r1, r3
 8000408:	4810      	ldr	r0, [pc, #64]	; (800044c <MX_TIM3_Init+0xe4>)
 800040a:	f002 fb9f 	bl	8002b4c <HAL_TIMEx_MasterConfigSynchronization>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000414:	f000 f948 	bl	80006a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000418:	2360      	movs	r3, #96	; 0x60
 800041a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800041c:	2300      	movs	r3, #0
 800041e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000424:	2300      	movs	r3, #0
 8000426:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	2200      	movs	r2, #0
 800042c:	4619      	mov	r1, r3
 800042e:	4807      	ldr	r0, [pc, #28]	; (800044c <MX_TIM3_Init+0xe4>)
 8000430:	f001 fe50 	bl	80020d4 <HAL_TIM_PWM_ConfigChannel>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800043a:	f000 f935 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800043e:	4803      	ldr	r0, [pc, #12]	; (800044c <MX_TIM3_Init+0xe4>)
 8000440:	f000 f9aa 	bl	8000798 <HAL_TIM_MspPostInit>

}
 8000444:	bf00      	nop
 8000446:	3738      	adds	r7, #56	; 0x38
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	200000c0 	.word	0x200000c0
 8000450:	40000400 	.word	0x40000400

08000454 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000458:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 800045a:	4a12      	ldr	r2, [pc, #72]	; (80004a4 <MX_USART1_UART_Init+0x50>)
 800045c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800045e:	4b10      	ldr	r3, [pc, #64]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000464:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000466:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 800046e:	2200      	movs	r2, #0
 8000470:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000472:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000474:	2200      	movs	r2, #0
 8000476:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000478:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 800047a:	220c      	movs	r2, #12
 800047c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800047e:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000480:	2200      	movs	r2, #0
 8000482:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000486:	2200      	movs	r2, #0
 8000488:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800048a:	4805      	ldr	r0, [pc, #20]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 800048c:	f002 fbbc 	bl	8002c08 <HAL_UART_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000496:	f000 f907 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	20000108 	.word	0x20000108
 80004a4:	40013800 	.word	0x40013800

080004a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	f107 0310 	add.w	r3, r7, #16
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004bc:	4b27      	ldr	r3, [pc, #156]	; (800055c <MX_GPIO_Init+0xb4>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a26      	ldr	r2, [pc, #152]	; (800055c <MX_GPIO_Init+0xb4>)
 80004c2:	f043 0310 	orr.w	r3, r3, #16
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b24      	ldr	r3, [pc, #144]	; (800055c <MX_GPIO_Init+0xb4>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0310 	and.w	r3, r3, #16
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004d4:	4b21      	ldr	r3, [pc, #132]	; (800055c <MX_GPIO_Init+0xb4>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a20      	ldr	r2, [pc, #128]	; (800055c <MX_GPIO_Init+0xb4>)
 80004da:	f043 0320 	orr.w	r3, r3, #32
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b1e      	ldr	r3, [pc, #120]	; (800055c <MX_GPIO_Init+0xb4>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0320 	and.w	r3, r3, #32
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ec:	4b1b      	ldr	r3, [pc, #108]	; (800055c <MX_GPIO_Init+0xb4>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a1a      	ldr	r2, [pc, #104]	; (800055c <MX_GPIO_Init+0xb4>)
 80004f2:	f043 0304 	orr.w	r3, r3, #4
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <MX_GPIO_Init+0xb4>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0304 	and.w	r3, r3, #4
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050a:	4815      	ldr	r0, [pc, #84]	; (8000560 <MX_GPIO_Init+0xb8>)
 800050c:	f000 fe04 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_PIN_GPIO_Port, USER_PIN_Pin, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2120      	movs	r1, #32
 8000514:	4813      	ldr	r0, [pc, #76]	; (8000564 <MX_GPIO_Init+0xbc>)
 8000516:	f000 fdff 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOARD_LED_Pin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 800051a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800051e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000520:	2301      	movs	r3, #1
 8000522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	2300      	movs	r3, #0
 8000526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000528:	2302      	movs	r3, #2
 800052a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	4619      	mov	r1, r3
 8000532:	480b      	ldr	r0, [pc, #44]	; (8000560 <MX_GPIO_Init+0xb8>)
 8000534:	f000 fc6c 	bl	8000e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_PIN_Pin */
  GPIO_InitStruct.Pin = USER_PIN_Pin;
 8000538:	2320      	movs	r3, #32
 800053a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053c:	2301      	movs	r3, #1
 800053e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	2302      	movs	r3, #2
 8000546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_PIN_GPIO_Port, &GPIO_InitStruct);
 8000548:	f107 0310 	add.w	r3, r7, #16
 800054c:	4619      	mov	r1, r3
 800054e:	4805      	ldr	r0, [pc, #20]	; (8000564 <MX_GPIO_Init+0xbc>)
 8000550:	f000 fc5e 	bl	8000e10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000554:	bf00      	nop
 8000556:	3720      	adds	r7, #32
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40021000 	.word	0x40021000
 8000560:	40011000 	.word	0x40011000
 8000564:	40010800 	.word	0x40010800

08000568 <Serial_Interpreter>:

/* USER CODE BEGIN 4 */
void Serial_Interpreter(char *data_buffer, uint32_t count)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
	if (count > 1)
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d930      	bls.n	80005da <Serial_Interpreter+0x72>
	{
		char *end;
		uint32_t decValue = strtoul(data_buffer+1, &end, 10);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	3301      	adds	r3, #1
 800057c:	f107 010c 	add.w	r1, r7, #12
 8000580:	220a      	movs	r2, #10
 8000582:	4618      	mov	r0, r3
 8000584:	f003 fa2a 	bl	80039dc <strtoul>
 8000588:	4603      	mov	r3, r0
 800058a:	617b      	str	r3, [r7, #20]

		if (data_buffer[0] == 'F' || data_buffer[0] == 'f')
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b46      	cmp	r3, #70	; 0x46
 8000592:	d003      	beq.n	800059c <Serial_Interpreter+0x34>
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b66      	cmp	r3, #102	; 0x66
 800059a:	d113      	bne.n	80005c4 <Serial_Interpreter+0x5c>
		{
			// pre-scaler = 72-1 = 1 MHz
			// and assume frequency input is in kHz
			// 1 kHz = 1 MHz / (1000)  ARR -> 1000
			// 10 kHz = 1 MHz / (100)  ARR -> 100
			if (decValue < 65536)
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005a2:	d20f      	bcs.n	80005c4 <Serial_Interpreter+0x5c>
			{
				uint32_t setValue = 1000 / decValue;
 80005a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ae:	613b      	str	r3, [r7, #16]

				TIM3->ARR = setValue;
 80005b0:	4a14      	ldr	r2, [pc, #80]	; (8000604 <Serial_Interpreter+0x9c>)
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	62d3      	str	r3, [r2, #44]	; 0x2c
				//50 cycle calculation
				TIM3->CCR1 = 500 / decValue;
 80005b6:	4a13      	ldr	r2, [pc, #76]	; (8000604 <Serial_Interpreter+0x9c>)
 80005b8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	fbb1 f3f3 	udiv	r3, r1, r3
 80005c2:	6353      	str	r3, [r2, #52]	; 0x34
			}
		}

		if (data_buffer[0] == 'D' || data_buffer[0] == 'd')
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b44      	cmp	r3, #68	; 0x44
 80005ca:	d003      	beq.n	80005d4 <Serial_Interpreter+0x6c>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b64      	cmp	r3, #100	; 0x64
 80005d2:	d102      	bne.n	80005da <Serial_Interpreter+0x72>
		{
			TIM3->CCR1 = decValue;
 80005d4:	4a0b      	ldr	r2, [pc, #44]	; (8000604 <Serial_Interpreter+0x9c>)
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	6353      	str	r3, [r2, #52]	; 0x34
		}
	}


	if (data_buffer[0] == 'T' || data_buffer[0] == 't')
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b54      	cmp	r3, #84	; 0x54
 80005e0:	d003      	beq.n	80005ea <Serial_Interpreter+0x82>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b74      	cmp	r3, #116	; 0x74
 80005e8:	d108      	bne.n	80005fc <Serial_Interpreter+0x94>
	{
		HAL_GPIO_TogglePin(USER_PIN_GPIO_Port, USER_PIN_Pin);
 80005ea:	2120      	movs	r1, #32
 80005ec:	4806      	ldr	r0, [pc, #24]	; (8000608 <Serial_Interpreter+0xa0>)
 80005ee:	f000 fdab 	bl	8001148 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);
 80005f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <Serial_Interpreter+0xa4>)
 80005f8:	f000 fda6 	bl	8001148 <HAL_GPIO_TogglePin>
	}
}
 80005fc:	bf00      	nop
 80005fe:	3718      	adds	r7, #24
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40000400 	.word	0x40000400
 8000608:	40010800 	.word	0x40010800
 800060c:	40011000 	.word	0x40011000

08000610 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

	//HAL_UART_Transmit(huart, &recvd_data, 1, HAL_MAX_DELAY);
	if (recvd_data == '\r') //when enter is pressed go to this condition
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <HAL_UART_RxCpltCallback+0x88>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b0d      	cmp	r3, #13
 800061e:	d129      	bne.n	8000674 <HAL_UART_RxCpltCallback+0x64>
	{

		char *end;
		//uint32_t dacValue = strtoul(data_buffer, &end, 10);
		Serial_Interpreter(data_buffer, count);
 8000620:	4b1e      	ldr	r3, [pc, #120]	; (800069c <HAL_UART_RxCpltCallback+0x8c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4619      	mov	r1, r3
 8000626:	481e      	ldr	r0, [pc, #120]	; (80006a0 <HAL_UART_RxCpltCallback+0x90>)
 8000628:	f7ff ff9e 	bl	8000568 <Serial_Interpreter>

		data_buffer[count++] = '\r';
 800062c:	4b1b      	ldr	r3, [pc, #108]	; (800069c <HAL_UART_RxCpltCallback+0x8c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	1c5a      	adds	r2, r3, #1
 8000632:	491a      	ldr	r1, [pc, #104]	; (800069c <HAL_UART_RxCpltCallback+0x8c>)
 8000634:	600a      	str	r2, [r1, #0]
 8000636:	4a1a      	ldr	r2, [pc, #104]	; (80006a0 <HAL_UART_RxCpltCallback+0x90>)
 8000638:	210d      	movs	r1, #13
 800063a:	54d1      	strb	r1, [r2, r3]
		data_buffer[count++] = '\n';
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <HAL_UART_RxCpltCallback+0x8c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	1c5a      	adds	r2, r3, #1
 8000642:	4916      	ldr	r1, [pc, #88]	; (800069c <HAL_UART_RxCpltCallback+0x8c>)
 8000644:	600a      	str	r2, [r1, #0]
 8000646:	4a16      	ldr	r2, [pc, #88]	; (80006a0 <HAL_UART_RxCpltCallback+0x90>)
 8000648:	210a      	movs	r1, #10
 800064a:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(huart, data_buffer, count, HAL_MAX_DELAY); //transmit the full sentence again
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <HAL_UART_RxCpltCallback+0x8c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	b29a      	uxth	r2, r3
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	4912      	ldr	r1, [pc, #72]	; (80006a0 <HAL_UART_RxCpltCallback+0x90>)
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f002 fb25 	bl	8002ca8 <HAL_UART_Transmit>
		memset(data_buffer, 0, count); // empty the data buffer
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <HAL_UART_RxCpltCallback+0x8c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	461a      	mov	r2, r3
 8000664:	2100      	movs	r1, #0
 8000666:	480e      	ldr	r0, [pc, #56]	; (80006a0 <HAL_UART_RxCpltCallback+0x90>)
 8000668:	f003 f9f6 	bl	8003a58 <memset>
		count = 0;
 800066c:	4b0b      	ldr	r3, [pc, #44]	; (800069c <HAL_UART_RxCpltCallback+0x8c>)
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	e008      	b.n	8000686 <HAL_UART_RxCpltCallback+0x76>

	} else {
		data_buffer[count++] = recvd_data; // every time when interrput is happen, received 1 byte of data
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <HAL_UART_RxCpltCallback+0x8c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	1c5a      	adds	r2, r3, #1
 800067a:	4908      	ldr	r1, [pc, #32]	; (800069c <HAL_UART_RxCpltCallback+0x8c>)
 800067c:	600a      	str	r2, [r1, #0]
 800067e:	4a06      	ldr	r2, [pc, #24]	; (8000698 <HAL_UART_RxCpltCallback+0x88>)
 8000680:	7811      	ldrb	r1, [r2, #0]
 8000682:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <HAL_UART_RxCpltCallback+0x90>)
 8000684:	54d1      	strb	r1, [r2, r3]
		//HAL_UART_Transmit(huart, recvd_data, 1, HAL_MAX_DELAY);
	}


	HAL_UART_Receive_IT(&huart1, &recvd_data, 1); //start next data receive interrupt
 8000686:	2201      	movs	r2, #1
 8000688:	4903      	ldr	r1, [pc, #12]	; (8000698 <HAL_UART_RxCpltCallback+0x88>)
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <HAL_UART_RxCpltCallback+0x94>)
 800068c:	f002 fb8f 	bl	8002dae <HAL_UART_Receive_IT>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000150 	.word	0x20000150
 800069c:	200001b8 	.word	0x200001b8
 80006a0:	20000154 	.word	0x20000154
 80006a4:	20000108 	.word	0x20000108

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <HAL_MspInit+0x40>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4a0d      	ldr	r2, [pc, #52]	; (80006f4 <HAL_MspInit+0x40>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6193      	str	r3, [r2, #24]
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <HAL_MspInit+0x40>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <HAL_MspInit+0x40>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a07      	ldr	r2, [pc, #28]	; (80006f4 <HAL_MspInit+0x40>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <HAL_MspInit+0x40>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	40021000 	.word	0x40021000

080006f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 0318 	add.w	r3, r7, #24
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000716:	d124      	bne.n	8000762 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000718:	4b1c      	ldr	r3, [pc, #112]	; (800078c <HAL_TIM_Base_MspInit+0x94>)
 800071a:	69db      	ldr	r3, [r3, #28]
 800071c:	4a1b      	ldr	r2, [pc, #108]	; (800078c <HAL_TIM_Base_MspInit+0x94>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	61d3      	str	r3, [r2, #28]
 8000724:	4b19      	ldr	r3, [pc, #100]	; (800078c <HAL_TIM_Base_MspInit+0x94>)
 8000726:	69db      	ldr	r3, [r3, #28]
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	617b      	str	r3, [r7, #20]
 800072e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <HAL_TIM_Base_MspInit+0x94>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a15      	ldr	r2, [pc, #84]	; (800078c <HAL_TIM_Base_MspInit+0x94>)
 8000736:	f043 0304 	orr.w	r3, r3, #4
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <HAL_TIM_Base_MspInit+0x94>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f003 0304 	and.w	r3, r3, #4
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000748:	2301      	movs	r3, #1
 800074a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	f107 0318 	add.w	r3, r7, #24
 8000758:	4619      	mov	r1, r3
 800075a:	480d      	ldr	r0, [pc, #52]	; (8000790 <HAL_TIM_Base_MspInit+0x98>)
 800075c:	f000 fb58 	bl	8000e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000760:	e010      	b.n	8000784 <HAL_TIM_Base_MspInit+0x8c>
  else if(htim_base->Instance==TIM3)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <HAL_TIM_Base_MspInit+0x9c>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d10b      	bne.n	8000784 <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <HAL_TIM_Base_MspInit+0x94>)
 800076e:	69db      	ldr	r3, [r3, #28]
 8000770:	4a06      	ldr	r2, [pc, #24]	; (800078c <HAL_TIM_Base_MspInit+0x94>)
 8000772:	f043 0302 	orr.w	r3, r3, #2
 8000776:	61d3      	str	r3, [r2, #28]
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <HAL_TIM_Base_MspInit+0x94>)
 800077a:	69db      	ldr	r3, [r3, #28]
 800077c:	f003 0302 	and.w	r3, r3, #2
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
}
 8000784:	bf00      	nop
 8000786:	3728      	adds	r7, #40	; 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000
 8000790:	40010800 	.word	0x40010800
 8000794:	40000400 	.word	0x40000400

08000798 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <HAL_TIM_MspPostInit+0x58>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d117      	bne.n	80007e8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <HAL_TIM_MspPostInit+0x5c>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <HAL_TIM_MspPostInit+0x5c>)
 80007be:	f043 0304 	orr.w	r3, r3, #4
 80007c2:	6193      	str	r3, [r2, #24]
 80007c4:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <HAL_TIM_MspPostInit+0x5c>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f003 0304 	and.w	r3, r3, #4
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007d0:	2340      	movs	r3, #64	; 0x40
 80007d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d4:	2302      	movs	r3, #2
 80007d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2302      	movs	r3, #2
 80007da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	4619      	mov	r1, r3
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <HAL_TIM_MspPostInit+0x60>)
 80007e4:	f000 fb14 	bl	8000e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80007e8:	bf00      	nop
 80007ea:	3720      	adds	r7, #32
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40000400 	.word	0x40000400
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40010800 	.word	0x40010800

080007fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0310 	add.w	r3, r7, #16
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a20      	ldr	r2, [pc, #128]	; (8000898 <HAL_UART_MspInit+0x9c>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d139      	bne.n	8000890 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800081c:	4b1f      	ldr	r3, [pc, #124]	; (800089c <HAL_UART_MspInit+0xa0>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a1e      	ldr	r2, [pc, #120]	; (800089c <HAL_UART_MspInit+0xa0>)
 8000822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <HAL_UART_MspInit+0xa0>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000834:	4b19      	ldr	r3, [pc, #100]	; (800089c <HAL_UART_MspInit+0xa0>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a18      	ldr	r2, [pc, #96]	; (800089c <HAL_UART_MspInit+0xa0>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <HAL_UART_MspInit+0xa0>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800084c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000850:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	2302      	movs	r3, #2
 8000854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000856:	2303      	movs	r3, #3
 8000858:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	f107 0310 	add.w	r3, r7, #16
 800085e:	4619      	mov	r1, r3
 8000860:	480f      	ldr	r0, [pc, #60]	; (80008a0 <HAL_UART_MspInit+0xa4>)
 8000862:	f000 fad5 	bl	8000e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800086a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	4619      	mov	r1, r3
 800087a:	4809      	ldr	r0, [pc, #36]	; (80008a0 <HAL_UART_MspInit+0xa4>)
 800087c:	f000 fac8 	bl	8000e10 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	2100      	movs	r1, #0
 8000884:	2025      	movs	r0, #37	; 0x25
 8000886:	f000 f9da 	bl	8000c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800088a:	2025      	movs	r0, #37	; 0x25
 800088c:	f000 f9f3 	bl	8000c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000890:	bf00      	nop
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40013800 	.word	0x40013800
 800089c:	40021000 	.word	0x40021000
 80008a0:	40010800 	.word	0x40010800

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <NMI_Handler+0x4>

080008aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <HardFault_Handler+0x4>

080008b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <MemManage_Handler+0x4>

080008b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr

080008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr

080008e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ea:	f000 f8b5 	bl	8000a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <USART1_IRQHandler+0x10>)
 80008fa:	f002 fa7d 	bl	8002df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000108 	.word	0x20000108

08000908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000910:	4a14      	ldr	r2, [pc, #80]	; (8000964 <_sbrk+0x5c>)
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <_sbrk+0x60>)
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <_sbrk+0x64>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d102      	bne.n	800092a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <_sbrk+0x64>)
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <_sbrk+0x68>)
 8000928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <_sbrk+0x64>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	429a      	cmp	r2, r3
 8000936:	d207      	bcs.n	8000948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000938:	f003 f896 	bl	8003a68 <__errno>
 800093c:	4603      	mov	r3, r0
 800093e:	220c      	movs	r2, #12
 8000940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	e009      	b.n	800095c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <_sbrk+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800094e:	4b07      	ldr	r3, [pc, #28]	; (800096c <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	4a05      	ldr	r2, [pc, #20]	; (800096c <_sbrk+0x64>)
 8000958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20005000 	.word	0x20005000
 8000968:	00000400 	.word	0x00000400
 800096c:	200001bc 	.word	0x200001bc
 8000970:	20000310 	.word	0x20000310

08000974 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000980:	f7ff fff8 	bl	8000974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000984:	480b      	ldr	r0, [pc, #44]	; (80009b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000986:	490c      	ldr	r1, [pc, #48]	; (80009b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000988:	4a0c      	ldr	r2, [pc, #48]	; (80009bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800099c:	4c09      	ldr	r4, [pc, #36]	; (80009c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009aa:	f003 f863 	bl	8003a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ae:	f7ff fbcd 	bl	800014c <main>
  bx lr
 80009b2:	4770      	bx	lr
  ldr r0, =_sdata
 80009b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80009bc:	0800451c 	.word	0x0800451c
  ldr r2, =_sbss
 80009c0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80009c4:	2000030c 	.word	0x2000030c

080009c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c8:	e7fe      	b.n	80009c8 <ADC1_2_IRQHandler>
	...

080009cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_Init+0x28>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <HAL_Init+0x28>)
 80009d6:	f043 0310 	orr.w	r3, r3, #16
 80009da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 f923 	bl	8000c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e2:	200f      	movs	r0, #15
 80009e4:	f000 f808 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e8:	f7ff fe64 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40022000 	.word	0x40022000

080009f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_InitTick+0x54>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_InitTick+0x58>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 f93b 	bl	8000c92 <HAL_SYSTICK_Config>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e00e      	b.n	8000a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b0f      	cmp	r3, #15
 8000a2a:	d80a      	bhi.n	8000a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	f000 f903 	bl	8000c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <HAL_InitTick+0x5c>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e000      	b.n	8000a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	20000008 	.word	0x20000008
 8000a54:	20000004 	.word	0x20000004

08000a58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_IncTick+0x1c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_IncTick+0x20>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	4a03      	ldr	r2, [pc, #12]	; (8000a78 <HAL_IncTick+0x20>)
 8000a6a:	6013      	str	r3, [r2, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	20000008 	.word	0x20000008
 8000a78:	200001c0 	.word	0x200001c0

08000a7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a80:	4b02      	ldr	r3, [pc, #8]	; (8000a8c <HAL_GetTick+0x10>)
 8000a82:	681b      	ldr	r3, [r3, #0]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	200001c0 	.word	0x200001c0

08000a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac2:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	60d3      	str	r3, [r2, #12]
}
 8000ac8:	bf00      	nop
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	0a1b      	lsrs	r3, r3, #8
 8000ae2:	f003 0307 	and.w	r3, r3, #7
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	db0b      	blt.n	8000b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	f003 021f 	and.w	r2, r3, #31
 8000b0c:	4906      	ldr	r1, [pc, #24]	; (8000b28 <__NVIC_EnableIRQ+0x34>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	095b      	lsrs	r3, r3, #5
 8000b14:	2001      	movs	r0, #1
 8000b16:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	e000e100 	.word	0xe000e100

08000b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	db0a      	blt.n	8000b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	490c      	ldr	r1, [pc, #48]	; (8000b78 <__NVIC_SetPriority+0x4c>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	0112      	lsls	r2, r2, #4
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	440b      	add	r3, r1
 8000b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b54:	e00a      	b.n	8000b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4908      	ldr	r1, [pc, #32]	; (8000b7c <__NVIC_SetPriority+0x50>)
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	3b04      	subs	r3, #4
 8000b64:	0112      	lsls	r2, r2, #4
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	440b      	add	r3, r1
 8000b6a:	761a      	strb	r2, [r3, #24]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000e100 	.word	0xe000e100
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	; 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	f1c3 0307 	rsb	r3, r3, #7
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	bf28      	it	cs
 8000b9e:	2304      	movcs	r3, #4
 8000ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	2b06      	cmp	r3, #6
 8000ba8:	d902      	bls.n	8000bb0 <NVIC_EncodePriority+0x30>
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3b03      	subs	r3, #3
 8000bae:	e000      	b.n	8000bb2 <NVIC_EncodePriority+0x32>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43d9      	mvns	r1, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	4313      	orrs	r3, r2
         );
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3724      	adds	r7, #36	; 0x24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf4:	d301      	bcc.n	8000bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00f      	b.n	8000c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <SysTick_Config+0x40>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c02:	210f      	movs	r1, #15
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f7ff ff90 	bl	8000b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <SysTick_Config+0x40>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <SysTick_Config+0x40>)
 8000c14:	2207      	movs	r2, #7
 8000c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	e000e010 	.word	0xe000e010

08000c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ff2d 	bl	8000a90 <__NVIC_SetPriorityGrouping>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c50:	f7ff ff42 	bl	8000ad8 <__NVIC_GetPriorityGrouping>
 8000c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	68b9      	ldr	r1, [r7, #8]
 8000c5a:	6978      	ldr	r0, [r7, #20]
 8000c5c:	f7ff ff90 	bl	8000b80 <NVIC_EncodePriority>
 8000c60:	4602      	mov	r2, r0
 8000c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff5f 	bl	8000b2c <__NVIC_SetPriority>
}
 8000c6e:	bf00      	nop
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff35 	bl	8000af4 <__NVIC_EnableIRQ>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ffa2 	bl	8000be4 <SysTick_Config>
 8000ca0:	4603      	mov	r3, r0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b085      	sub	sp, #20
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d008      	beq.n	8000cd4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2204      	movs	r2, #4
 8000cc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e020      	b.n	8000d16 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f022 020e 	bic.w	r2, r2, #14
 8000ce2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f022 0201 	bic.w	r2, r2, #1
 8000cf2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000d02:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2201      	movs	r2, #1
 8000d08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d005      	beq.n	8000d44 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2204      	movs	r2, #4
 8000d3c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	e051      	b.n	8000de8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f022 020e 	bic.w	r2, r2, #14
 8000d52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f022 0201 	bic.w	r2, r2, #1
 8000d62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a22      	ldr	r2, [pc, #136]	; (8000df4 <HAL_DMA_Abort_IT+0xd4>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d029      	beq.n	8000dc2 <HAL_DMA_Abort_IT+0xa2>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a21      	ldr	r2, [pc, #132]	; (8000df8 <HAL_DMA_Abort_IT+0xd8>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d022      	beq.n	8000dbe <HAL_DMA_Abort_IT+0x9e>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a1f      	ldr	r2, [pc, #124]	; (8000dfc <HAL_DMA_Abort_IT+0xdc>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d01a      	beq.n	8000db8 <HAL_DMA_Abort_IT+0x98>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a1e      	ldr	r2, [pc, #120]	; (8000e00 <HAL_DMA_Abort_IT+0xe0>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d012      	beq.n	8000db2 <HAL_DMA_Abort_IT+0x92>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a1c      	ldr	r2, [pc, #112]	; (8000e04 <HAL_DMA_Abort_IT+0xe4>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d00a      	beq.n	8000dac <HAL_DMA_Abort_IT+0x8c>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a1b      	ldr	r2, [pc, #108]	; (8000e08 <HAL_DMA_Abort_IT+0xe8>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d102      	bne.n	8000da6 <HAL_DMA_Abort_IT+0x86>
 8000da0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000da4:	e00e      	b.n	8000dc4 <HAL_DMA_Abort_IT+0xa4>
 8000da6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000daa:	e00b      	b.n	8000dc4 <HAL_DMA_Abort_IT+0xa4>
 8000dac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db0:	e008      	b.n	8000dc4 <HAL_DMA_Abort_IT+0xa4>
 8000db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db6:	e005      	b.n	8000dc4 <HAL_DMA_Abort_IT+0xa4>
 8000db8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dbc:	e002      	b.n	8000dc4 <HAL_DMA_Abort_IT+0xa4>
 8000dbe:	2310      	movs	r3, #16
 8000dc0:	e000      	b.n	8000dc4 <HAL_DMA_Abort_IT+0xa4>
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	4a11      	ldr	r2, [pc, #68]	; (8000e0c <HAL_DMA_Abort_IT+0xec>)
 8000dc6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	4798      	blx	r3
    } 
  }
  return status;
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40020008 	.word	0x40020008
 8000df8:	4002001c 	.word	0x4002001c
 8000dfc:	40020030 	.word	0x40020030
 8000e00:	40020044 	.word	0x40020044
 8000e04:	40020058 	.word	0x40020058
 8000e08:	4002006c 	.word	0x4002006c
 8000e0c:	40020000 	.word	0x40020000

08000e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b08b      	sub	sp, #44	; 0x2c
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e22:	e169      	b.n	80010f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e24:	2201      	movs	r2, #1
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	69fa      	ldr	r2, [r7, #28]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	f040 8158 	bne.w	80010f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	4a9a      	ldr	r2, [pc, #616]	; (80010b0 <HAL_GPIO_Init+0x2a0>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d05e      	beq.n	8000f0a <HAL_GPIO_Init+0xfa>
 8000e4c:	4a98      	ldr	r2, [pc, #608]	; (80010b0 <HAL_GPIO_Init+0x2a0>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d875      	bhi.n	8000f3e <HAL_GPIO_Init+0x12e>
 8000e52:	4a98      	ldr	r2, [pc, #608]	; (80010b4 <HAL_GPIO_Init+0x2a4>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d058      	beq.n	8000f0a <HAL_GPIO_Init+0xfa>
 8000e58:	4a96      	ldr	r2, [pc, #600]	; (80010b4 <HAL_GPIO_Init+0x2a4>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d86f      	bhi.n	8000f3e <HAL_GPIO_Init+0x12e>
 8000e5e:	4a96      	ldr	r2, [pc, #600]	; (80010b8 <HAL_GPIO_Init+0x2a8>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d052      	beq.n	8000f0a <HAL_GPIO_Init+0xfa>
 8000e64:	4a94      	ldr	r2, [pc, #592]	; (80010b8 <HAL_GPIO_Init+0x2a8>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d869      	bhi.n	8000f3e <HAL_GPIO_Init+0x12e>
 8000e6a:	4a94      	ldr	r2, [pc, #592]	; (80010bc <HAL_GPIO_Init+0x2ac>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d04c      	beq.n	8000f0a <HAL_GPIO_Init+0xfa>
 8000e70:	4a92      	ldr	r2, [pc, #584]	; (80010bc <HAL_GPIO_Init+0x2ac>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d863      	bhi.n	8000f3e <HAL_GPIO_Init+0x12e>
 8000e76:	4a92      	ldr	r2, [pc, #584]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d046      	beq.n	8000f0a <HAL_GPIO_Init+0xfa>
 8000e7c:	4a90      	ldr	r2, [pc, #576]	; (80010c0 <HAL_GPIO_Init+0x2b0>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d85d      	bhi.n	8000f3e <HAL_GPIO_Init+0x12e>
 8000e82:	2b12      	cmp	r3, #18
 8000e84:	d82a      	bhi.n	8000edc <HAL_GPIO_Init+0xcc>
 8000e86:	2b12      	cmp	r3, #18
 8000e88:	d859      	bhi.n	8000f3e <HAL_GPIO_Init+0x12e>
 8000e8a:	a201      	add	r2, pc, #4	; (adr r2, 8000e90 <HAL_GPIO_Init+0x80>)
 8000e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e90:	08000f0b 	.word	0x08000f0b
 8000e94:	08000ee5 	.word	0x08000ee5
 8000e98:	08000ef7 	.word	0x08000ef7
 8000e9c:	08000f39 	.word	0x08000f39
 8000ea0:	08000f3f 	.word	0x08000f3f
 8000ea4:	08000f3f 	.word	0x08000f3f
 8000ea8:	08000f3f 	.word	0x08000f3f
 8000eac:	08000f3f 	.word	0x08000f3f
 8000eb0:	08000f3f 	.word	0x08000f3f
 8000eb4:	08000f3f 	.word	0x08000f3f
 8000eb8:	08000f3f 	.word	0x08000f3f
 8000ebc:	08000f3f 	.word	0x08000f3f
 8000ec0:	08000f3f 	.word	0x08000f3f
 8000ec4:	08000f3f 	.word	0x08000f3f
 8000ec8:	08000f3f 	.word	0x08000f3f
 8000ecc:	08000f3f 	.word	0x08000f3f
 8000ed0:	08000f3f 	.word	0x08000f3f
 8000ed4:	08000eed 	.word	0x08000eed
 8000ed8:	08000f01 	.word	0x08000f01
 8000edc:	4a79      	ldr	r2, [pc, #484]	; (80010c4 <HAL_GPIO_Init+0x2b4>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d013      	beq.n	8000f0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ee2:	e02c      	b.n	8000f3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	623b      	str	r3, [r7, #32]
          break;
 8000eea:	e029      	b.n	8000f40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	623b      	str	r3, [r7, #32]
          break;
 8000ef4:	e024      	b.n	8000f40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	3308      	adds	r3, #8
 8000efc:	623b      	str	r3, [r7, #32]
          break;
 8000efe:	e01f      	b.n	8000f40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	330c      	adds	r3, #12
 8000f06:	623b      	str	r3, [r7, #32]
          break;
 8000f08:	e01a      	b.n	8000f40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d102      	bne.n	8000f18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f12:	2304      	movs	r3, #4
 8000f14:	623b      	str	r3, [r7, #32]
          break;
 8000f16:	e013      	b.n	8000f40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d105      	bne.n	8000f2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f20:	2308      	movs	r3, #8
 8000f22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	611a      	str	r2, [r3, #16]
          break;
 8000f2a:	e009      	b.n	8000f40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f2c:	2308      	movs	r3, #8
 8000f2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	69fa      	ldr	r2, [r7, #28]
 8000f34:	615a      	str	r2, [r3, #20]
          break;
 8000f36:	e003      	b.n	8000f40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
          break;
 8000f3c:	e000      	b.n	8000f40 <HAL_GPIO_Init+0x130>
          break;
 8000f3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	2bff      	cmp	r3, #255	; 0xff
 8000f44:	d801      	bhi.n	8000f4a <HAL_GPIO_Init+0x13a>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	e001      	b.n	8000f4e <HAL_GPIO_Init+0x13e>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	2bff      	cmp	r3, #255	; 0xff
 8000f54:	d802      	bhi.n	8000f5c <HAL_GPIO_Init+0x14c>
 8000f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	e002      	b.n	8000f62 <HAL_GPIO_Init+0x152>
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	3b08      	subs	r3, #8
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	210f      	movs	r1, #15
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	401a      	ands	r2, r3
 8000f74:	6a39      	ldr	r1, [r7, #32]
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 80b1 	beq.w	80010f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f90:	4b4d      	ldr	r3, [pc, #308]	; (80010c8 <HAL_GPIO_Init+0x2b8>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a4c      	ldr	r2, [pc, #304]	; (80010c8 <HAL_GPIO_Init+0x2b8>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b4a      	ldr	r3, [pc, #296]	; (80010c8 <HAL_GPIO_Init+0x2b8>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fa8:	4a48      	ldr	r2, [pc, #288]	; (80010cc <HAL_GPIO_Init+0x2bc>)
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	3302      	adds	r3, #2
 8000fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	220f      	movs	r2, #15
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a40      	ldr	r2, [pc, #256]	; (80010d0 <HAL_GPIO_Init+0x2c0>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d013      	beq.n	8000ffc <HAL_GPIO_Init+0x1ec>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a3f      	ldr	r2, [pc, #252]	; (80010d4 <HAL_GPIO_Init+0x2c4>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d00d      	beq.n	8000ff8 <HAL_GPIO_Init+0x1e8>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a3e      	ldr	r2, [pc, #248]	; (80010d8 <HAL_GPIO_Init+0x2c8>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d007      	beq.n	8000ff4 <HAL_GPIO_Init+0x1e4>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a3d      	ldr	r2, [pc, #244]	; (80010dc <HAL_GPIO_Init+0x2cc>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d101      	bne.n	8000ff0 <HAL_GPIO_Init+0x1e0>
 8000fec:	2303      	movs	r3, #3
 8000fee:	e006      	b.n	8000ffe <HAL_GPIO_Init+0x1ee>
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	e004      	b.n	8000ffe <HAL_GPIO_Init+0x1ee>
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	e002      	b.n	8000ffe <HAL_GPIO_Init+0x1ee>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e000      	b.n	8000ffe <HAL_GPIO_Init+0x1ee>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001000:	f002 0203 	and.w	r2, r2, #3
 8001004:	0092      	lsls	r2, r2, #2
 8001006:	4093      	lsls	r3, r2
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	4313      	orrs	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800100e:	492f      	ldr	r1, [pc, #188]	; (80010cc <HAL_GPIO_Init+0x2bc>)
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	089b      	lsrs	r3, r3, #2
 8001014:	3302      	adds	r3, #2
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d006      	beq.n	8001036 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001028:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	492c      	ldr	r1, [pc, #176]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	608b      	str	r3, [r1, #8]
 8001034:	e006      	b.n	8001044 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001036:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	43db      	mvns	r3, r3
 800103e:	4928      	ldr	r1, [pc, #160]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 8001040:	4013      	ands	r3, r2
 8001042:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d006      	beq.n	800105e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001050:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 8001052:	68da      	ldr	r2, [r3, #12]
 8001054:	4922      	ldr	r1, [pc, #136]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	60cb      	str	r3, [r1, #12]
 800105c:	e006      	b.n	800106c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800105e:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	43db      	mvns	r3, r3
 8001066:	491e      	ldr	r1, [pc, #120]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 8001068:	4013      	ands	r3, r2
 800106a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d006      	beq.n	8001086 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001078:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	4918      	ldr	r1, [pc, #96]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	604b      	str	r3, [r1, #4]
 8001084:	e006      	b.n	8001094 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	43db      	mvns	r3, r3
 800108e:	4914      	ldr	r1, [pc, #80]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 8001090:	4013      	ands	r3, r2
 8001092:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d021      	beq.n	80010e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	490e      	ldr	r1, [pc, #56]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	600b      	str	r3, [r1, #0]
 80010ac:	e021      	b.n	80010f2 <HAL_GPIO_Init+0x2e2>
 80010ae:	bf00      	nop
 80010b0:	10320000 	.word	0x10320000
 80010b4:	10310000 	.word	0x10310000
 80010b8:	10220000 	.word	0x10220000
 80010bc:	10210000 	.word	0x10210000
 80010c0:	10120000 	.word	0x10120000
 80010c4:	10110000 	.word	0x10110000
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40010000 	.word	0x40010000
 80010d0:	40010800 	.word	0x40010800
 80010d4:	40010c00 	.word	0x40010c00
 80010d8:	40011000 	.word	0x40011000
 80010dc:	40011400 	.word	0x40011400
 80010e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_GPIO_Init+0x304>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	4909      	ldr	r1, [pc, #36]	; (8001114 <HAL_GPIO_Init+0x304>)
 80010ee:	4013      	ands	r3, r2
 80010f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f4:	3301      	adds	r3, #1
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	f47f ae8e 	bne.w	8000e24 <HAL_GPIO_Init+0x14>
  }
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	372c      	adds	r7, #44	; 0x2c
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	40010400 	.word	0x40010400

08001118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
 8001124:	4613      	mov	r3, r2
 8001126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001128:	787b      	ldrb	r3, [r7, #1]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001134:	e003      	b.n	800113e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001136:	887b      	ldrh	r3, [r7, #2]
 8001138:	041a      	lsls	r2, r3, #16
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	611a      	str	r2, [r3, #16]
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800115a:	887a      	ldrh	r2, [r7, #2]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4013      	ands	r3, r2
 8001160:	041a      	lsls	r2, r3, #16
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	43d9      	mvns	r1, r3
 8001166:	887b      	ldrh	r3, [r7, #2]
 8001168:	400b      	ands	r3, r1
 800116a:	431a      	orrs	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	611a      	str	r2, [r3, #16]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
	...

0800117c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e272      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 8087 	beq.w	80012aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800119c:	4b92      	ldr	r3, [pc, #584]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 030c 	and.w	r3, r3, #12
 80011a4:	2b04      	cmp	r3, #4
 80011a6:	d00c      	beq.n	80011c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011a8:	4b8f      	ldr	r3, [pc, #572]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 030c 	and.w	r3, r3, #12
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d112      	bne.n	80011da <HAL_RCC_OscConfig+0x5e>
 80011b4:	4b8c      	ldr	r3, [pc, #560]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c0:	d10b      	bne.n	80011da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c2:	4b89      	ldr	r3, [pc, #548]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d06c      	beq.n	80012a8 <HAL_RCC_OscConfig+0x12c>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d168      	bne.n	80012a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e24c      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e2:	d106      	bne.n	80011f2 <HAL_RCC_OscConfig+0x76>
 80011e4:	4b80      	ldr	r3, [pc, #512]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a7f      	ldr	r2, [pc, #508]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	e02e      	b.n	8001250 <HAL_RCC_OscConfig+0xd4>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10c      	bne.n	8001214 <HAL_RCC_OscConfig+0x98>
 80011fa:	4b7b      	ldr	r3, [pc, #492]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a7a      	ldr	r2, [pc, #488]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b78      	ldr	r3, [pc, #480]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a77      	ldr	r2, [pc, #476]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800120c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e01d      	b.n	8001250 <HAL_RCC_OscConfig+0xd4>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800121c:	d10c      	bne.n	8001238 <HAL_RCC_OscConfig+0xbc>
 800121e:	4b72      	ldr	r3, [pc, #456]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a71      	ldr	r2, [pc, #452]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	4b6f      	ldr	r3, [pc, #444]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a6e      	ldr	r2, [pc, #440]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	e00b      	b.n	8001250 <HAL_RCC_OscConfig+0xd4>
 8001238:	4b6b      	ldr	r3, [pc, #428]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a6a      	ldr	r2, [pc, #424]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800123e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b68      	ldr	r3, [pc, #416]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a67      	ldr	r2, [pc, #412]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800124a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d013      	beq.n	8001280 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001258:	f7ff fc10 	bl	8000a7c <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001260:	f7ff fc0c 	bl	8000a7c <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b64      	cmp	r3, #100	; 0x64
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e200      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	4b5d      	ldr	r3, [pc, #372]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0xe4>
 800127e:	e014      	b.n	80012aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff fbfc 	bl	8000a7c <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001288:	f7ff fbf8 	bl	8000a7c <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b64      	cmp	r3, #100	; 0x64
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e1ec      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129a:	4b53      	ldr	r3, [pc, #332]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0x10c>
 80012a6:	e000      	b.n	80012aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d063      	beq.n	800137e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012b6:	4b4c      	ldr	r3, [pc, #304]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00b      	beq.n	80012da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012c2:	4b49      	ldr	r3, [pc, #292]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d11c      	bne.n	8001308 <HAL_RCC_OscConfig+0x18c>
 80012ce:	4b46      	ldr	r3, [pc, #280]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d116      	bne.n	8001308 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012da:	4b43      	ldr	r3, [pc, #268]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <HAL_RCC_OscConfig+0x176>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d001      	beq.n	80012f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e1c0      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f2:	4b3d      	ldr	r3, [pc, #244]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	4939      	ldr	r1, [pc, #228]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001302:	4313      	orrs	r3, r2
 8001304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001306:	e03a      	b.n	800137e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d020      	beq.n	8001352 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001310:	4b36      	ldr	r3, [pc, #216]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 8001312:	2201      	movs	r2, #1
 8001314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001316:	f7ff fbb1 	bl	8000a7c <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800131e:	f7ff fbad 	bl	8000a7c <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e1a1      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001330:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133c:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	4927      	ldr	r1, [pc, #156]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800134c:	4313      	orrs	r3, r2
 800134e:	600b      	str	r3, [r1, #0]
 8001350:	e015      	b.n	800137e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001352:	4b26      	ldr	r3, [pc, #152]	; (80013ec <HAL_RCC_OscConfig+0x270>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fb90 	bl	8000a7c <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001360:	f7ff fb8c 	bl	8000a7c <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e180      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001372:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b00      	cmp	r3, #0
 8001388:	d03a      	beq.n	8001400 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d019      	beq.n	80013c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <HAL_RCC_OscConfig+0x274>)
 8001394:	2201      	movs	r2, #1
 8001396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001398:	f7ff fb70 	bl	8000a7c <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a0:	f7ff fb6c 	bl	8000a7c <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e160      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013be:	2001      	movs	r0, #1
 80013c0:	f000 face 	bl	8001960 <RCC_Delay>
 80013c4:	e01c      	b.n	8001400 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_RCC_OscConfig+0x274>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013cc:	f7ff fb56 	bl	8000a7c <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d2:	e00f      	b.n	80013f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d4:	f7ff fb52 	bl	8000a7c <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d908      	bls.n	80013f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e146      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000
 80013ec:	42420000 	.word	0x42420000
 80013f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f4:	4b92      	ldr	r3, [pc, #584]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1e9      	bne.n	80013d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80a6 	beq.w	800155a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001412:	4b8b      	ldr	r3, [pc, #556]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10d      	bne.n	800143a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	4b88      	ldr	r3, [pc, #544]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	4a87      	ldr	r2, [pc, #540]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001428:	61d3      	str	r3, [r2, #28]
 800142a:	4b85      	ldr	r3, [pc, #532]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001436:	2301      	movs	r3, #1
 8001438:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143a:	4b82      	ldr	r3, [pc, #520]	; (8001644 <HAL_RCC_OscConfig+0x4c8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001442:	2b00      	cmp	r3, #0
 8001444:	d118      	bne.n	8001478 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001446:	4b7f      	ldr	r3, [pc, #508]	; (8001644 <HAL_RCC_OscConfig+0x4c8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a7e      	ldr	r2, [pc, #504]	; (8001644 <HAL_RCC_OscConfig+0x4c8>)
 800144c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001452:	f7ff fb13 	bl	8000a7c <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800145a:	f7ff fb0f 	bl	8000a7c <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b64      	cmp	r3, #100	; 0x64
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e103      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146c:	4b75      	ldr	r3, [pc, #468]	; (8001644 <HAL_RCC_OscConfig+0x4c8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f0      	beq.n	800145a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d106      	bne.n	800148e <HAL_RCC_OscConfig+0x312>
 8001480:	4b6f      	ldr	r3, [pc, #444]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	4a6e      	ldr	r2, [pc, #440]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6213      	str	r3, [r2, #32]
 800148c:	e02d      	b.n	80014ea <HAL_RCC_OscConfig+0x36e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10c      	bne.n	80014b0 <HAL_RCC_OscConfig+0x334>
 8001496:	4b6a      	ldr	r3, [pc, #424]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	4a69      	ldr	r2, [pc, #420]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 800149c:	f023 0301 	bic.w	r3, r3, #1
 80014a0:	6213      	str	r3, [r2, #32]
 80014a2:	4b67      	ldr	r3, [pc, #412]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	4a66      	ldr	r2, [pc, #408]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014a8:	f023 0304 	bic.w	r3, r3, #4
 80014ac:	6213      	str	r3, [r2, #32]
 80014ae:	e01c      	b.n	80014ea <HAL_RCC_OscConfig+0x36e>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b05      	cmp	r3, #5
 80014b6:	d10c      	bne.n	80014d2 <HAL_RCC_OscConfig+0x356>
 80014b8:	4b61      	ldr	r3, [pc, #388]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4a60      	ldr	r2, [pc, #384]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	6213      	str	r3, [r2, #32]
 80014c4:	4b5e      	ldr	r3, [pc, #376]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	4a5d      	ldr	r2, [pc, #372]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6213      	str	r3, [r2, #32]
 80014d0:	e00b      	b.n	80014ea <HAL_RCC_OscConfig+0x36e>
 80014d2:	4b5b      	ldr	r3, [pc, #364]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	4a5a      	ldr	r2, [pc, #360]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	f023 0301 	bic.w	r3, r3, #1
 80014dc:	6213      	str	r3, [r2, #32]
 80014de:	4b58      	ldr	r3, [pc, #352]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	4a57      	ldr	r2, [pc, #348]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	f023 0304 	bic.w	r3, r3, #4
 80014e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d015      	beq.n	800151e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f2:	f7ff fac3 	bl	8000a7c <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f8:	e00a      	b.n	8001510 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014fa:	f7ff fabf 	bl	8000a7c <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	f241 3288 	movw	r2, #5000	; 0x1388
 8001508:	4293      	cmp	r3, r2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e0b1      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001510:	4b4b      	ldr	r3, [pc, #300]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0ee      	beq.n	80014fa <HAL_RCC_OscConfig+0x37e>
 800151c:	e014      	b.n	8001548 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151e:	f7ff faad 	bl	8000a7c <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001524:	e00a      	b.n	800153c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001526:	f7ff faa9 	bl	8000a7c <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	f241 3288 	movw	r2, #5000	; 0x1388
 8001534:	4293      	cmp	r3, r2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e09b      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153c:	4b40      	ldr	r3, [pc, #256]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1ee      	bne.n	8001526 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001548:	7dfb      	ldrb	r3, [r7, #23]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d105      	bne.n	800155a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800154e:	4b3c      	ldr	r3, [pc, #240]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	4a3b      	ldr	r2, [pc, #236]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001558:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 8087 	beq.w	8001672 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001564:	4b36      	ldr	r3, [pc, #216]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	2b08      	cmp	r3, #8
 800156e:	d061      	beq.n	8001634 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69db      	ldr	r3, [r3, #28]
 8001574:	2b02      	cmp	r3, #2
 8001576:	d146      	bne.n	8001606 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001578:	4b33      	ldr	r3, [pc, #204]	; (8001648 <HAL_RCC_OscConfig+0x4cc>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157e:	f7ff fa7d 	bl	8000a7c <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001586:	f7ff fa79 	bl	8000a7c <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e06d      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001598:	4b29      	ldr	r3, [pc, #164]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f0      	bne.n	8001586 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ac:	d108      	bne.n	80015c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015ae:	4b24      	ldr	r3, [pc, #144]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	4921      	ldr	r1, [pc, #132]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015c0:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a19      	ldr	r1, [r3, #32]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	430b      	orrs	r3, r1
 80015d2:	491b      	ldr	r1, [pc, #108]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d8:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <HAL_RCC_OscConfig+0x4cc>)
 80015da:	2201      	movs	r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015de:	f7ff fa4d 	bl	8000a7c <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e6:	f7ff fa49 	bl	8000a7c <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e03d      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x46a>
 8001604:	e035      	b.n	8001672 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_RCC_OscConfig+0x4cc>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fa36 	bl	8000a7c <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001614:	f7ff fa32 	bl	8000a7c <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e026      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x498>
 8001632:	e01e      	b.n	8001672 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d107      	bne.n	800164c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e019      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
 8001640:	40021000 	.word	0x40021000
 8001644:	40007000 	.word	0x40007000
 8001648:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <HAL_RCC_OscConfig+0x500>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	429a      	cmp	r2, r3
 800165e:	d106      	bne.n	800166e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166a:	429a      	cmp	r2, r3
 800166c:	d001      	beq.n	8001672 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40021000 	.word	0x40021000

08001680 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0d0      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001694:	4b6a      	ldr	r3, [pc, #424]	; (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d910      	bls.n	80016c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b67      	ldr	r3, [pc, #412]	; (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 0207 	bic.w	r2, r3, #7
 80016aa:	4965      	ldr	r1, [pc, #404]	; (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b2:	4b63      	ldr	r3, [pc, #396]	; (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d001      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0b8      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d020      	beq.n	8001712 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016dc:	4b59      	ldr	r3, [pc, #356]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	4a58      	ldr	r2, [pc, #352]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016f4:	4b53      	ldr	r3, [pc, #332]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	4a52      	ldr	r2, [pc, #328]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80016fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001700:	4b50      	ldr	r3, [pc, #320]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	494d      	ldr	r1, [pc, #308]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	4313      	orrs	r3, r2
 8001710:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d040      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d107      	bne.n	8001736 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	4b47      	ldr	r3, [pc, #284]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d115      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e07f      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d107      	bne.n	800174e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173e:	4b41      	ldr	r3, [pc, #260]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d109      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e073      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174e:	4b3d      	ldr	r3, [pc, #244]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e06b      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800175e:	4b39      	ldr	r3, [pc, #228]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f023 0203 	bic.w	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4936      	ldr	r1, [pc, #216]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001770:	f7ff f984 	bl	8000a7c <HAL_GetTick>
 8001774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001776:	e00a      	b.n	800178e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001778:	f7ff f980 	bl	8000a7c <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	; 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e053      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178e:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 020c 	and.w	r2, r3, #12
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	429a      	cmp	r2, r3
 800179e:	d1eb      	bne.n	8001778 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017a0:	4b27      	ldr	r3, [pc, #156]	; (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d210      	bcs.n	80017d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ae:	4b24      	ldr	r3, [pc, #144]	; (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 0207 	bic.w	r2, r3, #7
 80017b6:	4922      	ldr	r1, [pc, #136]	; (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017be:	4b20      	ldr	r3, [pc, #128]	; (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e032      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d008      	beq.n	80017ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017dc:	4b19      	ldr	r3, [pc, #100]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	4916      	ldr	r1, [pc, #88]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d009      	beq.n	800180e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	490e      	ldr	r1, [pc, #56]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	4313      	orrs	r3, r2
 800180c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800180e:	f000 f821 	bl	8001854 <HAL_RCC_GetSysClockFreq>
 8001812:	4602      	mov	r2, r0
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	091b      	lsrs	r3, r3, #4
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	490a      	ldr	r1, [pc, #40]	; (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 8001820:	5ccb      	ldrb	r3, [r1, r3]
 8001822:	fa22 f303 	lsr.w	r3, r2, r3
 8001826:	4a09      	ldr	r2, [pc, #36]	; (800184c <HAL_RCC_ClockConfig+0x1cc>)
 8001828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_RCC_ClockConfig+0x1d0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff f8e2 	bl	80009f8 <HAL_InitTick>

  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40022000 	.word	0x40022000
 8001844:	40021000 	.word	0x40021000
 8001848:	080043b4 	.word	0x080043b4
 800184c:	20000000 	.word	0x20000000
 8001850:	20000004 	.word	0x20000004

08001854 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001854:	b480      	push	{r7}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800186e:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b04      	cmp	r3, #4
 800187c:	d002      	beq.n	8001884 <HAL_RCC_GetSysClockFreq+0x30>
 800187e:	2b08      	cmp	r3, #8
 8001880:	d003      	beq.n	800188a <HAL_RCC_GetSysClockFreq+0x36>
 8001882:	e027      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001884:	4b19      	ldr	r3, [pc, #100]	; (80018ec <HAL_RCC_GetSysClockFreq+0x98>)
 8001886:	613b      	str	r3, [r7, #16]
      break;
 8001888:	e027      	b.n	80018da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	0c9b      	lsrs	r3, r3, #18
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001894:	5cd3      	ldrb	r3, [r2, r3]
 8001896:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d010      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	0c5b      	lsrs	r3, r3, #17
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	4a11      	ldr	r2, [pc, #68]	; (80018f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018ae:	5cd3      	ldrb	r3, [r2, r3]
 80018b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a0d      	ldr	r2, [pc, #52]	; (80018ec <HAL_RCC_GetSysClockFreq+0x98>)
 80018b6:	fb03 f202 	mul.w	r2, r3, r2
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	e004      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a0c      	ldr	r2, [pc, #48]	; (80018f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018c8:	fb02 f303 	mul.w	r3, r2, r3
 80018cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	613b      	str	r3, [r7, #16]
      break;
 80018d2:	e002      	b.n	80018da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <HAL_RCC_GetSysClockFreq+0x98>)
 80018d6:	613b      	str	r3, [r7, #16]
      break;
 80018d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018da:	693b      	ldr	r3, [r7, #16]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	371c      	adds	r7, #28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000
 80018ec:	007a1200 	.word	0x007a1200
 80018f0:	080043cc 	.word	0x080043cc
 80018f4:	080043dc 	.word	0x080043dc
 80018f8:	003d0900 	.word	0x003d0900

080018fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001900:	4b02      	ldr	r3, [pc, #8]	; (800190c <HAL_RCC_GetHCLKFreq+0x10>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	20000000 	.word	0x20000000

08001910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001914:	f7ff fff2 	bl	80018fc <HAL_RCC_GetHCLKFreq>
 8001918:	4602      	mov	r2, r0
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	0a1b      	lsrs	r3, r3, #8
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	4903      	ldr	r1, [pc, #12]	; (8001934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001926:	5ccb      	ldrb	r3, [r1, r3]
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800192c:	4618      	mov	r0, r3
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40021000 	.word	0x40021000
 8001934:	080043c4 	.word	0x080043c4

08001938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800193c:	f7ff ffde 	bl	80018fc <HAL_RCC_GetHCLKFreq>
 8001940:	4602      	mov	r2, r0
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	0adb      	lsrs	r3, r3, #11
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	4903      	ldr	r1, [pc, #12]	; (800195c <HAL_RCC_GetPCLK2Freq+0x24>)
 800194e:	5ccb      	ldrb	r3, [r1, r3]
 8001950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40021000 	.word	0x40021000
 800195c:	080043c4 	.word	0x080043c4

08001960 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <RCC_Delay+0x34>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <RCC_Delay+0x38>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0a5b      	lsrs	r3, r3, #9
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	fb02 f303 	mul.w	r3, r2, r3
 800197a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800197c:	bf00      	nop
  }
  while (Delay --);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1e5a      	subs	r2, r3, #1
 8001982:	60fa      	str	r2, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f9      	bne.n	800197c <RCC_Delay+0x1c>
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	20000000 	.word	0x20000000
 8001998:	10624dd3 	.word	0x10624dd3

0800199c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e041      	b.n	8001a32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d106      	bne.n	80019c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7fe fe98 	bl	80006f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2202      	movs	r2, #2
 80019cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3304      	adds	r3, #4
 80019d8:	4619      	mov	r1, r3
 80019da:	4610      	mov	r0, r2
 80019dc:	f000 fd04 	bl	80023e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d001      	beq.n	8001a54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e03a      	b.n	8001aca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2202      	movs	r2, #2
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0201 	orr.w	r2, r2, #1
 8001a6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a18      	ldr	r2, [pc, #96]	; (8001ad4 <HAL_TIM_Base_Start_IT+0x98>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d00e      	beq.n	8001a94 <HAL_TIM_Base_Start_IT+0x58>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a7e:	d009      	beq.n	8001a94 <HAL_TIM_Base_Start_IT+0x58>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a14      	ldr	r2, [pc, #80]	; (8001ad8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d004      	beq.n	8001a94 <HAL_TIM_Base_Start_IT+0x58>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a13      	ldr	r2, [pc, #76]	; (8001adc <HAL_TIM_Base_Start_IT+0xa0>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d111      	bne.n	8001ab8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d010      	beq.n	8001ac8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f042 0201 	orr.w	r2, r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ab6:	e007      	b.n	8001ac8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0201 	orr.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	40012c00 	.word	0x40012c00
 8001ad8:	40000400 	.word	0x40000400
 8001adc:	40000800 	.word	0x40000800

08001ae0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e041      	b.n	8001b76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d106      	bne.n	8001b0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f839 	bl	8001b7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4610      	mov	r0, r2
 8001b20:	f000 fc62 	bl	80023e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d109      	bne.n	8001bb4 <HAL_TIM_PWM_Start+0x24>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	bf14      	ite	ne
 8001bac:	2301      	movne	r3, #1
 8001bae:	2300      	moveq	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	e022      	b.n	8001bfa <HAL_TIM_PWM_Start+0x6a>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d109      	bne.n	8001bce <HAL_TIM_PWM_Start+0x3e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	bf14      	ite	ne
 8001bc6:	2301      	movne	r3, #1
 8001bc8:	2300      	moveq	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	e015      	b.n	8001bfa <HAL_TIM_PWM_Start+0x6a>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d109      	bne.n	8001be8 <HAL_TIM_PWM_Start+0x58>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	bf14      	ite	ne
 8001be0:	2301      	movne	r3, #1
 8001be2:	2300      	moveq	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	e008      	b.n	8001bfa <HAL_TIM_PWM_Start+0x6a>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	bf14      	ite	ne
 8001bf4:	2301      	movne	r3, #1
 8001bf6:	2300      	moveq	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e05e      	b.n	8001cc0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d104      	bne.n	8001c12 <HAL_TIM_PWM_Start+0x82>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c10:	e013      	b.n	8001c3a <HAL_TIM_PWM_Start+0xaa>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d104      	bne.n	8001c22 <HAL_TIM_PWM_Start+0x92>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c20:	e00b      	b.n	8001c3a <HAL_TIM_PWM_Start+0xaa>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d104      	bne.n	8001c32 <HAL_TIM_PWM_Start+0xa2>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c30:	e003      	b.n	8001c3a <HAL_TIM_PWM_Start+0xaa>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2202      	movs	r2, #2
 8001c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	6839      	ldr	r1, [r7, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 ff5d 	bl	8002b02 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a1e      	ldr	r2, [pc, #120]	; (8001cc8 <HAL_TIM_PWM_Start+0x138>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d107      	bne.n	8001c62 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a18      	ldr	r2, [pc, #96]	; (8001cc8 <HAL_TIM_PWM_Start+0x138>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d00e      	beq.n	8001c8a <HAL_TIM_PWM_Start+0xfa>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c74:	d009      	beq.n	8001c8a <HAL_TIM_PWM_Start+0xfa>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <HAL_TIM_PWM_Start+0x13c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d004      	beq.n	8001c8a <HAL_TIM_PWM_Start+0xfa>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <HAL_TIM_PWM_Start+0x140>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d111      	bne.n	8001cae <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2b06      	cmp	r3, #6
 8001c9a:	d010      	beq.n	8001cbe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cac:	e007      	b.n	8001cbe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f042 0201 	orr.w	r2, r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40012c00 	.word	0x40012c00
 8001ccc:	40000400 	.word	0x40000400
 8001cd0:	40000800 	.word	0x40000800

08001cd4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e041      	b.n	8001d6a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f839 	bl	8001d72 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3304      	adds	r3, #4
 8001d10:	4619      	mov	r1, r3
 8001d12:	4610      	mov	r0, r2
 8001d14:	f000 fb68 	bl	80023e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d104      	bne.n	8001da2 <HAL_TIM_IC_Start_IT+0x1e>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	e013      	b.n	8001dca <HAL_TIM_IC_Start_IT+0x46>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d104      	bne.n	8001db2 <HAL_TIM_IC_Start_IT+0x2e>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	e00b      	b.n	8001dca <HAL_TIM_IC_Start_IT+0x46>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d104      	bne.n	8001dc2 <HAL_TIM_IC_Start_IT+0x3e>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	e003      	b.n	8001dca <HAL_TIM_IC_Start_IT+0x46>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d104      	bne.n	8001ddc <HAL_TIM_IC_Start_IT+0x58>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	e013      	b.n	8001e04 <HAL_TIM_IC_Start_IT+0x80>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d104      	bne.n	8001dec <HAL_TIM_IC_Start_IT+0x68>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	e00b      	b.n	8001e04 <HAL_TIM_IC_Start_IT+0x80>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d104      	bne.n	8001dfc <HAL_TIM_IC_Start_IT+0x78>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	e003      	b.n	8001e04 <HAL_TIM_IC_Start_IT+0x80>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001e06:	7bbb      	ldrb	r3, [r7, #14]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d102      	bne.n	8001e12 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001e0c:	7b7b      	ldrb	r3, [r7, #13]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d001      	beq.n	8001e16 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e0b8      	b.n	8001f88 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d104      	bne.n	8001e26 <HAL_TIM_IC_Start_IT+0xa2>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e24:	e013      	b.n	8001e4e <HAL_TIM_IC_Start_IT+0xca>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d104      	bne.n	8001e36 <HAL_TIM_IC_Start_IT+0xb2>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e34:	e00b      	b.n	8001e4e <HAL_TIM_IC_Start_IT+0xca>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d104      	bne.n	8001e46 <HAL_TIM_IC_Start_IT+0xc2>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e44:	e003      	b.n	8001e4e <HAL_TIM_IC_Start_IT+0xca>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2202      	movs	r2, #2
 8001e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d104      	bne.n	8001e5e <HAL_TIM_IC_Start_IT+0xda>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e5c:	e013      	b.n	8001e86 <HAL_TIM_IC_Start_IT+0x102>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d104      	bne.n	8001e6e <HAL_TIM_IC_Start_IT+0xea>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2202      	movs	r2, #2
 8001e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e6c:	e00b      	b.n	8001e86 <HAL_TIM_IC_Start_IT+0x102>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d104      	bne.n	8001e7e <HAL_TIM_IC_Start_IT+0xfa>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2202      	movs	r2, #2
 8001e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e7c:	e003      	b.n	8001e86 <HAL_TIM_IC_Start_IT+0x102>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2202      	movs	r2, #2
 8001e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b0c      	cmp	r3, #12
 8001e8a:	d841      	bhi.n	8001f10 <HAL_TIM_IC_Start_IT+0x18c>
 8001e8c:	a201      	add	r2, pc, #4	; (adr r2, 8001e94 <HAL_TIM_IC_Start_IT+0x110>)
 8001e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e92:	bf00      	nop
 8001e94:	08001ec9 	.word	0x08001ec9
 8001e98:	08001f11 	.word	0x08001f11
 8001e9c:	08001f11 	.word	0x08001f11
 8001ea0:	08001f11 	.word	0x08001f11
 8001ea4:	08001edb 	.word	0x08001edb
 8001ea8:	08001f11 	.word	0x08001f11
 8001eac:	08001f11 	.word	0x08001f11
 8001eb0:	08001f11 	.word	0x08001f11
 8001eb4:	08001eed 	.word	0x08001eed
 8001eb8:	08001f11 	.word	0x08001f11
 8001ebc:	08001f11 	.word	0x08001f11
 8001ec0:	08001f11 	.word	0x08001f11
 8001ec4:	08001eff 	.word	0x08001eff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0202 	orr.w	r2, r2, #2
 8001ed6:	60da      	str	r2, [r3, #12]
      break;
 8001ed8:	e01d      	b.n	8001f16 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0204 	orr.w	r2, r2, #4
 8001ee8:	60da      	str	r2, [r3, #12]
      break;
 8001eea:	e014      	b.n	8001f16 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0208 	orr.w	r2, r2, #8
 8001efa:	60da      	str	r2, [r3, #12]
      break;
 8001efc:	e00b      	b.n	8001f16 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0210 	orr.w	r2, r2, #16
 8001f0c:	60da      	str	r2, [r3, #12]
      break;
 8001f0e:	e002      	b.n	8001f16 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
      break;
 8001f14:	bf00      	nop
  }

  if (status == HAL_OK)
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d134      	bne.n	8001f86 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2201      	movs	r2, #1
 8001f22:	6839      	ldr	r1, [r7, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 fdec 	bl	8002b02 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a18      	ldr	r2, [pc, #96]	; (8001f90 <HAL_TIM_IC_Start_IT+0x20c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d00e      	beq.n	8001f52 <HAL_TIM_IC_Start_IT+0x1ce>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f3c:	d009      	beq.n	8001f52 <HAL_TIM_IC_Start_IT+0x1ce>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <HAL_TIM_IC_Start_IT+0x210>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d004      	beq.n	8001f52 <HAL_TIM_IC_Start_IT+0x1ce>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <HAL_TIM_IC_Start_IT+0x214>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d111      	bne.n	8001f76 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2b06      	cmp	r3, #6
 8001f62:	d010      	beq.n	8001f86 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f74:	e007      	b.n	8001f86 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f042 0201 	orr.w	r2, r2, #1
 8001f84:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40012c00 	.word	0x40012c00
 8001f94:	40000400 	.word	0x40000400
 8001f98:	40000800 	.word	0x40000800

08001f9c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_TIM_IC_ConfigChannel+0x1e>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e088      	b.n	80020cc <HAL_TIM_IC_ConfigChannel+0x130>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d11b      	bne.n	8002000 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8001fd8:	f000 fbf0 	bl	80027bc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699a      	ldr	r2, [r3, #24]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 020c 	bic.w	r2, r2, #12
 8001fea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6999      	ldr	r1, [r3, #24]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	619a      	str	r2, [r3, #24]
 8001ffe:	e060      	b.n	80020c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b04      	cmp	r3, #4
 8002004:	d11c      	bne.n	8002040 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002016:	f000 fc59 	bl	80028cc <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	699a      	ldr	r2, [r3, #24]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002028:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6999      	ldr	r1, [r3, #24]
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	021a      	lsls	r2, r3, #8
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	619a      	str	r2, [r3, #24]
 800203e:	e040      	b.n	80020c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b08      	cmp	r3, #8
 8002044:	d11b      	bne.n	800207e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002056:	f000 fca4 	bl	80029a2 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	69da      	ldr	r2, [r3, #28]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 020c 	bic.w	r2, r2, #12
 8002068:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	69d9      	ldr	r1, [r3, #28]
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	61da      	str	r2, [r3, #28]
 800207c:	e021      	b.n	80020c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b0c      	cmp	r3, #12
 8002082:	d11c      	bne.n	80020be <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002094:	f000 fcc0 	bl	8002a18 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	69da      	ldr	r2, [r3, #28]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80020a6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	69d9      	ldr	r1, [r3, #28]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	021a      	lsls	r2, r3, #8
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	61da      	str	r2, [r3, #28]
 80020bc:	e001      	b.n	80020c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80020ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e0ae      	b.n	8002250 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b0c      	cmp	r3, #12
 80020fe:	f200 809f 	bhi.w	8002240 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002102:	a201      	add	r2, pc, #4	; (adr r2, 8002108 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002108:	0800213d 	.word	0x0800213d
 800210c:	08002241 	.word	0x08002241
 8002110:	08002241 	.word	0x08002241
 8002114:	08002241 	.word	0x08002241
 8002118:	0800217d 	.word	0x0800217d
 800211c:	08002241 	.word	0x08002241
 8002120:	08002241 	.word	0x08002241
 8002124:	08002241 	.word	0x08002241
 8002128:	080021bf 	.word	0x080021bf
 800212c:	08002241 	.word	0x08002241
 8002130:	08002241 	.word	0x08002241
 8002134:	08002241 	.word	0x08002241
 8002138:	080021ff 	.word	0x080021ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f9b2 	bl	80024ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0208 	orr.w	r2, r2, #8
 8002156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0204 	bic.w	r2, r2, #4
 8002166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6999      	ldr	r1, [r3, #24]
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	691a      	ldr	r2, [r3, #16]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	619a      	str	r2, [r3, #24]
      break;
 800217a:	e064      	b.n	8002246 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68b9      	ldr	r1, [r7, #8]
 8002182:	4618      	mov	r0, r3
 8002184:	f000 f9f8 	bl	8002578 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6999      	ldr	r1, [r3, #24]
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	021a      	lsls	r2, r3, #8
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	619a      	str	r2, [r3, #24]
      break;
 80021bc:	e043      	b.n	8002246 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68b9      	ldr	r1, [r7, #8]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 fa41 	bl	800264c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	69da      	ldr	r2, [r3, #28]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0208 	orr.w	r2, r2, #8
 80021d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	69da      	ldr	r2, [r3, #28]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0204 	bic.w	r2, r2, #4
 80021e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69d9      	ldr	r1, [r3, #28]
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	61da      	str	r2, [r3, #28]
      break;
 80021fc:	e023      	b.n	8002246 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68b9      	ldr	r1, [r7, #8]
 8002204:	4618      	mov	r0, r3
 8002206:	f000 fa8b 	bl	8002720 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	69da      	ldr	r2, [r3, #28]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	69da      	ldr	r2, [r3, #28]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	69d9      	ldr	r1, [r3, #28]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	021a      	lsls	r2, r3, #8
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	61da      	str	r2, [r3, #28]
      break;
 800223e:	e002      	b.n	8002246 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	75fb      	strb	r3, [r7, #23]
      break;
 8002244:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800224e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_TIM_ConfigClockSource+0x1c>
 8002270:	2302      	movs	r3, #2
 8002272:	e0b4      	b.n	80023de <HAL_TIM_ConfigClockSource+0x186>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800229a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ac:	d03e      	beq.n	800232c <HAL_TIM_ConfigClockSource+0xd4>
 80022ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022b2:	f200 8087 	bhi.w	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ba:	f000 8086 	beq.w	80023ca <HAL_TIM_ConfigClockSource+0x172>
 80022be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c2:	d87f      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022c4:	2b70      	cmp	r3, #112	; 0x70
 80022c6:	d01a      	beq.n	80022fe <HAL_TIM_ConfigClockSource+0xa6>
 80022c8:	2b70      	cmp	r3, #112	; 0x70
 80022ca:	d87b      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022cc:	2b60      	cmp	r3, #96	; 0x60
 80022ce:	d050      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x11a>
 80022d0:	2b60      	cmp	r3, #96	; 0x60
 80022d2:	d877      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022d4:	2b50      	cmp	r3, #80	; 0x50
 80022d6:	d03c      	beq.n	8002352 <HAL_TIM_ConfigClockSource+0xfa>
 80022d8:	2b50      	cmp	r3, #80	; 0x50
 80022da:	d873      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022dc:	2b40      	cmp	r3, #64	; 0x40
 80022de:	d058      	beq.n	8002392 <HAL_TIM_ConfigClockSource+0x13a>
 80022e0:	2b40      	cmp	r3, #64	; 0x40
 80022e2:	d86f      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022e4:	2b30      	cmp	r3, #48	; 0x30
 80022e6:	d064      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x15a>
 80022e8:	2b30      	cmp	r3, #48	; 0x30
 80022ea:	d86b      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	d060      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x15a>
 80022f0:	2b20      	cmp	r3, #32
 80022f2:	d867      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d05c      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x15a>
 80022f8:	2b10      	cmp	r3, #16
 80022fa:	d05a      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x15a>
 80022fc:	e062      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800230e:	f000 fbd9 	bl	8002ac4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002320:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	609a      	str	r2, [r3, #8]
      break;
 800232a:	e04f      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800233c:	f000 fbc2 	bl	8002ac4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800234e:	609a      	str	r2, [r3, #8]
      break;
 8002350:	e03c      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800235e:	461a      	mov	r2, r3
 8002360:	f000 fa86 	bl	8002870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2150      	movs	r1, #80	; 0x50
 800236a:	4618      	mov	r0, r3
 800236c:	f000 fb90 	bl	8002a90 <TIM_ITRx_SetConfig>
      break;
 8002370:	e02c      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800237e:	461a      	mov	r2, r3
 8002380:	f000 fae0 	bl	8002944 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2160      	movs	r1, #96	; 0x60
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fb80 	bl	8002a90 <TIM_ITRx_SetConfig>
      break;
 8002390:	e01c      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800239e:	461a      	mov	r2, r3
 80023a0:	f000 fa66 	bl	8002870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2140      	movs	r1, #64	; 0x40
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 fb70 	bl	8002a90 <TIM_ITRx_SetConfig>
      break;
 80023b0:	e00c      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4619      	mov	r1, r3
 80023bc:	4610      	mov	r0, r2
 80023be:	f000 fb67 	bl	8002a90 <TIM_ITRx_SetConfig>
      break;
 80023c2:	e003      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
      break;
 80023c8:	e000      	b.n	80023cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a29      	ldr	r2, [pc, #164]	; (80024a0 <TIM_Base_SetConfig+0xb8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d00b      	beq.n	8002418 <TIM_Base_SetConfig+0x30>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002406:	d007      	beq.n	8002418 <TIM_Base_SetConfig+0x30>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a26      	ldr	r2, [pc, #152]	; (80024a4 <TIM_Base_SetConfig+0xbc>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d003      	beq.n	8002418 <TIM_Base_SetConfig+0x30>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a25      	ldr	r2, [pc, #148]	; (80024a8 <TIM_Base_SetConfig+0xc0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d108      	bne.n	800242a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800241e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a1c      	ldr	r2, [pc, #112]	; (80024a0 <TIM_Base_SetConfig+0xb8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00b      	beq.n	800244a <TIM_Base_SetConfig+0x62>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002438:	d007      	beq.n	800244a <TIM_Base_SetConfig+0x62>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a19      	ldr	r2, [pc, #100]	; (80024a4 <TIM_Base_SetConfig+0xbc>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d003      	beq.n	800244a <TIM_Base_SetConfig+0x62>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a18      	ldr	r2, [pc, #96]	; (80024a8 <TIM_Base_SetConfig+0xc0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d108      	bne.n	800245c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002450:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	4313      	orrs	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a07      	ldr	r2, [pc, #28]	; (80024a0 <TIM_Base_SetConfig+0xb8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d103      	bne.n	8002490 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	615a      	str	r2, [r3, #20]
}
 8002496:	bf00      	nop
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	40012c00 	.word	0x40012c00
 80024a4:	40000400 	.word	0x40000400
 80024a8:	40000800 	.word	0x40000800

080024ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f023 0201 	bic.w	r2, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f023 0303 	bic.w	r3, r3, #3
 80024e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f023 0302 	bic.w	r3, r3, #2
 80024f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a1c      	ldr	r2, [pc, #112]	; (8002574 <TIM_OC1_SetConfig+0xc8>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d10c      	bne.n	8002522 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f023 0308 	bic.w	r3, r3, #8
 800250e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f023 0304 	bic.w	r3, r3, #4
 8002520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a13      	ldr	r2, [pc, #76]	; (8002574 <TIM_OC1_SetConfig+0xc8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d111      	bne.n	800254e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	621a      	str	r2, [r3, #32]
}
 8002568:	bf00      	nop
 800256a:	371c      	adds	r7, #28
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40012c00 	.word	0x40012c00

08002578 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	f023 0210 	bic.w	r2, r3, #16
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f023 0320 	bic.w	r3, r3, #32
 80025c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a1d      	ldr	r2, [pc, #116]	; (8002648 <TIM_OC2_SetConfig+0xd0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d10d      	bne.n	80025f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a14      	ldr	r2, [pc, #80]	; (8002648 <TIM_OC2_SetConfig+0xd0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d113      	bne.n	8002624 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002602:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800260a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	621a      	str	r2, [r3, #32]
}
 800263e:	bf00      	nop
 8002640:	371c      	adds	r7, #28
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	40012c00 	.word	0x40012c00

0800264c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0303 	bic.w	r3, r3, #3
 8002682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	4313      	orrs	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a1d      	ldr	r2, [pc, #116]	; (800271c <TIM_OC3_SetConfig+0xd0>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d10d      	bne.n	80026c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	021b      	lsls	r3, r3, #8
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a14      	ldr	r2, [pc, #80]	; (800271c <TIM_OC3_SetConfig+0xd0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d113      	bne.n	80026f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	621a      	str	r2, [r3, #32]
}
 8002710:	bf00      	nop
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40012c00 	.word	0x40012c00

08002720 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800274e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800276a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	031b      	lsls	r3, r3, #12
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a0f      	ldr	r2, [pc, #60]	; (80027b8 <TIM_OC4_SetConfig+0x98>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d109      	bne.n	8002794 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002786:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	019b      	lsls	r3, r3, #6
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	621a      	str	r2, [r3, #32]
}
 80027ae:	bf00      	nop
 80027b0:	371c      	adds	r7, #28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr
 80027b8:	40012c00 	.word	0x40012c00

080027bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80027bc:	b480      	push	{r7}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
 80027c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	f023 0201 	bic.w	r2, r3, #1
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4a1f      	ldr	r2, [pc, #124]	; (8002864 <TIM_TI1_SetConfig+0xa8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00b      	beq.n	8002802 <TIM_TI1_SetConfig+0x46>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f0:	d007      	beq.n	8002802 <TIM_TI1_SetConfig+0x46>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4a1c      	ldr	r2, [pc, #112]	; (8002868 <TIM_TI1_SetConfig+0xac>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d003      	beq.n	8002802 <TIM_TI1_SetConfig+0x46>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4a1b      	ldr	r2, [pc, #108]	; (800286c <TIM_TI1_SetConfig+0xb0>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d101      	bne.n	8002806 <TIM_TI1_SetConfig+0x4a>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <TIM_TI1_SetConfig+0x4c>
 8002806:	2300      	movs	r3, #0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f023 0303 	bic.w	r3, r3, #3
 8002812:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4313      	orrs	r3, r2
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	e003      	b.n	8002826 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800282c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	b2db      	uxtb	r3, r3
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	4313      	orrs	r3, r2
 8002838:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f023 030a 	bic.w	r3, r3, #10
 8002840:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f003 030a 	and.w	r3, r3, #10
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	621a      	str	r2, [r3, #32]
}
 800285a:	bf00      	nop
 800285c:	371c      	adds	r7, #28
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr
 8002864:	40012c00 	.word	0x40012c00
 8002868:	40000400 	.word	0x40000400
 800286c:	40000800 	.word	0x40000800

08002870 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002870:	b480      	push	{r7}
 8002872:	b087      	sub	sp, #28
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	f023 0201 	bic.w	r2, r3, #1
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800289a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f023 030a 	bic.w	r3, r3, #10
 80028ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	621a      	str	r2, [r3, #32]
}
 80028c2:	bf00      	nop
 80028c4:	371c      	adds	r7, #28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	f023 0210 	bic.w	r2, r3, #16
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800290a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	031b      	lsls	r3, r3, #12
 8002910:	b29b      	uxth	r3, r3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800291e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	4313      	orrs	r3, r2
 800292c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	621a      	str	r2, [r3, #32]
}
 800293a:	bf00      	nop
 800293c:	371c      	adds	r7, #28
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002944:	b480      	push	{r7}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	f023 0210 	bic.w	r2, r3, #16
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800296e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	031b      	lsls	r3, r3, #12
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002980:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4313      	orrs	r3, r2
 800298a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	621a      	str	r2, [r3, #32]
}
 8002998:	bf00      	nop
 800299a:	371c      	adds	r7, #28
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b087      	sub	sp, #28
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f023 0303 	bic.w	r3, r3, #3
 80029ce:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029de:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029f2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	021b      	lsls	r3, r3, #8
 80029f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	621a      	str	r2, [r3, #32]
}
 8002a0e:	bf00      	nop
 8002a10:	371c      	adds	r7, #28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a44:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	021b      	lsls	r3, r3, #8
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a56:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	031b      	lsls	r3, r3, #12
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a6a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	031b      	lsls	r3, r3, #12
 8002a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	621a      	str	r2, [r3, #32]
}
 8002a86:	bf00      	nop
 8002a88:	371c      	adds	r7, #28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f043 0307 	orr.w	r3, r3, #7
 8002ab2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	609a      	str	r2, [r3, #8]
}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ade:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	021a      	lsls	r2, r3, #8
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	609a      	str	r2, [r3, #8]
}
 8002af8:	bf00      	nop
 8002afa:	371c      	adds	r7, #28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b087      	sub	sp, #28
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	60f8      	str	r0, [r7, #12]
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f003 031f 	and.w	r3, r3, #31
 8002b14:	2201      	movs	r2, #1
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a1a      	ldr	r2, [r3, #32]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	401a      	ands	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a1a      	ldr	r2, [r3, #32]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	621a      	str	r2, [r3, #32]
}
 8002b40:	bf00      	nop
 8002b42:	371c      	adds	r7, #28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr
	...

08002b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e046      	b.n	8002bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a16      	ldr	r2, [pc, #88]	; (8002bfc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d00e      	beq.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb0:	d009      	beq.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a12      	ldr	r2, [pc, #72]	; (8002c00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d004      	beq.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a10      	ldr	r2, [pc, #64]	; (8002c04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d10c      	bne.n	8002be0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	40012c00 	.word	0x40012c00
 8002c00:	40000400 	.word	0x40000400
 8002c04:	40000800 	.word	0x40000800

08002c08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e042      	b.n	8002ca0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d106      	bne.n	8002c34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7fd fde4 	bl	80007fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2224      	movs	r2, #36	; 0x24
 8002c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fdc5 	bl	80037dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08a      	sub	sp, #40	; 0x28
 8002cac:	af02      	add	r7, sp, #8
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	603b      	str	r3, [r7, #0]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d16d      	bne.n	8002da4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <HAL_UART_Transmit+0x2c>
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e066      	b.n	8002da6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2221      	movs	r2, #33	; 0x21
 8002ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ce6:	f7fd fec9 	bl	8000a7c <HAL_GetTick>
 8002cea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	88fa      	ldrh	r2, [r7, #6]
 8002cf0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	88fa      	ldrh	r2, [r7, #6]
 8002cf6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d00:	d108      	bne.n	8002d14 <HAL_UART_Transmit+0x6c>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d104      	bne.n	8002d14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	61bb      	str	r3, [r7, #24]
 8002d12:	e003      	b.n	8002d1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d1c:	e02a      	b.n	8002d74 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2200      	movs	r2, #0
 8002d26:	2180      	movs	r1, #128	; 0x80
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 fb14 	bl	8003356 <UART_WaitOnFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e036      	b.n	8002da6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10b      	bne.n	8002d56 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	3302      	adds	r3, #2
 8002d52:	61bb      	str	r3, [r7, #24]
 8002d54:	e007      	b.n	8002d66 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	781a      	ldrb	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	3301      	adds	r3, #1
 8002d64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1cf      	bne.n	8002d1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2200      	movs	r2, #0
 8002d86:	2140      	movs	r1, #64	; 0x40
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 fae4 	bl	8003356 <UART_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e006      	b.n	8002da6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	e000      	b.n	8002da6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002da4:	2302      	movs	r3, #2
  }
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3720      	adds	r7, #32
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b084      	sub	sp, #16
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	4613      	mov	r3, r2
 8002dba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b20      	cmp	r3, #32
 8002dc6:	d112      	bne.n	8002dee <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <HAL_UART_Receive_IT+0x26>
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e00b      	b.n	8002df0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	461a      	mov	r2, r3
 8002de2:	68b9      	ldr	r1, [r7, #8]
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 fb24 	bl	8003432 <UART_Start_Receive_IT>
 8002dea:	4603      	mov	r3, r0
 8002dec:	e000      	b.n	8002df0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002dee:	2302      	movs	r3, #2
  }
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b0ba      	sub	sp, #232	; 0xe8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002e36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10f      	bne.n	8002e5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e42:	f003 0320 	and.w	r3, r3, #32
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d009      	beq.n	8002e5e <HAL_UART_IRQHandler+0x66>
 8002e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fc01 	bl	800365e <UART_Receive_IT>
      return;
 8002e5c:	e25b      	b.n	8003316 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 80de 	beq.w	8003024 <HAL_UART_IRQHandler+0x22c>
 8002e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d106      	bne.n	8002e82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e78:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80d1 	beq.w	8003024 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00b      	beq.n	8002ea6 <HAL_UART_IRQHandler+0xae>
 8002e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d005      	beq.n	8002ea6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	f043 0201 	orr.w	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eaa:	f003 0304 	and.w	r3, r3, #4
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00b      	beq.n	8002eca <HAL_UART_IRQHandler+0xd2>
 8002eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	f043 0202 	orr.w	r2, r3, #2
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00b      	beq.n	8002eee <HAL_UART_IRQHandler+0xf6>
 8002ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d005      	beq.n	8002eee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee6:	f043 0204 	orr.w	r2, r3, #4
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d011      	beq.n	8002f1e <HAL_UART_IRQHandler+0x126>
 8002efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d105      	bne.n	8002f12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d005      	beq.n	8002f1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	f043 0208 	orr.w	r2, r3, #8
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 81f2 	beq.w	800330c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <HAL_UART_IRQHandler+0x14e>
 8002f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fb8c 	bl	800365e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	bf14      	ite	ne
 8002f54:	2301      	movne	r3, #1
 8002f56:	2300      	moveq	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d103      	bne.n	8002f72 <HAL_UART_IRQHandler+0x17a>
 8002f6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d04f      	beq.n	8003012 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fa96 	bl	80034a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d041      	beq.n	800300a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	3314      	adds	r3, #20
 8002f8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f94:	e853 3f00 	ldrex	r3, [r3]
 8002f98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3314      	adds	r3, #20
 8002fae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002fb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002fbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002fc2:	e841 2300 	strex	r3, r2, [r1]
 8002fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1d9      	bne.n	8002f86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d013      	beq.n	8003002 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fde:	4a7e      	ldr	r2, [pc, #504]	; (80031d8 <HAL_UART_IRQHandler+0x3e0>)
 8002fe0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fd fe9a 	bl	8000d20 <HAL_DMA_Abort_IT>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d016      	beq.n	8003020 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003000:	e00e      	b.n	8003020 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f993 	bl	800332e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003008:	e00a      	b.n	8003020 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f98f 	bl	800332e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003010:	e006      	b.n	8003020 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f98b 	bl	800332e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800301e:	e175      	b.n	800330c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003020:	bf00      	nop
    return;
 8003022:	e173      	b.n	800330c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	2b01      	cmp	r3, #1
 800302a:	f040 814f 	bne.w	80032cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800302e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 8148 	beq.w	80032cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800303c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 8141 	beq.w	80032cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800304a:	2300      	movs	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 80b6 	beq.w	80031dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800307c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 8145 	beq.w	8003310 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800308a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800308e:	429a      	cmp	r2, r3
 8003090:	f080 813e 	bcs.w	8003310 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800309a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	2b20      	cmp	r3, #32
 80030a4:	f000 8088 	beq.w	80031b8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	330c      	adds	r3, #12
 80030ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030b6:	e853 3f00 	ldrex	r3, [r3]
 80030ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80030be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	330c      	adds	r3, #12
 80030d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80030d4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030e4:	e841 2300 	strex	r3, r2, [r1]
 80030e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1d9      	bne.n	80030a8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	3314      	adds	r3, #20
 80030fa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030fe:	e853 3f00 	ldrex	r3, [r3]
 8003102:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003104:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003106:	f023 0301 	bic.w	r3, r3, #1
 800310a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	3314      	adds	r3, #20
 8003114:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003118:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800311c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003120:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003124:	e841 2300 	strex	r3, r2, [r1]
 8003128:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800312a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1e1      	bne.n	80030f4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	3314      	adds	r3, #20
 8003136:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003138:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800313a:	e853 3f00 	ldrex	r3, [r3]
 800313e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003146:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3314      	adds	r3, #20
 8003150:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003154:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003156:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003158:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800315a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800315c:	e841 2300 	strex	r3, r2, [r1]
 8003160:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003162:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1e3      	bne.n	8003130 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	330c      	adds	r3, #12
 800317c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003180:	e853 3f00 	ldrex	r3, [r3]
 8003184:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003188:	f023 0310 	bic.w	r3, r3, #16
 800318c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	330c      	adds	r3, #12
 8003196:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800319a:	65ba      	str	r2, [r7, #88]	; 0x58
 800319c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031a2:	e841 2300 	strex	r3, r2, [r1]
 80031a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1e3      	bne.n	8003176 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd fd79 	bl	8000caa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	4619      	mov	r1, r3
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f8b6 	bl	8003340 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031d4:	e09c      	b.n	8003310 <HAL_UART_IRQHandler+0x518>
 80031d6:	bf00      	nop
 80031d8:	08003569 	.word	0x08003569
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 808e 	beq.w	8003314 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80031f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 8089 	beq.w	8003314 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	330c      	adds	r3, #12
 8003208:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320c:	e853 3f00 	ldrex	r3, [r3]
 8003210:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003214:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003218:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	330c      	adds	r3, #12
 8003222:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003226:	647a      	str	r2, [r7, #68]	; 0x44
 8003228:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800322c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800322e:	e841 2300 	strex	r3, r2, [r1]
 8003232:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1e3      	bne.n	8003202 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	3314      	adds	r3, #20
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	e853 3f00 	ldrex	r3, [r3]
 8003248:	623b      	str	r3, [r7, #32]
   return(result);
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	f023 0301 	bic.w	r3, r3, #1
 8003250:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3314      	adds	r3, #20
 800325a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800325e:	633a      	str	r2, [r7, #48]	; 0x30
 8003260:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003262:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003266:	e841 2300 	strex	r3, r2, [r1]
 800326a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800326c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1e3      	bne.n	800323a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	330c      	adds	r3, #12
 8003286:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	e853 3f00 	ldrex	r3, [r3]
 800328e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 0310 	bic.w	r3, r3, #16
 8003296:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	330c      	adds	r3, #12
 80032a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80032a4:	61fa      	str	r2, [r7, #28]
 80032a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a8:	69b9      	ldr	r1, [r7, #24]
 80032aa:	69fa      	ldr	r2, [r7, #28]
 80032ac:	e841 2300 	strex	r3, r2, [r1]
 80032b0:	617b      	str	r3, [r7, #20]
   return(result);
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1e3      	bne.n	8003280 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032c2:	4619      	mov	r1, r3
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f83b 	bl	8003340 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032ca:	e023      	b.n	8003314 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d009      	beq.n	80032ec <HAL_UART_IRQHandler+0x4f4>
 80032d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f953 	bl	8003590 <UART_Transmit_IT>
    return;
 80032ea:	e014      	b.n	8003316 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00e      	beq.n	8003316 <HAL_UART_IRQHandler+0x51e>
 80032f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f992 	bl	800362e <UART_EndTransmit_IT>
    return;
 800330a:	e004      	b.n	8003316 <HAL_UART_IRQHandler+0x51e>
    return;
 800330c:	bf00      	nop
 800330e:	e002      	b.n	8003316 <HAL_UART_IRQHandler+0x51e>
      return;
 8003310:	bf00      	nop
 8003312:	e000      	b.n	8003316 <HAL_UART_IRQHandler+0x51e>
      return;
 8003314:	bf00      	nop
  }
}
 8003316:	37e8      	adds	r7, #232	; 0xe8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr

0800332e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr

08003356 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b090      	sub	sp, #64	; 0x40
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	603b      	str	r3, [r7, #0]
 8003362:	4613      	mov	r3, r2
 8003364:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003366:	e050      	b.n	800340a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800336a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336e:	d04c      	beq.n	800340a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003372:	2b00      	cmp	r3, #0
 8003374:	d007      	beq.n	8003386 <UART_WaitOnFlagUntilTimeout+0x30>
 8003376:	f7fd fb81 	bl	8000a7c <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003382:	429a      	cmp	r2, r3
 8003384:	d241      	bcs.n	800340a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	330c      	adds	r3, #12
 800338c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003390:	e853 3f00 	ldrex	r3, [r3]
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800339c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	330c      	adds	r3, #12
 80033a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033a6:	637a      	str	r2, [r7, #52]	; 0x34
 80033a8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033ae:	e841 2300 	strex	r3, r2, [r1]
 80033b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1e5      	bne.n	8003386 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3314      	adds	r3, #20
 80033c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	e853 3f00 	ldrex	r3, [r3]
 80033c8:	613b      	str	r3, [r7, #16]
   return(result);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3314      	adds	r3, #20
 80033d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033da:	623a      	str	r2, [r7, #32]
 80033dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033de:	69f9      	ldr	r1, [r7, #28]
 80033e0:	6a3a      	ldr	r2, [r7, #32]
 80033e2:	e841 2300 	strex	r3, r2, [r1]
 80033e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1e5      	bne.n	80033ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2220      	movs	r2, #32
 80033fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e00f      	b.n	800342a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4013      	ands	r3, r2
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	429a      	cmp	r2, r3
 8003418:	bf0c      	ite	eq
 800341a:	2301      	moveq	r3, #1
 800341c:	2300      	movne	r3, #0
 800341e:	b2db      	uxtb	r3, r3
 8003420:	461a      	mov	r2, r3
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	429a      	cmp	r2, r3
 8003426:	d09f      	beq.n	8003368 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3740      	adds	r7, #64	; 0x40
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003432:	b480      	push	{r7}
 8003434:	b085      	sub	sp, #20
 8003436:	af00      	add	r7, sp, #0
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	60b9      	str	r1, [r7, #8]
 800343c:	4613      	mov	r3, r2
 800343e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	88fa      	ldrh	r2, [r7, #6]
 800344a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	88fa      	ldrh	r2, [r7, #6]
 8003450:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2222      	movs	r2, #34	; 0x22
 800345c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003476:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695a      	ldr	r2, [r3, #20]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0220 	orr.w	r2, r2, #32
 8003496:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr

080034a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b095      	sub	sp, #84	; 0x54
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	330c      	adds	r3, #12
 80034b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b6:	e853 3f00 	ldrex	r3, [r3]
 80034ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80034bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	330c      	adds	r3, #12
 80034ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034cc:	643a      	str	r2, [r7, #64]	; 0x40
 80034ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80034d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034d4:	e841 2300 	strex	r3, r2, [r1]
 80034d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1e5      	bne.n	80034ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3314      	adds	r3, #20
 80034e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	e853 3f00 	ldrex	r3, [r3]
 80034ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f023 0301 	bic.w	r3, r3, #1
 80034f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	3314      	adds	r3, #20
 80034fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003500:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003502:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003504:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003508:	e841 2300 	strex	r3, r2, [r1]
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1e5      	bne.n	80034e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	2b01      	cmp	r3, #1
 800351a:	d119      	bne.n	8003550 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	330c      	adds	r3, #12
 8003522:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	e853 3f00 	ldrex	r3, [r3]
 800352a:	60bb      	str	r3, [r7, #8]
   return(result);
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f023 0310 	bic.w	r3, r3, #16
 8003532:	647b      	str	r3, [r7, #68]	; 0x44
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	330c      	adds	r3, #12
 800353a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800353c:	61ba      	str	r2, [r7, #24]
 800353e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003540:	6979      	ldr	r1, [r7, #20]
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	e841 2300 	strex	r3, r2, [r1]
 8003548:	613b      	str	r3, [r7, #16]
   return(result);
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e5      	bne.n	800351c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800355e:	bf00      	nop
 8003560:	3754      	adds	r7, #84	; 0x54
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr

08003568 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f7ff fed3 	bl	800332e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003588:	bf00      	nop
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b21      	cmp	r3, #33	; 0x21
 80035a2:	d13e      	bne.n	8003622 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ac:	d114      	bne.n	80035d8 <UART_Transmit_IT+0x48>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d110      	bne.n	80035d8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	1c9a      	adds	r2, r3, #2
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	621a      	str	r2, [r3, #32]
 80035d6:	e008      	b.n	80035ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	1c59      	adds	r1, r3, #1
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6211      	str	r1, [r2, #32]
 80035e2:	781a      	ldrb	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	4619      	mov	r1, r3
 80035f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10f      	bne.n	800361e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68da      	ldr	r2, [r3, #12]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800360c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800361c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	e000      	b.n	8003624 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003622:	2302      	movs	r3, #2
  }
}
 8003624:	4618      	mov	r0, r3
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr

0800362e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003644:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff fe64 	bl	800331c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b08c      	sub	sp, #48	; 0x30
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b22      	cmp	r3, #34	; 0x22
 8003670:	f040 80ae 	bne.w	80037d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800367c:	d117      	bne.n	80036ae <UART_Receive_IT+0x50>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d113      	bne.n	80036ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003686:	2300      	movs	r3, #0
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	b29b      	uxth	r3, r3
 8003698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800369c:	b29a      	uxth	r2, r3
 800369e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a6:	1c9a      	adds	r2, r3, #2
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28
 80036ac:	e026      	b.n	80036fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c0:	d007      	beq.n	80036d2 <UART_Receive_IT+0x74>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10a      	bne.n	80036e0 <UART_Receive_IT+0x82>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036dc:	701a      	strb	r2, [r3, #0]
 80036de:	e008      	b.n	80036f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29b      	uxth	r3, r3
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	4619      	mov	r1, r3
 800370a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800370c:	2b00      	cmp	r3, #0
 800370e:	d15d      	bne.n	80037cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0220 	bic.w	r2, r2, #32
 800371e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800372e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	2b01      	cmp	r3, #1
 8003754:	d135      	bne.n	80037c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	330c      	adds	r3, #12
 8003762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	e853 3f00 	ldrex	r3, [r3]
 800376a:	613b      	str	r3, [r7, #16]
   return(result);
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f023 0310 	bic.w	r3, r3, #16
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	330c      	adds	r3, #12
 800377a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377c:	623a      	str	r2, [r7, #32]
 800377e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003780:	69f9      	ldr	r1, [r7, #28]
 8003782:	6a3a      	ldr	r2, [r7, #32]
 8003784:	e841 2300 	strex	r3, r2, [r1]
 8003788:	61bb      	str	r3, [r7, #24]
   return(result);
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1e5      	bne.n	800375c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0310 	and.w	r3, r3, #16
 800379a:	2b10      	cmp	r3, #16
 800379c:	d10a      	bne.n	80037b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037b8:	4619      	mov	r1, r3
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff fdc0 	bl	8003340 <HAL_UARTEx_RxEventCallback>
 80037c0:	e002      	b.n	80037c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fc ff24 	bl	8000610 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	e002      	b.n	80037d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	e000      	b.n	80037d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80037d0:	2302      	movs	r3, #2
  }
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3730      	adds	r7, #48	; 0x30
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003816:	f023 030c 	bic.w	r3, r3, #12
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6812      	ldr	r2, [r2, #0]
 800381e:	68b9      	ldr	r1, [r7, #8]
 8003820:	430b      	orrs	r3, r1
 8003822:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a2c      	ldr	r2, [pc, #176]	; (80038f0 <UART_SetConfig+0x114>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d103      	bne.n	800384c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003844:	f7fe f878 	bl	8001938 <HAL_RCC_GetPCLK2Freq>
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	e002      	b.n	8003852 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800384c:	f7fe f860 	bl	8001910 <HAL_RCC_GetPCLK1Freq>
 8003850:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	009a      	lsls	r2, r3, #2
 800385c:	441a      	add	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	fbb2 f3f3 	udiv	r3, r2, r3
 8003868:	4a22      	ldr	r2, [pc, #136]	; (80038f4 <UART_SetConfig+0x118>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	0119      	lsls	r1, r3, #4
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	009a      	lsls	r2, r3, #2
 800387c:	441a      	add	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	fbb2 f2f3 	udiv	r2, r2, r3
 8003888:	4b1a      	ldr	r3, [pc, #104]	; (80038f4 <UART_SetConfig+0x118>)
 800388a:	fba3 0302 	umull	r0, r3, r3, r2
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	2064      	movs	r0, #100	; 0x64
 8003892:	fb00 f303 	mul.w	r3, r0, r3
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	3332      	adds	r3, #50	; 0x32
 800389c:	4a15      	ldr	r2, [pc, #84]	; (80038f4 <UART_SetConfig+0x118>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038a8:	4419      	add	r1, r3
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	009a      	lsls	r2, r3, #2
 80038b4:	441a      	add	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80038c0:	4b0c      	ldr	r3, [pc, #48]	; (80038f4 <UART_SetConfig+0x118>)
 80038c2:	fba3 0302 	umull	r0, r3, r3, r2
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	2064      	movs	r0, #100	; 0x64
 80038ca:	fb00 f303 	mul.w	r3, r0, r3
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	3332      	adds	r3, #50	; 0x32
 80038d4:	4a07      	ldr	r2, [pc, #28]	; (80038f4 <UART_SetConfig+0x118>)
 80038d6:	fba2 2303 	umull	r2, r3, r2, r3
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	f003 020f 	and.w	r2, r3, #15
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	440a      	add	r2, r1
 80038e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80038e8:	bf00      	nop
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40013800 	.word	0x40013800
 80038f4:	51eb851f 	.word	0x51eb851f

080038f8 <_strtoul_l.constprop.0>:
 80038f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038fc:	4686      	mov	lr, r0
 80038fe:	460d      	mov	r5, r1
 8003900:	4f35      	ldr	r7, [pc, #212]	; (80039d8 <_strtoul_l.constprop.0+0xe0>)
 8003902:	4628      	mov	r0, r5
 8003904:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003908:	5d3e      	ldrb	r6, [r7, r4]
 800390a:	f016 0608 	ands.w	r6, r6, #8
 800390e:	d1f8      	bne.n	8003902 <_strtoul_l.constprop.0+0xa>
 8003910:	2c2d      	cmp	r4, #45	; 0x2d
 8003912:	d130      	bne.n	8003976 <_strtoul_l.constprop.0+0x7e>
 8003914:	2601      	movs	r6, #1
 8003916:	782c      	ldrb	r4, [r5, #0]
 8003918:	1c85      	adds	r5, r0, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d057      	beq.n	80039ce <_strtoul_l.constprop.0+0xd6>
 800391e:	2b10      	cmp	r3, #16
 8003920:	d109      	bne.n	8003936 <_strtoul_l.constprop.0+0x3e>
 8003922:	2c30      	cmp	r4, #48	; 0x30
 8003924:	d107      	bne.n	8003936 <_strtoul_l.constprop.0+0x3e>
 8003926:	7828      	ldrb	r0, [r5, #0]
 8003928:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800392c:	2858      	cmp	r0, #88	; 0x58
 800392e:	d149      	bne.n	80039c4 <_strtoul_l.constprop.0+0xcc>
 8003930:	2310      	movs	r3, #16
 8003932:	786c      	ldrb	r4, [r5, #1]
 8003934:	3502      	adds	r5, #2
 8003936:	f04f 38ff 	mov.w	r8, #4294967295
 800393a:	fbb8 f8f3 	udiv	r8, r8, r3
 800393e:	2700      	movs	r7, #0
 8003940:	fb03 f908 	mul.w	r9, r3, r8
 8003944:	4638      	mov	r0, r7
 8003946:	ea6f 0909 	mvn.w	r9, r9
 800394a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800394e:	f1bc 0f09 	cmp.w	ip, #9
 8003952:	d815      	bhi.n	8003980 <_strtoul_l.constprop.0+0x88>
 8003954:	4664      	mov	r4, ip
 8003956:	42a3      	cmp	r3, r4
 8003958:	dd23      	ble.n	80039a2 <_strtoul_l.constprop.0+0xaa>
 800395a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800395e:	d007      	beq.n	8003970 <_strtoul_l.constprop.0+0x78>
 8003960:	4580      	cmp	r8, r0
 8003962:	d31b      	bcc.n	800399c <_strtoul_l.constprop.0+0xa4>
 8003964:	d101      	bne.n	800396a <_strtoul_l.constprop.0+0x72>
 8003966:	45a1      	cmp	r9, r4
 8003968:	db18      	blt.n	800399c <_strtoul_l.constprop.0+0xa4>
 800396a:	2701      	movs	r7, #1
 800396c:	fb00 4003 	mla	r0, r0, r3, r4
 8003970:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003974:	e7e9      	b.n	800394a <_strtoul_l.constprop.0+0x52>
 8003976:	2c2b      	cmp	r4, #43	; 0x2b
 8003978:	bf04      	itt	eq
 800397a:	782c      	ldrbeq	r4, [r5, #0]
 800397c:	1c85      	addeq	r5, r0, #2
 800397e:	e7cc      	b.n	800391a <_strtoul_l.constprop.0+0x22>
 8003980:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003984:	f1bc 0f19 	cmp.w	ip, #25
 8003988:	d801      	bhi.n	800398e <_strtoul_l.constprop.0+0x96>
 800398a:	3c37      	subs	r4, #55	; 0x37
 800398c:	e7e3      	b.n	8003956 <_strtoul_l.constprop.0+0x5e>
 800398e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003992:	f1bc 0f19 	cmp.w	ip, #25
 8003996:	d804      	bhi.n	80039a2 <_strtoul_l.constprop.0+0xaa>
 8003998:	3c57      	subs	r4, #87	; 0x57
 800399a:	e7dc      	b.n	8003956 <_strtoul_l.constprop.0+0x5e>
 800399c:	f04f 37ff 	mov.w	r7, #4294967295
 80039a0:	e7e6      	b.n	8003970 <_strtoul_l.constprop.0+0x78>
 80039a2:	1c7b      	adds	r3, r7, #1
 80039a4:	d106      	bne.n	80039b4 <_strtoul_l.constprop.0+0xbc>
 80039a6:	2322      	movs	r3, #34	; 0x22
 80039a8:	4638      	mov	r0, r7
 80039aa:	f8ce 3000 	str.w	r3, [lr]
 80039ae:	b932      	cbnz	r2, 80039be <_strtoul_l.constprop.0+0xc6>
 80039b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039b4:	b106      	cbz	r6, 80039b8 <_strtoul_l.constprop.0+0xc0>
 80039b6:	4240      	negs	r0, r0
 80039b8:	2a00      	cmp	r2, #0
 80039ba:	d0f9      	beq.n	80039b0 <_strtoul_l.constprop.0+0xb8>
 80039bc:	b107      	cbz	r7, 80039c0 <_strtoul_l.constprop.0+0xc8>
 80039be:	1e69      	subs	r1, r5, #1
 80039c0:	6011      	str	r1, [r2, #0]
 80039c2:	e7f5      	b.n	80039b0 <_strtoul_l.constprop.0+0xb8>
 80039c4:	2430      	movs	r4, #48	; 0x30
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1b5      	bne.n	8003936 <_strtoul_l.constprop.0+0x3e>
 80039ca:	2308      	movs	r3, #8
 80039cc:	e7b3      	b.n	8003936 <_strtoul_l.constprop.0+0x3e>
 80039ce:	2c30      	cmp	r4, #48	; 0x30
 80039d0:	d0a9      	beq.n	8003926 <_strtoul_l.constprop.0+0x2e>
 80039d2:	230a      	movs	r3, #10
 80039d4:	e7af      	b.n	8003936 <_strtoul_l.constprop.0+0x3e>
 80039d6:	bf00      	nop
 80039d8:	080043df 	.word	0x080043df

080039dc <strtoul>:
 80039dc:	4613      	mov	r3, r2
 80039de:	460a      	mov	r2, r1
 80039e0:	4601      	mov	r1, r0
 80039e2:	4802      	ldr	r0, [pc, #8]	; (80039ec <strtoul+0x10>)
 80039e4:	6800      	ldr	r0, [r0, #0]
 80039e6:	f7ff bf87 	b.w	80038f8 <_strtoul_l.constprop.0>
 80039ea:	bf00      	nop
 80039ec:	20000058 	.word	0x20000058

080039f0 <sniprintf>:
 80039f0:	b40c      	push	{r2, r3}
 80039f2:	b530      	push	{r4, r5, lr}
 80039f4:	4b17      	ldr	r3, [pc, #92]	; (8003a54 <sniprintf+0x64>)
 80039f6:	1e0c      	subs	r4, r1, #0
 80039f8:	681d      	ldr	r5, [r3, #0]
 80039fa:	b09d      	sub	sp, #116	; 0x74
 80039fc:	da08      	bge.n	8003a10 <sniprintf+0x20>
 80039fe:	238b      	movs	r3, #139	; 0x8b
 8003a00:	f04f 30ff 	mov.w	r0, #4294967295
 8003a04:	602b      	str	r3, [r5, #0]
 8003a06:	b01d      	add	sp, #116	; 0x74
 8003a08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a0c:	b002      	add	sp, #8
 8003a0e:	4770      	bx	lr
 8003a10:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003a14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003a18:	bf0c      	ite	eq
 8003a1a:	4623      	moveq	r3, r4
 8003a1c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003a20:	9304      	str	r3, [sp, #16]
 8003a22:	9307      	str	r3, [sp, #28]
 8003a24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a28:	9002      	str	r0, [sp, #8]
 8003a2a:	9006      	str	r0, [sp, #24]
 8003a2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003a30:	4628      	mov	r0, r5
 8003a32:	ab21      	add	r3, sp, #132	; 0x84
 8003a34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003a36:	a902      	add	r1, sp, #8
 8003a38:	9301      	str	r3, [sp, #4]
 8003a3a:	f000 f98f 	bl	8003d5c <_svfiprintf_r>
 8003a3e:	1c43      	adds	r3, r0, #1
 8003a40:	bfbc      	itt	lt
 8003a42:	238b      	movlt	r3, #139	; 0x8b
 8003a44:	602b      	strlt	r3, [r5, #0]
 8003a46:	2c00      	cmp	r4, #0
 8003a48:	d0dd      	beq.n	8003a06 <sniprintf+0x16>
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	9b02      	ldr	r3, [sp, #8]
 8003a4e:	701a      	strb	r2, [r3, #0]
 8003a50:	e7d9      	b.n	8003a06 <sniprintf+0x16>
 8003a52:	bf00      	nop
 8003a54:	20000058 	.word	0x20000058

08003a58 <memset>:
 8003a58:	4603      	mov	r3, r0
 8003a5a:	4402      	add	r2, r0
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d100      	bne.n	8003a62 <memset+0xa>
 8003a60:	4770      	bx	lr
 8003a62:	f803 1b01 	strb.w	r1, [r3], #1
 8003a66:	e7f9      	b.n	8003a5c <memset+0x4>

08003a68 <__errno>:
 8003a68:	4b01      	ldr	r3, [pc, #4]	; (8003a70 <__errno+0x8>)
 8003a6a:	6818      	ldr	r0, [r3, #0]
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	20000058 	.word	0x20000058

08003a74 <__libc_init_array>:
 8003a74:	b570      	push	{r4, r5, r6, lr}
 8003a76:	2600      	movs	r6, #0
 8003a78:	4d0c      	ldr	r5, [pc, #48]	; (8003aac <__libc_init_array+0x38>)
 8003a7a:	4c0d      	ldr	r4, [pc, #52]	; (8003ab0 <__libc_init_array+0x3c>)
 8003a7c:	1b64      	subs	r4, r4, r5
 8003a7e:	10a4      	asrs	r4, r4, #2
 8003a80:	42a6      	cmp	r6, r4
 8003a82:	d109      	bne.n	8003a98 <__libc_init_array+0x24>
 8003a84:	f000 fc7a 	bl	800437c <_init>
 8003a88:	2600      	movs	r6, #0
 8003a8a:	4d0a      	ldr	r5, [pc, #40]	; (8003ab4 <__libc_init_array+0x40>)
 8003a8c:	4c0a      	ldr	r4, [pc, #40]	; (8003ab8 <__libc_init_array+0x44>)
 8003a8e:	1b64      	subs	r4, r4, r5
 8003a90:	10a4      	asrs	r4, r4, #2
 8003a92:	42a6      	cmp	r6, r4
 8003a94:	d105      	bne.n	8003aa2 <__libc_init_array+0x2e>
 8003a96:	bd70      	pop	{r4, r5, r6, pc}
 8003a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a9c:	4798      	blx	r3
 8003a9e:	3601      	adds	r6, #1
 8003aa0:	e7ee      	b.n	8003a80 <__libc_init_array+0xc>
 8003aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aa6:	4798      	blx	r3
 8003aa8:	3601      	adds	r6, #1
 8003aaa:	e7f2      	b.n	8003a92 <__libc_init_array+0x1e>
 8003aac:	08004514 	.word	0x08004514
 8003ab0:	08004514 	.word	0x08004514
 8003ab4:	08004514 	.word	0x08004514
 8003ab8:	08004518 	.word	0x08004518

08003abc <__retarget_lock_acquire_recursive>:
 8003abc:	4770      	bx	lr

08003abe <__retarget_lock_release_recursive>:
 8003abe:	4770      	bx	lr

08003ac0 <_free_r>:
 8003ac0:	b538      	push	{r3, r4, r5, lr}
 8003ac2:	4605      	mov	r5, r0
 8003ac4:	2900      	cmp	r1, #0
 8003ac6:	d040      	beq.n	8003b4a <_free_r+0x8a>
 8003ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003acc:	1f0c      	subs	r4, r1, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bfb8      	it	lt
 8003ad2:	18e4      	addlt	r4, r4, r3
 8003ad4:	f000 f8dc 	bl	8003c90 <__malloc_lock>
 8003ad8:	4a1c      	ldr	r2, [pc, #112]	; (8003b4c <_free_r+0x8c>)
 8003ada:	6813      	ldr	r3, [r2, #0]
 8003adc:	b933      	cbnz	r3, 8003aec <_free_r+0x2c>
 8003ade:	6063      	str	r3, [r4, #4]
 8003ae0:	6014      	str	r4, [r2, #0]
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ae8:	f000 b8d8 	b.w	8003c9c <__malloc_unlock>
 8003aec:	42a3      	cmp	r3, r4
 8003aee:	d908      	bls.n	8003b02 <_free_r+0x42>
 8003af0:	6820      	ldr	r0, [r4, #0]
 8003af2:	1821      	adds	r1, r4, r0
 8003af4:	428b      	cmp	r3, r1
 8003af6:	bf01      	itttt	eq
 8003af8:	6819      	ldreq	r1, [r3, #0]
 8003afa:	685b      	ldreq	r3, [r3, #4]
 8003afc:	1809      	addeq	r1, r1, r0
 8003afe:	6021      	streq	r1, [r4, #0]
 8003b00:	e7ed      	b.n	8003ade <_free_r+0x1e>
 8003b02:	461a      	mov	r2, r3
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	b10b      	cbz	r3, 8003b0c <_free_r+0x4c>
 8003b08:	42a3      	cmp	r3, r4
 8003b0a:	d9fa      	bls.n	8003b02 <_free_r+0x42>
 8003b0c:	6811      	ldr	r1, [r2, #0]
 8003b0e:	1850      	adds	r0, r2, r1
 8003b10:	42a0      	cmp	r0, r4
 8003b12:	d10b      	bne.n	8003b2c <_free_r+0x6c>
 8003b14:	6820      	ldr	r0, [r4, #0]
 8003b16:	4401      	add	r1, r0
 8003b18:	1850      	adds	r0, r2, r1
 8003b1a:	4283      	cmp	r3, r0
 8003b1c:	6011      	str	r1, [r2, #0]
 8003b1e:	d1e0      	bne.n	8003ae2 <_free_r+0x22>
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	4408      	add	r0, r1
 8003b26:	6010      	str	r0, [r2, #0]
 8003b28:	6053      	str	r3, [r2, #4]
 8003b2a:	e7da      	b.n	8003ae2 <_free_r+0x22>
 8003b2c:	d902      	bls.n	8003b34 <_free_r+0x74>
 8003b2e:	230c      	movs	r3, #12
 8003b30:	602b      	str	r3, [r5, #0]
 8003b32:	e7d6      	b.n	8003ae2 <_free_r+0x22>
 8003b34:	6820      	ldr	r0, [r4, #0]
 8003b36:	1821      	adds	r1, r4, r0
 8003b38:	428b      	cmp	r3, r1
 8003b3a:	bf01      	itttt	eq
 8003b3c:	6819      	ldreq	r1, [r3, #0]
 8003b3e:	685b      	ldreq	r3, [r3, #4]
 8003b40:	1809      	addeq	r1, r1, r0
 8003b42:	6021      	streq	r1, [r4, #0]
 8003b44:	6063      	str	r3, [r4, #4]
 8003b46:	6054      	str	r4, [r2, #4]
 8003b48:	e7cb      	b.n	8003ae2 <_free_r+0x22>
 8003b4a:	bd38      	pop	{r3, r4, r5, pc}
 8003b4c:	20000304 	.word	0x20000304

08003b50 <sbrk_aligned>:
 8003b50:	b570      	push	{r4, r5, r6, lr}
 8003b52:	4e0e      	ldr	r6, [pc, #56]	; (8003b8c <sbrk_aligned+0x3c>)
 8003b54:	460c      	mov	r4, r1
 8003b56:	6831      	ldr	r1, [r6, #0]
 8003b58:	4605      	mov	r5, r0
 8003b5a:	b911      	cbnz	r1, 8003b62 <sbrk_aligned+0x12>
 8003b5c:	f000 fbaa 	bl	80042b4 <_sbrk_r>
 8003b60:	6030      	str	r0, [r6, #0]
 8003b62:	4621      	mov	r1, r4
 8003b64:	4628      	mov	r0, r5
 8003b66:	f000 fba5 	bl	80042b4 <_sbrk_r>
 8003b6a:	1c43      	adds	r3, r0, #1
 8003b6c:	d00a      	beq.n	8003b84 <sbrk_aligned+0x34>
 8003b6e:	1cc4      	adds	r4, r0, #3
 8003b70:	f024 0403 	bic.w	r4, r4, #3
 8003b74:	42a0      	cmp	r0, r4
 8003b76:	d007      	beq.n	8003b88 <sbrk_aligned+0x38>
 8003b78:	1a21      	subs	r1, r4, r0
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f000 fb9a 	bl	80042b4 <_sbrk_r>
 8003b80:	3001      	adds	r0, #1
 8003b82:	d101      	bne.n	8003b88 <sbrk_aligned+0x38>
 8003b84:	f04f 34ff 	mov.w	r4, #4294967295
 8003b88:	4620      	mov	r0, r4
 8003b8a:	bd70      	pop	{r4, r5, r6, pc}
 8003b8c:	20000308 	.word	0x20000308

08003b90 <_malloc_r>:
 8003b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b94:	1ccd      	adds	r5, r1, #3
 8003b96:	f025 0503 	bic.w	r5, r5, #3
 8003b9a:	3508      	adds	r5, #8
 8003b9c:	2d0c      	cmp	r5, #12
 8003b9e:	bf38      	it	cc
 8003ba0:	250c      	movcc	r5, #12
 8003ba2:	2d00      	cmp	r5, #0
 8003ba4:	4607      	mov	r7, r0
 8003ba6:	db01      	blt.n	8003bac <_malloc_r+0x1c>
 8003ba8:	42a9      	cmp	r1, r5
 8003baa:	d905      	bls.n	8003bb8 <_malloc_r+0x28>
 8003bac:	230c      	movs	r3, #12
 8003bae:	2600      	movs	r6, #0
 8003bb0:	603b      	str	r3, [r7, #0]
 8003bb2:	4630      	mov	r0, r6
 8003bb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bb8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003c8c <_malloc_r+0xfc>
 8003bbc:	f000 f868 	bl	8003c90 <__malloc_lock>
 8003bc0:	f8d8 3000 	ldr.w	r3, [r8]
 8003bc4:	461c      	mov	r4, r3
 8003bc6:	bb5c      	cbnz	r4, 8003c20 <_malloc_r+0x90>
 8003bc8:	4629      	mov	r1, r5
 8003bca:	4638      	mov	r0, r7
 8003bcc:	f7ff ffc0 	bl	8003b50 <sbrk_aligned>
 8003bd0:	1c43      	adds	r3, r0, #1
 8003bd2:	4604      	mov	r4, r0
 8003bd4:	d155      	bne.n	8003c82 <_malloc_r+0xf2>
 8003bd6:	f8d8 4000 	ldr.w	r4, [r8]
 8003bda:	4626      	mov	r6, r4
 8003bdc:	2e00      	cmp	r6, #0
 8003bde:	d145      	bne.n	8003c6c <_malloc_r+0xdc>
 8003be0:	2c00      	cmp	r4, #0
 8003be2:	d048      	beq.n	8003c76 <_malloc_r+0xe6>
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	4631      	mov	r1, r6
 8003be8:	4638      	mov	r0, r7
 8003bea:	eb04 0903 	add.w	r9, r4, r3
 8003bee:	f000 fb61 	bl	80042b4 <_sbrk_r>
 8003bf2:	4581      	cmp	r9, r0
 8003bf4:	d13f      	bne.n	8003c76 <_malloc_r+0xe6>
 8003bf6:	6821      	ldr	r1, [r4, #0]
 8003bf8:	4638      	mov	r0, r7
 8003bfa:	1a6d      	subs	r5, r5, r1
 8003bfc:	4629      	mov	r1, r5
 8003bfe:	f7ff ffa7 	bl	8003b50 <sbrk_aligned>
 8003c02:	3001      	adds	r0, #1
 8003c04:	d037      	beq.n	8003c76 <_malloc_r+0xe6>
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	442b      	add	r3, r5
 8003c0a:	6023      	str	r3, [r4, #0]
 8003c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d038      	beq.n	8003c86 <_malloc_r+0xf6>
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	42a2      	cmp	r2, r4
 8003c18:	d12b      	bne.n	8003c72 <_malloc_r+0xe2>
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	605a      	str	r2, [r3, #4]
 8003c1e:	e00f      	b.n	8003c40 <_malloc_r+0xb0>
 8003c20:	6822      	ldr	r2, [r4, #0]
 8003c22:	1b52      	subs	r2, r2, r5
 8003c24:	d41f      	bmi.n	8003c66 <_malloc_r+0xd6>
 8003c26:	2a0b      	cmp	r2, #11
 8003c28:	d917      	bls.n	8003c5a <_malloc_r+0xca>
 8003c2a:	1961      	adds	r1, r4, r5
 8003c2c:	42a3      	cmp	r3, r4
 8003c2e:	6025      	str	r5, [r4, #0]
 8003c30:	bf18      	it	ne
 8003c32:	6059      	strne	r1, [r3, #4]
 8003c34:	6863      	ldr	r3, [r4, #4]
 8003c36:	bf08      	it	eq
 8003c38:	f8c8 1000 	streq.w	r1, [r8]
 8003c3c:	5162      	str	r2, [r4, r5]
 8003c3e:	604b      	str	r3, [r1, #4]
 8003c40:	4638      	mov	r0, r7
 8003c42:	f104 060b 	add.w	r6, r4, #11
 8003c46:	f000 f829 	bl	8003c9c <__malloc_unlock>
 8003c4a:	f026 0607 	bic.w	r6, r6, #7
 8003c4e:	1d23      	adds	r3, r4, #4
 8003c50:	1af2      	subs	r2, r6, r3
 8003c52:	d0ae      	beq.n	8003bb2 <_malloc_r+0x22>
 8003c54:	1b9b      	subs	r3, r3, r6
 8003c56:	50a3      	str	r3, [r4, r2]
 8003c58:	e7ab      	b.n	8003bb2 <_malloc_r+0x22>
 8003c5a:	42a3      	cmp	r3, r4
 8003c5c:	6862      	ldr	r2, [r4, #4]
 8003c5e:	d1dd      	bne.n	8003c1c <_malloc_r+0x8c>
 8003c60:	f8c8 2000 	str.w	r2, [r8]
 8003c64:	e7ec      	b.n	8003c40 <_malloc_r+0xb0>
 8003c66:	4623      	mov	r3, r4
 8003c68:	6864      	ldr	r4, [r4, #4]
 8003c6a:	e7ac      	b.n	8003bc6 <_malloc_r+0x36>
 8003c6c:	4634      	mov	r4, r6
 8003c6e:	6876      	ldr	r6, [r6, #4]
 8003c70:	e7b4      	b.n	8003bdc <_malloc_r+0x4c>
 8003c72:	4613      	mov	r3, r2
 8003c74:	e7cc      	b.n	8003c10 <_malloc_r+0x80>
 8003c76:	230c      	movs	r3, #12
 8003c78:	4638      	mov	r0, r7
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	f000 f80e 	bl	8003c9c <__malloc_unlock>
 8003c80:	e797      	b.n	8003bb2 <_malloc_r+0x22>
 8003c82:	6025      	str	r5, [r4, #0]
 8003c84:	e7dc      	b.n	8003c40 <_malloc_r+0xb0>
 8003c86:	605b      	str	r3, [r3, #4]
 8003c88:	deff      	udf	#255	; 0xff
 8003c8a:	bf00      	nop
 8003c8c:	20000304 	.word	0x20000304

08003c90 <__malloc_lock>:
 8003c90:	4801      	ldr	r0, [pc, #4]	; (8003c98 <__malloc_lock+0x8>)
 8003c92:	f7ff bf13 	b.w	8003abc <__retarget_lock_acquire_recursive>
 8003c96:	bf00      	nop
 8003c98:	20000300 	.word	0x20000300

08003c9c <__malloc_unlock>:
 8003c9c:	4801      	ldr	r0, [pc, #4]	; (8003ca4 <__malloc_unlock+0x8>)
 8003c9e:	f7ff bf0e 	b.w	8003abe <__retarget_lock_release_recursive>
 8003ca2:	bf00      	nop
 8003ca4:	20000300 	.word	0x20000300

08003ca8 <__ssputs_r>:
 8003ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cac:	461f      	mov	r7, r3
 8003cae:	688e      	ldr	r6, [r1, #8]
 8003cb0:	4682      	mov	sl, r0
 8003cb2:	42be      	cmp	r6, r7
 8003cb4:	460c      	mov	r4, r1
 8003cb6:	4690      	mov	r8, r2
 8003cb8:	680b      	ldr	r3, [r1, #0]
 8003cba:	d82c      	bhi.n	8003d16 <__ssputs_r+0x6e>
 8003cbc:	898a      	ldrh	r2, [r1, #12]
 8003cbe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003cc2:	d026      	beq.n	8003d12 <__ssputs_r+0x6a>
 8003cc4:	6965      	ldr	r5, [r4, #20]
 8003cc6:	6909      	ldr	r1, [r1, #16]
 8003cc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ccc:	eba3 0901 	sub.w	r9, r3, r1
 8003cd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cd4:	1c7b      	adds	r3, r7, #1
 8003cd6:	444b      	add	r3, r9
 8003cd8:	106d      	asrs	r5, r5, #1
 8003cda:	429d      	cmp	r5, r3
 8003cdc:	bf38      	it	cc
 8003cde:	461d      	movcc	r5, r3
 8003ce0:	0553      	lsls	r3, r2, #21
 8003ce2:	d527      	bpl.n	8003d34 <__ssputs_r+0x8c>
 8003ce4:	4629      	mov	r1, r5
 8003ce6:	f7ff ff53 	bl	8003b90 <_malloc_r>
 8003cea:	4606      	mov	r6, r0
 8003cec:	b360      	cbz	r0, 8003d48 <__ssputs_r+0xa0>
 8003cee:	464a      	mov	r2, r9
 8003cf0:	6921      	ldr	r1, [r4, #16]
 8003cf2:	f000 fafd 	bl	80042f0 <memcpy>
 8003cf6:	89a3      	ldrh	r3, [r4, #12]
 8003cf8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d00:	81a3      	strh	r3, [r4, #12]
 8003d02:	6126      	str	r6, [r4, #16]
 8003d04:	444e      	add	r6, r9
 8003d06:	6026      	str	r6, [r4, #0]
 8003d08:	463e      	mov	r6, r7
 8003d0a:	6165      	str	r5, [r4, #20]
 8003d0c:	eba5 0509 	sub.w	r5, r5, r9
 8003d10:	60a5      	str	r5, [r4, #8]
 8003d12:	42be      	cmp	r6, r7
 8003d14:	d900      	bls.n	8003d18 <__ssputs_r+0x70>
 8003d16:	463e      	mov	r6, r7
 8003d18:	4632      	mov	r2, r6
 8003d1a:	4641      	mov	r1, r8
 8003d1c:	6820      	ldr	r0, [r4, #0]
 8003d1e:	f000 faaf 	bl	8004280 <memmove>
 8003d22:	2000      	movs	r0, #0
 8003d24:	68a3      	ldr	r3, [r4, #8]
 8003d26:	1b9b      	subs	r3, r3, r6
 8003d28:	60a3      	str	r3, [r4, #8]
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	4433      	add	r3, r6
 8003d2e:	6023      	str	r3, [r4, #0]
 8003d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d34:	462a      	mov	r2, r5
 8003d36:	f000 fae9 	bl	800430c <_realloc_r>
 8003d3a:	4606      	mov	r6, r0
 8003d3c:	2800      	cmp	r0, #0
 8003d3e:	d1e0      	bne.n	8003d02 <__ssputs_r+0x5a>
 8003d40:	4650      	mov	r0, sl
 8003d42:	6921      	ldr	r1, [r4, #16]
 8003d44:	f7ff febc 	bl	8003ac0 <_free_r>
 8003d48:	230c      	movs	r3, #12
 8003d4a:	f8ca 3000 	str.w	r3, [sl]
 8003d4e:	89a3      	ldrh	r3, [r4, #12]
 8003d50:	f04f 30ff 	mov.w	r0, #4294967295
 8003d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d58:	81a3      	strh	r3, [r4, #12]
 8003d5a:	e7e9      	b.n	8003d30 <__ssputs_r+0x88>

08003d5c <_svfiprintf_r>:
 8003d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d60:	4698      	mov	r8, r3
 8003d62:	898b      	ldrh	r3, [r1, #12]
 8003d64:	4607      	mov	r7, r0
 8003d66:	061b      	lsls	r3, r3, #24
 8003d68:	460d      	mov	r5, r1
 8003d6a:	4614      	mov	r4, r2
 8003d6c:	b09d      	sub	sp, #116	; 0x74
 8003d6e:	d50e      	bpl.n	8003d8e <_svfiprintf_r+0x32>
 8003d70:	690b      	ldr	r3, [r1, #16]
 8003d72:	b963      	cbnz	r3, 8003d8e <_svfiprintf_r+0x32>
 8003d74:	2140      	movs	r1, #64	; 0x40
 8003d76:	f7ff ff0b 	bl	8003b90 <_malloc_r>
 8003d7a:	6028      	str	r0, [r5, #0]
 8003d7c:	6128      	str	r0, [r5, #16]
 8003d7e:	b920      	cbnz	r0, 8003d8a <_svfiprintf_r+0x2e>
 8003d80:	230c      	movs	r3, #12
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	f04f 30ff 	mov.w	r0, #4294967295
 8003d88:	e0d0      	b.n	8003f2c <_svfiprintf_r+0x1d0>
 8003d8a:	2340      	movs	r3, #64	; 0x40
 8003d8c:	616b      	str	r3, [r5, #20]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	9309      	str	r3, [sp, #36]	; 0x24
 8003d92:	2320      	movs	r3, #32
 8003d94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d98:	2330      	movs	r3, #48	; 0x30
 8003d9a:	f04f 0901 	mov.w	r9, #1
 8003d9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003da2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003f44 <_svfiprintf_r+0x1e8>
 8003da6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003daa:	4623      	mov	r3, r4
 8003dac:	469a      	mov	sl, r3
 8003dae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003db2:	b10a      	cbz	r2, 8003db8 <_svfiprintf_r+0x5c>
 8003db4:	2a25      	cmp	r2, #37	; 0x25
 8003db6:	d1f9      	bne.n	8003dac <_svfiprintf_r+0x50>
 8003db8:	ebba 0b04 	subs.w	fp, sl, r4
 8003dbc:	d00b      	beq.n	8003dd6 <_svfiprintf_r+0x7a>
 8003dbe:	465b      	mov	r3, fp
 8003dc0:	4622      	mov	r2, r4
 8003dc2:	4629      	mov	r1, r5
 8003dc4:	4638      	mov	r0, r7
 8003dc6:	f7ff ff6f 	bl	8003ca8 <__ssputs_r>
 8003dca:	3001      	adds	r0, #1
 8003dcc:	f000 80a9 	beq.w	8003f22 <_svfiprintf_r+0x1c6>
 8003dd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dd2:	445a      	add	r2, fp
 8003dd4:	9209      	str	r2, [sp, #36]	; 0x24
 8003dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 80a1 	beq.w	8003f22 <_svfiprintf_r+0x1c6>
 8003de0:	2300      	movs	r3, #0
 8003de2:	f04f 32ff 	mov.w	r2, #4294967295
 8003de6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dea:	f10a 0a01 	add.w	sl, sl, #1
 8003dee:	9304      	str	r3, [sp, #16]
 8003df0:	9307      	str	r3, [sp, #28]
 8003df2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003df6:	931a      	str	r3, [sp, #104]	; 0x68
 8003df8:	4654      	mov	r4, sl
 8003dfa:	2205      	movs	r2, #5
 8003dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e00:	4850      	ldr	r0, [pc, #320]	; (8003f44 <_svfiprintf_r+0x1e8>)
 8003e02:	f000 fa67 	bl	80042d4 <memchr>
 8003e06:	9a04      	ldr	r2, [sp, #16]
 8003e08:	b9d8      	cbnz	r0, 8003e42 <_svfiprintf_r+0xe6>
 8003e0a:	06d0      	lsls	r0, r2, #27
 8003e0c:	bf44      	itt	mi
 8003e0e:	2320      	movmi	r3, #32
 8003e10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e14:	0711      	lsls	r1, r2, #28
 8003e16:	bf44      	itt	mi
 8003e18:	232b      	movmi	r3, #43	; 0x2b
 8003e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e22:	2b2a      	cmp	r3, #42	; 0x2a
 8003e24:	d015      	beq.n	8003e52 <_svfiprintf_r+0xf6>
 8003e26:	4654      	mov	r4, sl
 8003e28:	2000      	movs	r0, #0
 8003e2a:	f04f 0c0a 	mov.w	ip, #10
 8003e2e:	9a07      	ldr	r2, [sp, #28]
 8003e30:	4621      	mov	r1, r4
 8003e32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e36:	3b30      	subs	r3, #48	; 0x30
 8003e38:	2b09      	cmp	r3, #9
 8003e3a:	d94d      	bls.n	8003ed8 <_svfiprintf_r+0x17c>
 8003e3c:	b1b0      	cbz	r0, 8003e6c <_svfiprintf_r+0x110>
 8003e3e:	9207      	str	r2, [sp, #28]
 8003e40:	e014      	b.n	8003e6c <_svfiprintf_r+0x110>
 8003e42:	eba0 0308 	sub.w	r3, r0, r8
 8003e46:	fa09 f303 	lsl.w	r3, r9, r3
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	46a2      	mov	sl, r4
 8003e4e:	9304      	str	r3, [sp, #16]
 8003e50:	e7d2      	b.n	8003df8 <_svfiprintf_r+0x9c>
 8003e52:	9b03      	ldr	r3, [sp, #12]
 8003e54:	1d19      	adds	r1, r3, #4
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	9103      	str	r1, [sp, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	bfbb      	ittet	lt
 8003e5e:	425b      	neglt	r3, r3
 8003e60:	f042 0202 	orrlt.w	r2, r2, #2
 8003e64:	9307      	strge	r3, [sp, #28]
 8003e66:	9307      	strlt	r3, [sp, #28]
 8003e68:	bfb8      	it	lt
 8003e6a:	9204      	strlt	r2, [sp, #16]
 8003e6c:	7823      	ldrb	r3, [r4, #0]
 8003e6e:	2b2e      	cmp	r3, #46	; 0x2e
 8003e70:	d10c      	bne.n	8003e8c <_svfiprintf_r+0x130>
 8003e72:	7863      	ldrb	r3, [r4, #1]
 8003e74:	2b2a      	cmp	r3, #42	; 0x2a
 8003e76:	d134      	bne.n	8003ee2 <_svfiprintf_r+0x186>
 8003e78:	9b03      	ldr	r3, [sp, #12]
 8003e7a:	3402      	adds	r4, #2
 8003e7c:	1d1a      	adds	r2, r3, #4
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	9203      	str	r2, [sp, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	bfb8      	it	lt
 8003e86:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e8a:	9305      	str	r3, [sp, #20]
 8003e8c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003f48 <_svfiprintf_r+0x1ec>
 8003e90:	2203      	movs	r2, #3
 8003e92:	4650      	mov	r0, sl
 8003e94:	7821      	ldrb	r1, [r4, #0]
 8003e96:	f000 fa1d 	bl	80042d4 <memchr>
 8003e9a:	b138      	cbz	r0, 8003eac <_svfiprintf_r+0x150>
 8003e9c:	2240      	movs	r2, #64	; 0x40
 8003e9e:	9b04      	ldr	r3, [sp, #16]
 8003ea0:	eba0 000a 	sub.w	r0, r0, sl
 8003ea4:	4082      	lsls	r2, r0
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	3401      	adds	r4, #1
 8003eaa:	9304      	str	r3, [sp, #16]
 8003eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eb0:	2206      	movs	r2, #6
 8003eb2:	4826      	ldr	r0, [pc, #152]	; (8003f4c <_svfiprintf_r+0x1f0>)
 8003eb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003eb8:	f000 fa0c 	bl	80042d4 <memchr>
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	d038      	beq.n	8003f32 <_svfiprintf_r+0x1d6>
 8003ec0:	4b23      	ldr	r3, [pc, #140]	; (8003f50 <_svfiprintf_r+0x1f4>)
 8003ec2:	bb1b      	cbnz	r3, 8003f0c <_svfiprintf_r+0x1b0>
 8003ec4:	9b03      	ldr	r3, [sp, #12]
 8003ec6:	3307      	adds	r3, #7
 8003ec8:	f023 0307 	bic.w	r3, r3, #7
 8003ecc:	3308      	adds	r3, #8
 8003ece:	9303      	str	r3, [sp, #12]
 8003ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ed2:	4433      	add	r3, r6
 8003ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ed6:	e768      	b.n	8003daa <_svfiprintf_r+0x4e>
 8003ed8:	460c      	mov	r4, r1
 8003eda:	2001      	movs	r0, #1
 8003edc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ee0:	e7a6      	b.n	8003e30 <_svfiprintf_r+0xd4>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f04f 0c0a 	mov.w	ip, #10
 8003ee8:	4619      	mov	r1, r3
 8003eea:	3401      	adds	r4, #1
 8003eec:	9305      	str	r3, [sp, #20]
 8003eee:	4620      	mov	r0, r4
 8003ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ef4:	3a30      	subs	r2, #48	; 0x30
 8003ef6:	2a09      	cmp	r2, #9
 8003ef8:	d903      	bls.n	8003f02 <_svfiprintf_r+0x1a6>
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0c6      	beq.n	8003e8c <_svfiprintf_r+0x130>
 8003efe:	9105      	str	r1, [sp, #20]
 8003f00:	e7c4      	b.n	8003e8c <_svfiprintf_r+0x130>
 8003f02:	4604      	mov	r4, r0
 8003f04:	2301      	movs	r3, #1
 8003f06:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f0a:	e7f0      	b.n	8003eee <_svfiprintf_r+0x192>
 8003f0c:	ab03      	add	r3, sp, #12
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	462a      	mov	r2, r5
 8003f12:	4638      	mov	r0, r7
 8003f14:	4b0f      	ldr	r3, [pc, #60]	; (8003f54 <_svfiprintf_r+0x1f8>)
 8003f16:	a904      	add	r1, sp, #16
 8003f18:	f3af 8000 	nop.w
 8003f1c:	1c42      	adds	r2, r0, #1
 8003f1e:	4606      	mov	r6, r0
 8003f20:	d1d6      	bne.n	8003ed0 <_svfiprintf_r+0x174>
 8003f22:	89ab      	ldrh	r3, [r5, #12]
 8003f24:	065b      	lsls	r3, r3, #25
 8003f26:	f53f af2d 	bmi.w	8003d84 <_svfiprintf_r+0x28>
 8003f2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f2c:	b01d      	add	sp, #116	; 0x74
 8003f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f32:	ab03      	add	r3, sp, #12
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	462a      	mov	r2, r5
 8003f38:	4638      	mov	r0, r7
 8003f3a:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <_svfiprintf_r+0x1f8>)
 8003f3c:	a904      	add	r1, sp, #16
 8003f3e:	f000 f87d 	bl	800403c <_printf_i>
 8003f42:	e7eb      	b.n	8003f1c <_svfiprintf_r+0x1c0>
 8003f44:	080044df 	.word	0x080044df
 8003f48:	080044e5 	.word	0x080044e5
 8003f4c:	080044e9 	.word	0x080044e9
 8003f50:	00000000 	.word	0x00000000
 8003f54:	08003ca9 	.word	0x08003ca9

08003f58 <_printf_common>:
 8003f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f5c:	4616      	mov	r6, r2
 8003f5e:	4699      	mov	r9, r3
 8003f60:	688a      	ldr	r2, [r1, #8]
 8003f62:	690b      	ldr	r3, [r1, #16]
 8003f64:	4607      	mov	r7, r0
 8003f66:	4293      	cmp	r3, r2
 8003f68:	bfb8      	it	lt
 8003f6a:	4613      	movlt	r3, r2
 8003f6c:	6033      	str	r3, [r6, #0]
 8003f6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f72:	460c      	mov	r4, r1
 8003f74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f78:	b10a      	cbz	r2, 8003f7e <_printf_common+0x26>
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	6033      	str	r3, [r6, #0]
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	0699      	lsls	r1, r3, #26
 8003f82:	bf42      	ittt	mi
 8003f84:	6833      	ldrmi	r3, [r6, #0]
 8003f86:	3302      	addmi	r3, #2
 8003f88:	6033      	strmi	r3, [r6, #0]
 8003f8a:	6825      	ldr	r5, [r4, #0]
 8003f8c:	f015 0506 	ands.w	r5, r5, #6
 8003f90:	d106      	bne.n	8003fa0 <_printf_common+0x48>
 8003f92:	f104 0a19 	add.w	sl, r4, #25
 8003f96:	68e3      	ldr	r3, [r4, #12]
 8003f98:	6832      	ldr	r2, [r6, #0]
 8003f9a:	1a9b      	subs	r3, r3, r2
 8003f9c:	42ab      	cmp	r3, r5
 8003f9e:	dc2b      	bgt.n	8003ff8 <_printf_common+0xa0>
 8003fa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fa4:	1e13      	subs	r3, r2, #0
 8003fa6:	6822      	ldr	r2, [r4, #0]
 8003fa8:	bf18      	it	ne
 8003faa:	2301      	movne	r3, #1
 8003fac:	0692      	lsls	r2, r2, #26
 8003fae:	d430      	bmi.n	8004012 <_printf_common+0xba>
 8003fb0:	4649      	mov	r1, r9
 8003fb2:	4638      	mov	r0, r7
 8003fb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fb8:	47c0      	blx	r8
 8003fba:	3001      	adds	r0, #1
 8003fbc:	d023      	beq.n	8004006 <_printf_common+0xae>
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	6922      	ldr	r2, [r4, #16]
 8003fc2:	f003 0306 	and.w	r3, r3, #6
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	bf14      	ite	ne
 8003fca:	2500      	movne	r5, #0
 8003fcc:	6833      	ldreq	r3, [r6, #0]
 8003fce:	f04f 0600 	mov.w	r6, #0
 8003fd2:	bf08      	it	eq
 8003fd4:	68e5      	ldreq	r5, [r4, #12]
 8003fd6:	f104 041a 	add.w	r4, r4, #26
 8003fda:	bf08      	it	eq
 8003fdc:	1aed      	subeq	r5, r5, r3
 8003fde:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003fe2:	bf08      	it	eq
 8003fe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	bfc4      	itt	gt
 8003fec:	1a9b      	subgt	r3, r3, r2
 8003fee:	18ed      	addgt	r5, r5, r3
 8003ff0:	42b5      	cmp	r5, r6
 8003ff2:	d11a      	bne.n	800402a <_printf_common+0xd2>
 8003ff4:	2000      	movs	r0, #0
 8003ff6:	e008      	b.n	800400a <_printf_common+0xb2>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	4652      	mov	r2, sl
 8003ffc:	4649      	mov	r1, r9
 8003ffe:	4638      	mov	r0, r7
 8004000:	47c0      	blx	r8
 8004002:	3001      	adds	r0, #1
 8004004:	d103      	bne.n	800400e <_printf_common+0xb6>
 8004006:	f04f 30ff 	mov.w	r0, #4294967295
 800400a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800400e:	3501      	adds	r5, #1
 8004010:	e7c1      	b.n	8003f96 <_printf_common+0x3e>
 8004012:	2030      	movs	r0, #48	; 0x30
 8004014:	18e1      	adds	r1, r4, r3
 8004016:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004020:	4422      	add	r2, r4
 8004022:	3302      	adds	r3, #2
 8004024:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004028:	e7c2      	b.n	8003fb0 <_printf_common+0x58>
 800402a:	2301      	movs	r3, #1
 800402c:	4622      	mov	r2, r4
 800402e:	4649      	mov	r1, r9
 8004030:	4638      	mov	r0, r7
 8004032:	47c0      	blx	r8
 8004034:	3001      	adds	r0, #1
 8004036:	d0e6      	beq.n	8004006 <_printf_common+0xae>
 8004038:	3601      	adds	r6, #1
 800403a:	e7d9      	b.n	8003ff0 <_printf_common+0x98>

0800403c <_printf_i>:
 800403c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004040:	7e0f      	ldrb	r7, [r1, #24]
 8004042:	4691      	mov	r9, r2
 8004044:	2f78      	cmp	r7, #120	; 0x78
 8004046:	4680      	mov	r8, r0
 8004048:	460c      	mov	r4, r1
 800404a:	469a      	mov	sl, r3
 800404c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800404e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004052:	d807      	bhi.n	8004064 <_printf_i+0x28>
 8004054:	2f62      	cmp	r7, #98	; 0x62
 8004056:	d80a      	bhi.n	800406e <_printf_i+0x32>
 8004058:	2f00      	cmp	r7, #0
 800405a:	f000 80d5 	beq.w	8004208 <_printf_i+0x1cc>
 800405e:	2f58      	cmp	r7, #88	; 0x58
 8004060:	f000 80c1 	beq.w	80041e6 <_printf_i+0x1aa>
 8004064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004068:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800406c:	e03a      	b.n	80040e4 <_printf_i+0xa8>
 800406e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004072:	2b15      	cmp	r3, #21
 8004074:	d8f6      	bhi.n	8004064 <_printf_i+0x28>
 8004076:	a101      	add	r1, pc, #4	; (adr r1, 800407c <_printf_i+0x40>)
 8004078:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800407c:	080040d5 	.word	0x080040d5
 8004080:	080040e9 	.word	0x080040e9
 8004084:	08004065 	.word	0x08004065
 8004088:	08004065 	.word	0x08004065
 800408c:	08004065 	.word	0x08004065
 8004090:	08004065 	.word	0x08004065
 8004094:	080040e9 	.word	0x080040e9
 8004098:	08004065 	.word	0x08004065
 800409c:	08004065 	.word	0x08004065
 80040a0:	08004065 	.word	0x08004065
 80040a4:	08004065 	.word	0x08004065
 80040a8:	080041ef 	.word	0x080041ef
 80040ac:	08004115 	.word	0x08004115
 80040b0:	080041a9 	.word	0x080041a9
 80040b4:	08004065 	.word	0x08004065
 80040b8:	08004065 	.word	0x08004065
 80040bc:	08004211 	.word	0x08004211
 80040c0:	08004065 	.word	0x08004065
 80040c4:	08004115 	.word	0x08004115
 80040c8:	08004065 	.word	0x08004065
 80040cc:	08004065 	.word	0x08004065
 80040d0:	080041b1 	.word	0x080041b1
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	1d1a      	adds	r2, r3, #4
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	602a      	str	r2, [r5, #0]
 80040dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040e4:	2301      	movs	r3, #1
 80040e6:	e0a0      	b.n	800422a <_printf_i+0x1ee>
 80040e8:	6820      	ldr	r0, [r4, #0]
 80040ea:	682b      	ldr	r3, [r5, #0]
 80040ec:	0607      	lsls	r7, r0, #24
 80040ee:	f103 0104 	add.w	r1, r3, #4
 80040f2:	6029      	str	r1, [r5, #0]
 80040f4:	d501      	bpl.n	80040fa <_printf_i+0xbe>
 80040f6:	681e      	ldr	r6, [r3, #0]
 80040f8:	e003      	b.n	8004102 <_printf_i+0xc6>
 80040fa:	0646      	lsls	r6, r0, #25
 80040fc:	d5fb      	bpl.n	80040f6 <_printf_i+0xba>
 80040fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004102:	2e00      	cmp	r6, #0
 8004104:	da03      	bge.n	800410e <_printf_i+0xd2>
 8004106:	232d      	movs	r3, #45	; 0x2d
 8004108:	4276      	negs	r6, r6
 800410a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800410e:	230a      	movs	r3, #10
 8004110:	4859      	ldr	r0, [pc, #356]	; (8004278 <_printf_i+0x23c>)
 8004112:	e012      	b.n	800413a <_printf_i+0xfe>
 8004114:	682b      	ldr	r3, [r5, #0]
 8004116:	6820      	ldr	r0, [r4, #0]
 8004118:	1d19      	adds	r1, r3, #4
 800411a:	6029      	str	r1, [r5, #0]
 800411c:	0605      	lsls	r5, r0, #24
 800411e:	d501      	bpl.n	8004124 <_printf_i+0xe8>
 8004120:	681e      	ldr	r6, [r3, #0]
 8004122:	e002      	b.n	800412a <_printf_i+0xee>
 8004124:	0641      	lsls	r1, r0, #25
 8004126:	d5fb      	bpl.n	8004120 <_printf_i+0xe4>
 8004128:	881e      	ldrh	r6, [r3, #0]
 800412a:	2f6f      	cmp	r7, #111	; 0x6f
 800412c:	bf0c      	ite	eq
 800412e:	2308      	moveq	r3, #8
 8004130:	230a      	movne	r3, #10
 8004132:	4851      	ldr	r0, [pc, #324]	; (8004278 <_printf_i+0x23c>)
 8004134:	2100      	movs	r1, #0
 8004136:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800413a:	6865      	ldr	r5, [r4, #4]
 800413c:	2d00      	cmp	r5, #0
 800413e:	bfa8      	it	ge
 8004140:	6821      	ldrge	r1, [r4, #0]
 8004142:	60a5      	str	r5, [r4, #8]
 8004144:	bfa4      	itt	ge
 8004146:	f021 0104 	bicge.w	r1, r1, #4
 800414a:	6021      	strge	r1, [r4, #0]
 800414c:	b90e      	cbnz	r6, 8004152 <_printf_i+0x116>
 800414e:	2d00      	cmp	r5, #0
 8004150:	d04b      	beq.n	80041ea <_printf_i+0x1ae>
 8004152:	4615      	mov	r5, r2
 8004154:	fbb6 f1f3 	udiv	r1, r6, r3
 8004158:	fb03 6711 	mls	r7, r3, r1, r6
 800415c:	5dc7      	ldrb	r7, [r0, r7]
 800415e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004162:	4637      	mov	r7, r6
 8004164:	42bb      	cmp	r3, r7
 8004166:	460e      	mov	r6, r1
 8004168:	d9f4      	bls.n	8004154 <_printf_i+0x118>
 800416a:	2b08      	cmp	r3, #8
 800416c:	d10b      	bne.n	8004186 <_printf_i+0x14a>
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	07de      	lsls	r6, r3, #31
 8004172:	d508      	bpl.n	8004186 <_printf_i+0x14a>
 8004174:	6923      	ldr	r3, [r4, #16]
 8004176:	6861      	ldr	r1, [r4, #4]
 8004178:	4299      	cmp	r1, r3
 800417a:	bfde      	ittt	le
 800417c:	2330      	movle	r3, #48	; 0x30
 800417e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004182:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004186:	1b52      	subs	r2, r2, r5
 8004188:	6122      	str	r2, [r4, #16]
 800418a:	464b      	mov	r3, r9
 800418c:	4621      	mov	r1, r4
 800418e:	4640      	mov	r0, r8
 8004190:	f8cd a000 	str.w	sl, [sp]
 8004194:	aa03      	add	r2, sp, #12
 8004196:	f7ff fedf 	bl	8003f58 <_printf_common>
 800419a:	3001      	adds	r0, #1
 800419c:	d14a      	bne.n	8004234 <_printf_i+0x1f8>
 800419e:	f04f 30ff 	mov.w	r0, #4294967295
 80041a2:	b004      	add	sp, #16
 80041a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	f043 0320 	orr.w	r3, r3, #32
 80041ae:	6023      	str	r3, [r4, #0]
 80041b0:	2778      	movs	r7, #120	; 0x78
 80041b2:	4832      	ldr	r0, [pc, #200]	; (800427c <_printf_i+0x240>)
 80041b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	6829      	ldr	r1, [r5, #0]
 80041bc:	061f      	lsls	r7, r3, #24
 80041be:	f851 6b04 	ldr.w	r6, [r1], #4
 80041c2:	d402      	bmi.n	80041ca <_printf_i+0x18e>
 80041c4:	065f      	lsls	r7, r3, #25
 80041c6:	bf48      	it	mi
 80041c8:	b2b6      	uxthmi	r6, r6
 80041ca:	07df      	lsls	r7, r3, #31
 80041cc:	bf48      	it	mi
 80041ce:	f043 0320 	orrmi.w	r3, r3, #32
 80041d2:	6029      	str	r1, [r5, #0]
 80041d4:	bf48      	it	mi
 80041d6:	6023      	strmi	r3, [r4, #0]
 80041d8:	b91e      	cbnz	r6, 80041e2 <_printf_i+0x1a6>
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	f023 0320 	bic.w	r3, r3, #32
 80041e0:	6023      	str	r3, [r4, #0]
 80041e2:	2310      	movs	r3, #16
 80041e4:	e7a6      	b.n	8004134 <_printf_i+0xf8>
 80041e6:	4824      	ldr	r0, [pc, #144]	; (8004278 <_printf_i+0x23c>)
 80041e8:	e7e4      	b.n	80041b4 <_printf_i+0x178>
 80041ea:	4615      	mov	r5, r2
 80041ec:	e7bd      	b.n	800416a <_printf_i+0x12e>
 80041ee:	682b      	ldr	r3, [r5, #0]
 80041f0:	6826      	ldr	r6, [r4, #0]
 80041f2:	1d18      	adds	r0, r3, #4
 80041f4:	6961      	ldr	r1, [r4, #20]
 80041f6:	6028      	str	r0, [r5, #0]
 80041f8:	0635      	lsls	r5, r6, #24
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	d501      	bpl.n	8004202 <_printf_i+0x1c6>
 80041fe:	6019      	str	r1, [r3, #0]
 8004200:	e002      	b.n	8004208 <_printf_i+0x1cc>
 8004202:	0670      	lsls	r0, r6, #25
 8004204:	d5fb      	bpl.n	80041fe <_printf_i+0x1c2>
 8004206:	8019      	strh	r1, [r3, #0]
 8004208:	2300      	movs	r3, #0
 800420a:	4615      	mov	r5, r2
 800420c:	6123      	str	r3, [r4, #16]
 800420e:	e7bc      	b.n	800418a <_printf_i+0x14e>
 8004210:	682b      	ldr	r3, [r5, #0]
 8004212:	2100      	movs	r1, #0
 8004214:	1d1a      	adds	r2, r3, #4
 8004216:	602a      	str	r2, [r5, #0]
 8004218:	681d      	ldr	r5, [r3, #0]
 800421a:	6862      	ldr	r2, [r4, #4]
 800421c:	4628      	mov	r0, r5
 800421e:	f000 f859 	bl	80042d4 <memchr>
 8004222:	b108      	cbz	r0, 8004228 <_printf_i+0x1ec>
 8004224:	1b40      	subs	r0, r0, r5
 8004226:	6060      	str	r0, [r4, #4]
 8004228:	6863      	ldr	r3, [r4, #4]
 800422a:	6123      	str	r3, [r4, #16]
 800422c:	2300      	movs	r3, #0
 800422e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004232:	e7aa      	b.n	800418a <_printf_i+0x14e>
 8004234:	462a      	mov	r2, r5
 8004236:	4649      	mov	r1, r9
 8004238:	4640      	mov	r0, r8
 800423a:	6923      	ldr	r3, [r4, #16]
 800423c:	47d0      	blx	sl
 800423e:	3001      	adds	r0, #1
 8004240:	d0ad      	beq.n	800419e <_printf_i+0x162>
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	079b      	lsls	r3, r3, #30
 8004246:	d413      	bmi.n	8004270 <_printf_i+0x234>
 8004248:	68e0      	ldr	r0, [r4, #12]
 800424a:	9b03      	ldr	r3, [sp, #12]
 800424c:	4298      	cmp	r0, r3
 800424e:	bfb8      	it	lt
 8004250:	4618      	movlt	r0, r3
 8004252:	e7a6      	b.n	80041a2 <_printf_i+0x166>
 8004254:	2301      	movs	r3, #1
 8004256:	4632      	mov	r2, r6
 8004258:	4649      	mov	r1, r9
 800425a:	4640      	mov	r0, r8
 800425c:	47d0      	blx	sl
 800425e:	3001      	adds	r0, #1
 8004260:	d09d      	beq.n	800419e <_printf_i+0x162>
 8004262:	3501      	adds	r5, #1
 8004264:	68e3      	ldr	r3, [r4, #12]
 8004266:	9903      	ldr	r1, [sp, #12]
 8004268:	1a5b      	subs	r3, r3, r1
 800426a:	42ab      	cmp	r3, r5
 800426c:	dcf2      	bgt.n	8004254 <_printf_i+0x218>
 800426e:	e7eb      	b.n	8004248 <_printf_i+0x20c>
 8004270:	2500      	movs	r5, #0
 8004272:	f104 0619 	add.w	r6, r4, #25
 8004276:	e7f5      	b.n	8004264 <_printf_i+0x228>
 8004278:	080044f0 	.word	0x080044f0
 800427c:	08004501 	.word	0x08004501

08004280 <memmove>:
 8004280:	4288      	cmp	r0, r1
 8004282:	b510      	push	{r4, lr}
 8004284:	eb01 0402 	add.w	r4, r1, r2
 8004288:	d902      	bls.n	8004290 <memmove+0x10>
 800428a:	4284      	cmp	r4, r0
 800428c:	4623      	mov	r3, r4
 800428e:	d807      	bhi.n	80042a0 <memmove+0x20>
 8004290:	1e43      	subs	r3, r0, #1
 8004292:	42a1      	cmp	r1, r4
 8004294:	d008      	beq.n	80042a8 <memmove+0x28>
 8004296:	f811 2b01 	ldrb.w	r2, [r1], #1
 800429a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800429e:	e7f8      	b.n	8004292 <memmove+0x12>
 80042a0:	4601      	mov	r1, r0
 80042a2:	4402      	add	r2, r0
 80042a4:	428a      	cmp	r2, r1
 80042a6:	d100      	bne.n	80042aa <memmove+0x2a>
 80042a8:	bd10      	pop	{r4, pc}
 80042aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042b2:	e7f7      	b.n	80042a4 <memmove+0x24>

080042b4 <_sbrk_r>:
 80042b4:	b538      	push	{r3, r4, r5, lr}
 80042b6:	2300      	movs	r3, #0
 80042b8:	4d05      	ldr	r5, [pc, #20]	; (80042d0 <_sbrk_r+0x1c>)
 80042ba:	4604      	mov	r4, r0
 80042bc:	4608      	mov	r0, r1
 80042be:	602b      	str	r3, [r5, #0]
 80042c0:	f7fc fb22 	bl	8000908 <_sbrk>
 80042c4:	1c43      	adds	r3, r0, #1
 80042c6:	d102      	bne.n	80042ce <_sbrk_r+0x1a>
 80042c8:	682b      	ldr	r3, [r5, #0]
 80042ca:	b103      	cbz	r3, 80042ce <_sbrk_r+0x1a>
 80042cc:	6023      	str	r3, [r4, #0]
 80042ce:	bd38      	pop	{r3, r4, r5, pc}
 80042d0:	200002fc 	.word	0x200002fc

080042d4 <memchr>:
 80042d4:	4603      	mov	r3, r0
 80042d6:	b510      	push	{r4, lr}
 80042d8:	b2c9      	uxtb	r1, r1
 80042da:	4402      	add	r2, r0
 80042dc:	4293      	cmp	r3, r2
 80042de:	4618      	mov	r0, r3
 80042e0:	d101      	bne.n	80042e6 <memchr+0x12>
 80042e2:	2000      	movs	r0, #0
 80042e4:	e003      	b.n	80042ee <memchr+0x1a>
 80042e6:	7804      	ldrb	r4, [r0, #0]
 80042e8:	3301      	adds	r3, #1
 80042ea:	428c      	cmp	r4, r1
 80042ec:	d1f6      	bne.n	80042dc <memchr+0x8>
 80042ee:	bd10      	pop	{r4, pc}

080042f0 <memcpy>:
 80042f0:	440a      	add	r2, r1
 80042f2:	4291      	cmp	r1, r2
 80042f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80042f8:	d100      	bne.n	80042fc <memcpy+0xc>
 80042fa:	4770      	bx	lr
 80042fc:	b510      	push	{r4, lr}
 80042fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004302:	4291      	cmp	r1, r2
 8004304:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004308:	d1f9      	bne.n	80042fe <memcpy+0xe>
 800430a:	bd10      	pop	{r4, pc}

0800430c <_realloc_r>:
 800430c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004310:	4680      	mov	r8, r0
 8004312:	4614      	mov	r4, r2
 8004314:	460e      	mov	r6, r1
 8004316:	b921      	cbnz	r1, 8004322 <_realloc_r+0x16>
 8004318:	4611      	mov	r1, r2
 800431a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800431e:	f7ff bc37 	b.w	8003b90 <_malloc_r>
 8004322:	b92a      	cbnz	r2, 8004330 <_realloc_r+0x24>
 8004324:	f7ff fbcc 	bl	8003ac0 <_free_r>
 8004328:	4625      	mov	r5, r4
 800432a:	4628      	mov	r0, r5
 800432c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004330:	f000 f81b 	bl	800436a <_malloc_usable_size_r>
 8004334:	4284      	cmp	r4, r0
 8004336:	4607      	mov	r7, r0
 8004338:	d802      	bhi.n	8004340 <_realloc_r+0x34>
 800433a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800433e:	d812      	bhi.n	8004366 <_realloc_r+0x5a>
 8004340:	4621      	mov	r1, r4
 8004342:	4640      	mov	r0, r8
 8004344:	f7ff fc24 	bl	8003b90 <_malloc_r>
 8004348:	4605      	mov	r5, r0
 800434a:	2800      	cmp	r0, #0
 800434c:	d0ed      	beq.n	800432a <_realloc_r+0x1e>
 800434e:	42bc      	cmp	r4, r7
 8004350:	4622      	mov	r2, r4
 8004352:	4631      	mov	r1, r6
 8004354:	bf28      	it	cs
 8004356:	463a      	movcs	r2, r7
 8004358:	f7ff ffca 	bl	80042f0 <memcpy>
 800435c:	4631      	mov	r1, r6
 800435e:	4640      	mov	r0, r8
 8004360:	f7ff fbae 	bl	8003ac0 <_free_r>
 8004364:	e7e1      	b.n	800432a <_realloc_r+0x1e>
 8004366:	4635      	mov	r5, r6
 8004368:	e7df      	b.n	800432a <_realloc_r+0x1e>

0800436a <_malloc_usable_size_r>:
 800436a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800436e:	1f18      	subs	r0, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	bfbc      	itt	lt
 8004374:	580b      	ldrlt	r3, [r1, r0]
 8004376:	18c0      	addlt	r0, r0, r3
 8004378:	4770      	bx	lr
	...

0800437c <_init>:
 800437c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437e:	bf00      	nop
 8004380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004382:	bc08      	pop	{r3}
 8004384:	469e      	mov	lr, r3
 8004386:	4770      	bx	lr

08004388 <_fini>:
 8004388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438a:	bf00      	nop
 800438c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438e:	bc08      	pop	{r3}
 8004390:	469e      	mov	lr, r3
 8004392:	4770      	bx	lr
